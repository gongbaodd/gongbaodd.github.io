{"posts":[{"id":"2020/03/10/ssh.md","slug":"2020/03/10/ssh","body":"\n# ssh 免密码登录\n\n总是忘，这里做个记录。\n\n简单说就是把本地的`id_rsa.pub`存储到远端机器的`authorized_keys`里面，详细操作可参考[此文](http://www.linuxproblem.org/art_9.html)。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["ssh"]}},{"id":"2020/03/11/WSL2-Virtualbox.md","slug":"2020/03/11/wsl2-virtualbox","body":"\n# 应该是目前最好的 WSL2 和 Virtualbox 共存的方法了\n\n因为 WSL2 使用的是 Hyper-V（看来微软爸爸并不是完全拥抱开源了），所以其它虚拟化软件都不能和它共存，所以目前最好的办法就是在开机的时候做一个切换。\n\n```batch\nbcdedit /copy {current} /d \"Disable Hyper-V\"\n```\n\n上面操作会生成一个 GUID，它对应开机目录上一个选项，接下来把他的 hyper-v 选项关掉\n\n```batch\nbcdedit /set {<GUID>} hypervisorlaunchtype off\n```\n\n如果本地已经关闭了 hyper-v，可以执行下面的命令打开。\n\n```batch\nbcdedit /set {<GUID>} hypervisorlaunchtype auto\n```\n\n重启的时候长按 shift 键就可以唤起启动目录了。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["WSL2","virtualbox","hyper-v"],"series":{"slug":"windows-howto","name":"Windows舒适指南"}}},{"id":"2020/03/11/apt.md","slug":"2020/03/11/apt","body":"\n# 为 apt 添加代理\n\n我的上帝啊，这两天都在忙活代理（翻译腔）。\n\n系统全局下的`http_proxy`似乎对 apt 无效，需要单独设置。\n\n```shell\nsudo nano /etc/apt/apt.conf.d/proxy.conf\n```\n\n增加代理\n\n```shell\nAcquire {\n  HTTP::proxy \"http://127.0.0.1:8080\";\n  HTTPS::proxy \"http://127.0.0.1:8080\";\n}\n```\n","collection":"blog","data":{"type":"post","category":"tech","tag":["apt","proxy"]}},{"id":"2020/03/11/docker-Jenkins.md","slug":"2020/03/11/docker-jenkins","body":"\n# 使用 docker 安装 Jenkins\n\n自从成功通过 docker 安装了 strapi，我一下子对安装一切产生了很大兴趣。\n\n通过`docker-compose.yaml`可以很快安装。\n\n```yaml\njenkins:\n  restart: always\n  image: jenkins/jenkins:lts\n  container_name: gongbaodd-jenkins\n  volumes:\n    - ./docker/jenkins:/home/ubuntu/jenkins_home\n  ports:\n    - \"50000:50000\"\n    - \"8080:8080\"\n```\n\n然后访问服务器的 8080 端口，即可安装对应插件，注意，这些插件不能走代理，所以...非常慢...国内还是用 coding.net 吧。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["docker","jenkins","ci"]}},{"id":"2020/03/11/snap.md","slug":"2020/03/11/snap","body":"\n# 为 snap 添加代理\n\n想在腾讯云里面做个 CI，本着用新不用旧的思想，我打算试试搭建 microk8s。可是我国强大的网络环境无法导致无法安装，也没有个大厂出一个镜像解围，只好挂下代理解决。\n\n## sslocal\n\n注意，腾讯云里面安装 sslocal 会被和谐的，但是试了下 docker 却可以，我安装了 [teachmyself/sslocal](https://hub.docker.com/r/teachmyself/sslocal) ，目前没问题。\n\n## 修改`/etc/environment`\n\n```ini\nhttp_proxy=http://[服务器地址]:[端口号]\nhttps_proxy=http://[服务器地址]:[端口号]\n```\n\n重启 snap 即可\n\n```\nsudo systemctl restart snapd\n```\n","collection":"blog","data":{"type":"post","category":"tech","tag":["microk8s","snap","docker","shadowsocks","proxy"]}},{"id":"2020/03/15/Coding.net-Jenkins-CI-CD.md","slug":"2020/03/15/codingnet-jenkins-ci-cd","body":"\n# Coding.net 使用 Jenkins 实现自动部署(CI/CD)\n\n最近在做一些后端部署的工作，本来打算使用 Travis 部署，但是用于我的服务器在国内，所以在外网也需要挂梯子登陆到国内。但是使用 Coding.net 部署到腾讯云就方便很多（毕竟是同一家公司）。\n\n## 在 Coding 创建制品库和部署\n\n往往创建好 Coding 仓库之后需要手动配置来获得部署和制品库功能。点击「项目设置>功能开关」把「构建与部署」和「制品库」打开即可。\n\n点击「制品库」增加 docker 仓库，这里的指引很方便，可以本地写一个 hello-world 发布上去。\n\n点击「构建与部属>构建」新建构建计划，默认我都是选择代码仓库中的 Jenkins 文件，但是可以使用 coding 自带的图形化 Jenkins 编辑器，个人感觉还是比较鸡肋的，但是作为一个文件格式化工具还是不错的。另外[帮助文档](https://help.coding.net/docs/devops/ci/env.html?_ga=2.145117619.605259297.1584251292-35448522.1584251292#%E6%9E%84%E5%BB%BA%E8%AE%A1%E5%88%92%E8%AE%BE%E7%BD%AE%E4%B8%AD%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F)中有详细的变量说明。\n\n## Jenkins 配置\n\nJenkins 的主要功能是检出代码(git clone)，编译代码，执行测试，打包成 docker image 最后上传到制品库。详细内容可以参考[代码](https://github.com/gongbaodd/query.gongbushang.com/blob/master/Jenkinsfile)。\n\n```groovy\npipeline {\n  agent any\n  stages {\n    stage('检出') {\n      steps {\n        checkout([\n          $class: 'GitSCM', branches: [[name: env.GIT_BUILD_REF]],\n          userRemoteConfigs: [[\n            url: env.GIT_REPO_URL,\n            credentialsId: env.CREDENTIALS_ID\n          ]]\n        ])\n      }\n    }\n    stage('编译') {\n      steps {\n        script {\n          docker.image('strapi/base').withRun {\n            docker.image(\"strapi/base\").inside {\n              sh 'node -v && yarn --version && yarn install && NODE_ENV=production yarn build'\n            }\n          }\n        }\n\n      }\n    }\n    stage('打包镜像') {\n      steps {\n        script {\n          sh \"docker build -t strapi:${env.GIT_BUILD_REF} -t gongbaodd-docker.pkg.coding.net/query_gongbushang_com/docker/strapi:latest .\"\n        }\n\n      }\n    }\n    stage('发布') {\n      steps {\n        script {\n            sh \"docker login -u ${env.REGISTRY_USER} -p ${env.REGISTRY_PASS} ${REGISTRY_URL}\"\n            sh \"docker push ${REGISTRY_URL}/query_gongbushang_com/docker/strapi:latest\"\n        }\n      }\n    }\n  }\n}\n```\n\n## 服务器部分\n\n接下来就需要服务器自己下载镜像并执行了，这里有一个比较好的工具叫[watchtower](https://github.com/containrrr/watchtower)，它会每五分钟检查镜像是否有更新并更新本地镜像。\n\n```shell\nsudo docker run -d \\\n    --name watchtower \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    containrrr/watchtower\n```\n\n接下来在服务器执行刚才编译好的镜像即可。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["coding.net","jenkins","docker"]}}]}