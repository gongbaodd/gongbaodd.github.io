{"posts":[{"id":"2020/12/24/Haproxy-nginx-SS.md","slug":"2020/12/24/haproxy-nginx-ss","body":"\n# Haproxy 和 nginx 做 SS 中继\n\n隔离在家最痛苦的莫过于家中网络连接 SS 总是断线，参考网上的[方案](https://sjq597.github.io/2018/05/22/ShadowSocks-Haproxy%E4%B8%AD%E7%BB%A7/)，使用国内云服务作为 TCP 转发即可。\n\n## Haproxy 配置\n\n```\nglobal\n    ulimit-n  51200\n\ndefaults\n    log     global\n    mode    tcp\n    option  dontlognull\n    timeout connect 5000\n    timeout client  50000\n    timeout server  50000\n\nfrontend ss-in\n    bind *: 国内云服务的端口\n    default_backend ss-out\n\nbackend ss-out\n    server sserver_name SS的IP:SS的端口 maxconn 20480\n\n```\n\nhaproxy 可以运行在 docker 容器里\n\n```\ndocker pull haproxy:latest\nsudo docker run -d --name haproxy_6 -v 配置文件目录:/usr/local/etc/haproxy/haproxy.cfg --restart=always -p 云服务端口:配置中的端口 haproxy:latest\n```\n\n接下来在国内的云服务安全组里面打开上面的端口即可，实测大部分应用可用，但是推特上面不能显示图片，google play 也没法更新，vmess 协议目前还不支持，这些就看我以后跟进了。\n\n## nginx 配置\n\n相比之下 nginx 更加简单，在 nginx.conf 里面增加如下内容。\n\n```\nstream {\n    server {\n        listen 云服务端口;\n        proxy_pass SS的IP:SS的端口;\n    }\n}\n```\n\n这样连 Vmess 都可以使用了，不过混淆加密功能还不好使，唉，涉及到 TLS 我就跪了。\n\n测试之后 PC 端都没问题，但是移动端配置都用不了。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["haproxy","shadowsocks"]}},{"id":"2020/12/27/Google.md","slug":"2020/12/27/google","body":"\n# 如何做代码评审\n\n这是[谷歌的代码评审标准笔记](https://google.github.io/eng-practices/review/reviewer/)。\n\n## 代码评审标准\n\n代码评审是为了提高整体代码进步而设定的。\n\n首先，要确保代码以后是可以进一步改进的。代码的评审人员也应该是代码的持有者。\n\n**_总体上，评审者应该允许能够提高总体代码健壮性的代码，即使它不够完美。_**\n\n当然也有限制，如果代码增加的特性不是整个系统想要的，尽管它多么好也要拒绝掉。\n\n评审者可以任意留下评论，如果不是很重要，请增加「Nit:」作为前缀。\n\n### 指导\n\n代码评审对开发人员了解一个语言、框架都有所帮助，留下评论是可以的，但是一定记住要留下「Nit:」作为不强制性改动的标记。\n\n### 原则\n\n- 技术事实，有数据否决的建议和个人配置。\n- 代码风格，代码风格应该和原有代码保持一致，如果源代码没有代码风格则允许提交。\n- 没有纯粹的代码风格，基本上就是个人设定。\n- 评审者应该要求提交代码和现有代码保持一致，这样不会使现有代码健康更加恶化。\n\n### 处理冲突\n\n在冲突上，评审员和代码作者应该达成一致，做好要有一次面对面会议或者线上会议。如果不能达成一致，一定记得升级到更高层次人员处理。\n\n## 应该看什么\n\n### 设计\n\n- 代码和原有代码配合如何？\n- 这段改动是基于代码层面还是库层面？\n- 和系统的其他部分结合的如何？\n- 现在是增加这个功能的最好时机吗？\n\n### 功能\n\n这段代码是否符合作者用意？是否对用户有利？此处「用户」同时指端用户和开发者。\n\n有时，如 UI 改动需要评审查看 demo。\n\n### 复杂度\n\n代码的复杂度即代码是否可以被迅速理解，其它工程师是否可以修改这一段代码。\n\n一个特别案例：过度开发。\n\n### 测试\n\n要求单元测试，或适当的端对端测试。除非紧急任务，测试必须伴随代码一并提交。\n\n确保测试正确，明确和有效。\n\n### 命名\n\n确保命名简单易懂。\n\n### 注释\n\n注释应该解释这段代码为什么存在，而不是它做什么。\n\n### 代码风格\n\n谷歌有对大部分语言提供[风格指导](http://google.github.io/styleguide/)。\n\n| 生词         |            |\n| ------------ | ---------- |\n| disincentive | 妨碍活动的 |\n| mandatory    | 强制性的   |\n| overrule     | 否决       |\n| underlying   | 基本的     |\n| consensus    | 一致同意   |\n| interaction  | 配合       |\n| appropriate  | 适当的     |\n| sensible     | 明确的     |\n","collection":"blog","data":{"type":"post","category":"tech","tag":["code-review","translate"]}}]}