{"posts":[{"id":"2019/02/20/AWS SQS.md","slug":"2019/02/20/aws-sqs","body":"# AWS SQS 相关状态说明\n\n+ Message Available:  SQS 客户端可以获取到的消息, 即 Visible Messages\n\n+ Messages in Flight: 消息被 SQS 收取了之后，由 Available 转为 In Flight, 该状态的消息不能被客户端接收到\n\n+ Visibility Timeout:  消息停留在 In Flight 状态的时间, 如果在 Timeout 之前未删除这个消息，该消息重新变为 Available 状态\n\n所以在Visibility Timeout时间内，同一条消息是不会被多个客户消费的，适当延长Visibility Timeout可避免单条消息被重复处理。","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2019/02/25/javascript - unsigned int.md","slug":"2019/02/25/javascript---unsigned-int","body":"# JavaScript 获取 Unsigned Int\n\nJavaScript 默认是64位有符号的整型，可以利用移位符号解决，但不是>>2而是>>>0\n\n```javascript\nconst a = 4136517969;\nconst b = a >> 2;\n/* b == -39612332 */\n```\n\n```javascript\nconst a = 4136517969;\nconst b = a >>> 0;\n/* b == 4136517969 */\n```\n\n>最好不要使用 >> ，推荐使用 >>> 因为最左边一位会被解析成符号位，当数字溢出时，会被解析成负数。\n\n当然按照这种方式eslint的默认配置是不允许的，所以可以借助 Unit32Array.\n\n```javascript\nconst a = 4136517969;\nconst b = new Uint32Array([a])[0];\n/* b == 4136517969 */\n```","collection":"blog","data":{"type":"post","category":"tech"}}]}