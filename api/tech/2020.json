{"posts":[{"id":"2020/01/04/gitBash.md","slug":"2020/01/04/gitbash","body":"\n# GitBash 增加环境变量\n\nWSL 的运行速度比较慢，所以我在 windows 下面的开发很大一部分还是在 GitBash 下面，GitBash 基于 mingw 开发，所以直接修改.bashrc 即可\n\n```\nPATH=$PATH:/c/Program\\ Files/nodejs\nalias python='winpty python.exe'\nalias ubuntu='winpty ubuntu.exe'\n```\n\n这里注意下，因为 python 和 Ubuntu 是从应用商店安装的，直接修改 PATH 变量会有权限问题，只能利用 winpty 调用。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["git"]}},{"id":"2020/01/04/kindle-pdf.md","slug":"2020/01/04/kindle-pdf","body":"\n# 转换 kindle 书籍到 pdf\n\n自从习惯用讯飞听书之后，我就很少看书了。如果是 pdf 的话，就在 Windows 上面拿 edge 读给我听，可问题是 kindle 上面很多书加了设备锁，只能在 kindle 上面看，而 kindle 的 TTS 功能实在太差，查了一下，Calibre 是有[DeDRM 插件](https://github.com/apprenticeharper/DeDRM_tools)的。\n\n解压缩插件，在 Calibre 中点击首选项->插件->从文件加载插件，选中解压好的 zip 文件。\n\n之后在插件中找到 DeDRM，把自己的产品序列号输入进去（在亚马逊我的设备中可以找到），之后转换 azw 文件就不会有问题了。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["kindle"]}},{"id":"2020/01/05/CloudFlare-https.md","slug":"2020/01/05/cloudflare-https","body":"# 利用CloudFlare实现网站https访问\n\n## 配置DNS指向CloudFlare\n\n首先登入CloudFlare的时候，会被要求更改网站的DNS为cloudflare中。需要登入到自己网站的域名配置中修改DNS到CloudFlare下。\n\n配置成功后，收到CloudFlare的确认邮件，打开DNS，将Proxy status都打开。\n\n## 配置https-only\n\n打开CloudFlare的TLS选项，选择encryption mode为flexible，就是服务器到cloudflare不加密（只要cloudflare不作恶，我就OK），在Edge Certificates里面选择Always use https即可。\n\n## 配置防火墙只允许cloudflare的IP\n\n这里没配置成功，留个坑以后补全。\n\n安装firewalld\n\n```\nsudo apt install firewalld\nsudo systemctl start firewalld\nsudo systemctl enable firewalld\n```\n\n接下来执行以下脚本为cloudflare增加至白名单\n\n```shell\n!#/bin/bash\n\nfor i in $(curl \"https://www.cloudflare.com/ips-v4\");\ndo\nsudo firewall-cmd --permanent --zone=public --add-rich-rule='rule family=\"ipv4\" source address=\"'$i'\" port port=80 protocol=tcp accept';\nsudo firewall-cmd --permanent --zone=public --add-source=$i;\ndone\n\nfor i in $(curl \"https://www.cloudflare.com/ips-v6\");\ndo\nsudo firewall-cmd --permanent --zone=public --add-rich-rule='rule family=\"ipv6\" source address=\"'$i'\" port port=80 protocol=tcp accept';\nsudo firewall-cmd --permanent --zone=public --add-source=$i;\ndone\n\nsudo firewall-cmd --permanent --change-zone=eth0 --zone=public\n\nsudo firewall-cmd --reload\n\nfirewall-cmd --zone=public --list-all\n```","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2020/01/06/Windows-Jupyter-NotImplementError.md","slug":"2020/01/06/windows-jupyter-notimplementerror","body":"\n# 修复 Windows 下打开 Jupyter 报 NotImplementError\n\n打开`/c/Users/{USER_NAME}/AppData/Local/Programs/Python/Python38/Lib/asyncio/__init__/py`.\n\n修改\n\n```python\nif sys.platform == 'win32':\n    from .windows_event import *\n    __all__ += windows_events.__all__\n```\n\n改为如下\n\n```python\nimport asyncio\n\nif sys.platform == 'win32':\n    from .windows_event import *\n    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())\n    __all__ += windows_events.__all__\n```\n","collection":"blog","data":{"type":"post","category":"tech","tag":["jupyter"]}},{"id":"2020/01/15/Static-phylical-scope.md","slug":"2020/01/15/static-phylical-scope","body":"\n# 静态词法作用域\n\n最近在看 rust，里面提到静态词法作用域，一个神奇的 deja-vu，于是我急忙查了下它是啥。\n\nrust 和 js 都是静态词法作用域，简单说，作用域中的变量在编译时已经确定，不会随着运行时变化而变化。\n\n```javascript\nvar a = 1;\n\nfunction foo() {\n  var a = 2;\n\n  bar();\n}\n\nfunction bar() {\n  console.log(a);\n}\n\nfoo(); // print 1\n```\n\n而相对的 shell 就是动态作用域。\n\n```shell\nvalue=1\n\nfunction foo() {\n    local value=2;\n    bar;\n}\n\nfunction bar() {\n    echo $value;\n}\n\nfoo;# print 2\n```\n\n动态作用域被广泛应用于早期动态语言，猜测是早期运行环境内存比较少不能装拿这么多东西吧。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["compilers"]}},{"id":"2020/01/16/rust.md","slug":"2020/01/16/rust","body":"# rust编程之道\n\n这是一本大概是我18年买的书，当初是打算紧随Mozilla的脚步学习使用Rust，然而这本书显然不太适合那个时代的我学习。当时我只是个完全的前端，过了第3章类型管理的时候基本上就是一脸懵逼。\n\n可以说经过19年一年的后端工程师工作，我是更加了解关于线程、内存管理之类的概念。而且由于过去一年读了RxJS，对函数编程范式更加了解。另外在18年中旬，我是完全的面向对象范式追随者，对于Rust里面的一些范式显然不是很理解。\n\n这本书讲得很全面，可以说，如果拿里面的某些章节详细写出来就可以做大学教材了。但是弊端肯定是有的，比如Rust的应用，这里基本上没提，不过也可以谅解，毕竟就是在这本书出版后两年的今天，要说Rust的存在感依然很低；另外，很多作者用的很习惯的词汇往往会漏注释，毕竟我不是专门抽出一段时间来看这本书的，乍一看某个缩写还真难回忆它对应语境里面应该是什么。\n\n## 笔记\n\nrust虽然使用类C语法，但是很多地方真的和C语言及其它语言大相径庭。\n\n比如用来代替interface的trait系统\n\n```typescript\n// typescript\ninterface A {\n    bar()\n}\n\nclass B implements A {\n    bar() {\n\n    }\n}\n```\n\n在Rust中\n\n```rust\nstruct B {\n\n}\n\nimpl A for B {\n    fn bar() -> () {\n\n    }\n}\n```\n\n第182页提供了trait系统的不足，当时没看懂，以后回来看好了。\n\n另外259页生命周期参数，比较复杂，个人感觉等用到的时候再看吧。\n\n322页和361页，关于原生闭包和迭代器语法糖的第三方实现。\n\n435页RAII模式，以后抽时间看把。\n\n727页，无状态协程async/await语法糖实现。\n\n","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2020/01/28/spotify.md","slug":"2020/01/28/spotify","body":"\n# 白嫖 spotify 的方式\n\n今年开始，我不再在家办公，这使得我的网络环境不是很稳定，无法一直在线听 spotify。最好的办法，自然是把要听的音乐缓存下来。\n\nGitHub 里面有一个 python 项目[spotify-downloader](https://github.com/ritiek/spotify-downloader)可以下载 spotify 的音频。\n\n利用 pip 安装\n\n```shell\npip install spotdl\n```\n\n因为是国内使用，需要代理\n\n```shell\nenv https_proxy=http://127.0.0.1:1080 spotdl --song http://open.spotify.com/xxx\n```\n\n另外，spotdl 支持列表下载\n\n```shell\nspotdl --playlist [listUrl] # to get all songs' url\nspotdl --list list.txt # to download the songs\n```\n","collection":"blog","data":{"type":"post","category":"tech","tag":["spotify"],"series":{"slug":"windows-howto","name":"Windows舒适指南"}}},{"id":"2020/01/31/monect.md","slug":"2020/01/31/monect","body":"\n# Monect 让手机变成鼠标\n\n自从我的 XPS 键盘坏了，我就打算使用 K380 键盘替代我的笔记本键盘，然而这样使用触摸板就很困难。\n\n很久之前我就想让手机成为我的远程键盘，以前用 Linux 的时候有一个 KDE connect 可以实验通过 wifi 链接。但是因为我住的公寓 wifi 貌似会阻拦互相发现，最好的办法还是用蓝牙链接。去年稍稍了解了一些 blueman 的相关知识，其实蛮有意思的，可惜拖延症没有继续下去（确实比较有意思，苹果曾开发过一个协议，通过商场蓝牙派发广告）。\n\n回到正题，可以通过 Monenct 官网下载 PC 的 host，在 play store 下载 client，monect 支持 wifi、蓝牙以及 usb 链接。这样即使有一种连接方式暂时不可用其他方式能够立马替换。\n","collection":"blog","data":{"type":"post","category":"tech","series":{"slug":"windows-howto","name":"Windows舒适指南"}}},{"id":"2020/02/04/Powershell-Windows.md","slug":"2020/02/04/powershell-windows","body":"\n# 用 Powershell 更新 Windows\n\n发现已经半个月没有被 Windows 更新打扰了，原来是一个累积更新挂了，我发现在图形界面下面怎么更新都失败，于是寻思在命令行执行。\n\n在 powershell 中有一个包 PSUpdateWindows 可以派上用场。\n\n```powershell\nInstall-Module PSUpdateWindow\n\nGet-WindowsUpdate #下载更新\n\nInstall-WindowsUpdate #安装更新\n```\n","collection":"blog","data":{"type":"post","category":"tech","tag":["powershell"],"series":{"slug":"windows-howto","name":"Windows舒适指南"}}},{"id":"2020/02/04/Windows-scrapy.md","slug":"2020/02/04/windows-scrapy","body":"\n# Windows 上使用 scrapy 抓取网页\n\n过去一周，我在尝试在 Windows 上面使用 python，我会在这一篇文章中总结一下这一次体验的经验，代码已经发布到[GitHub](https://github.com/gongbaodd/webScrapingStudy)上面。\n\n## 安装 python\n\n本身 python 的版本就比较混乱，Windows 又提供了商店版，而且 WSL 下面也可以安装 Linux 的 python，我都体验了一下。\n\n- Windows 商店版，这个貌似就是为了教学使用，因为 Windows 目前比较尴尬，全局安装的包可能会有兼容性问题，但是因为商店版都运行在沙盒之下，基本上就没多少修改的可能了。\n- WSL 版本，这个版本体验的是纯正的 Linux，但是一定要注意，如果没安装 Xserver 就相当于没有图形界面。\n- x64 版本，这个问题在于安装文件的地址都跟了个 x64。\n- win32 版本，这个版本的问题比较小，除了 pyenv 需要单独下载 Windows 版和[jupyter 报错](https://gongbaodd.github.io/tech/2020/01/06/%E4%BF%AE%E5%A4%8DWindows%E4%B8%8B%E6%89%93%E5%BC%80Jupyter%E6%97%B6%E6%8A%A5NotImplementError.html)，还没碰到其他问题。\n\n## pyenv\n\n介于 python 大版本兼容性，个人认为要安装一个版本管理器。因为习惯于 JavaScript 工作环境，我肯定会寻找类似于 nvm 的映射就是 pyenv，在 Windows 下面可以通过 chocolatey 安装。\n\n```shell\nsudo choco install pyenv-win\n```\n\n下面几个命令是最常用的。\n\n- `pyenv install -l`查看可以安装的 python 版本号。\n- `pyenv local install 3.8.0`在项目中安装 3.8.0 版本（会在项目目录增加.python-version 文件）。\n- `pyenv version`查看现在的 python 版本。\n- `pyenv versions`查看安装过的 python 版本。\n\nwin10 上了一个新功能，控制台会引导 python 到应用商店，在“设置>应用和功能>应用执行名”中可以勾掉这个功能\n\n## virtualenv\n\npython 的包管理其实很差，都是放到 global 下面，这就导致多个项目可能都用同一个依赖。那么如何实现每个项目都有自己的依赖呢？这就靠 virtualenv。\n\n```shell\npip install virtualenv\n```\n\n如下命令最常用\n\n- `virtualenv [venv folder name]`新建虚拟环境文件夹。\n- `source [venv folder name]/Scripts/activate`启动虚拟环境（在 Linux 下面是 bin/activate）。\n- `deactivate`关闭虚拟环境（这个在 Linux 会比较常用）。\n\n## scrapy\n\nscrapy 是一个 python 的爬虫框架，使用 pip 可以安装 scrapy。\n\n```shell\npip install scrapy\n```\n\n下面是 scrapy 用的比较多的几个命令\n\n- `scrapy startproject [project name]`新建项目。\n- `scrapy crawl [spider name] -o [output file]`爬取页面并输出结果到文件。\n\nscrapy 的概念比较多，包括 spider、pipeline、middleware 等等，但个人看来基本上看完[tutorial](https://docs.scrapy.org/en/latest/intro/tutorial.html#our-first-spider)就可以上手了。\n\n### scrapy shell\n\n执行`scrapy shell [url]`可以以命令形式使用 scrapy。\n\n- `fetch('http://xxx.com')`爬取页面\n- `view(response)`浏览爬取的页面\n- `response.css('a::text').extract()`析取页面中链接的文字列表\n- `response.css('a::attr(href)')`析取页面中链接列表\n\n### 发起 Xmlhttp 请求\n\n使用[Scrapy.FormRequest](https://docs.scrapy.org/en/latest/topics/request-response.html#scrapy.http.FormRequest)发起请求，接收到结果可以使用[response.body_as_unicode()]解析 JSON 为字典。\n\n### splash\n\n截至目前，scrapy 都只能渲染非 JavaScript 运行的页面，但是借助 splash 就可以解析 JavaScript 了。我们使用 docker 可以尝试一下 splash。\n\n```shell\ndocker pull scrapinghub/splash\ndocker run -p 8050:8050 scrapinghub/splash\n```\n\n访问 localhost:8050 即可访问 splash。通过安装`scrapy-splash`可以在 scrapy 中使用 splash，具体安装步骤[官网](https://github.com/scrapy-plugins/scrapy-splash)已经很详细在此不做赘述。\n\n## Scrapinghub\n\nScrapinghub 是一个基于 scrapy 的云服务，可以将自己的爬虫部署到该平台。[这里](https://support.scrapinghub.com/support/solutions/articles/22000200667-running-a-scrapy-spider)有个工具可以帮助部署（当然通过链接 GitHub 可以做到 master 部署）。\n\n```shell\npip install shub\n```\n\n### 解决依赖\n\n爬虫上传到 Scrapinghub 之后，会部署失败，可能源于以下两点。\n\n- scrapinghub 使用的是 python2\n- 部份依赖没有安装\n\n以上两点可以通过修改 scrapinghub.yml 完成\n\n```yaml\nprojects:\n  default: 427692\nstacks:\n  default: scrapy:1.8-py3\nrequirements:\n  file: requirements.txt\n```\n\n通过`pip freeze`能够列举出目前环境下的所有包，需要挑出可能缺少的依赖写在 requirements.txt 里面（没错这一步只能人工完成，不要妄想把所有包都写进去）。\n\n```\nbeautifulsoup4==4.8.2\nfeedparser===5.2.1\nscrapy-splash==0.7.2\n```\n\n## 单元测试\n\n使用 python 自带的 unittest 模块以及 pytest 可以对代码进行单元测试。可以参考我代码中的[测试](https://github.com/gongbaodd/webScrapingStudy/tree/master/test/test_spider)。\n\n执行 pytest 的时候会出现找不到模块的问题，可以按照如下方式重置根地址位置。\n\n```\npython -m pytest [file path]\n```\n\n## 代码优化和格式化\n\n这里比较爽了，如果用的是 vscode，在第一次格式化代码的时候，vscode 就会安装格式化工具。\n\n## pre-commit\n\npre-commit 是一个 git 钩子工具，简单说，当本地代码不满足要求的时候，利用这个工具自动格式化代码或者阻止用户提交代码。可以参考[官网配置](https://pre-commit.com/)。\n\n## 包健康检查\n\n目前没在 python 找到一个类似于 yarn audit 的东西，到那时找到了一个[SNYK](https://snyk.io)是一个跨语言的包健康检查工具，但是貌似还有 bug，暂时先裸奔好了。\n\n## 持续集成\n\n目前我是用 Travis 做集成，配置文件可参考[此文件](https://github.com/gongbaodd/webScrapingStudy/blob/master/.travis.yml)。\n\n## 兼容性处理\n\n另外还找到一个 python 版本兼容测试工具，考虑到使用 python 命令的人自己的 python 版本并不确定，[tox](https://pypi.org/project/tox/)则是用来测试 py 是否兼容某些 python 的版本。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["scrapy","python"]}},{"id":"2020/02/06/git-CRLF-LF.md","slug":"2020/02/06/git-crlf-lf","body":"\n# Git 中的 CRLF 和 LF\n\n跨平台开发的时候，如果是在 Windows 下面上传代码，git 会提醒部分文本文件的 CRLF 会改为 LF。\n\n原因是在 Windows 下面，文本文件会以 CRLF（回车换行）结尾，而 Linux 和 Mac 会以 LF（换行）结尾。其实想想打字机，回车换行是一个正确的做法，但是为了保持兼容性，git 会把 Windows 上传的 CRLF 都改成 LF。\n\n如果只在 Windows 下面开发，可以关掉这个功能。\n\n```shell\ngit config --global core.autocrlf false\n```\n","collection":"blog","data":{"type":"post","category":"tech","tag":["git"]}},{"id":"2020/02/12/Windows-Rust-GTK.md","slug":"2020/02/12/windows-rust-gtk","body":"\n# Windows 下为 Rust 提供 GTK 环境\n\nWindows 下面安装 GTK 环境有两种方法，借助 msys2 的 linux 环境，或者借助 VCPKG 安装 Windows 的 GTK 依赖。\n\n尝试了一下，msys2 并没有成功，只能使用 VCPKG，参考[gnome 编译指南](https://www.gtk.org/download/windows.php)。\n\n```batch\ngit clone https://github.com/Microsoft/vcpkg\ncd vcpkg\n.\\bootstrap-vcpkg.bat\nvcpkg install gtk:x64-windows\n```\n\n安装的时候发现不能编译成功，此时需要祭出 Visual Studio 大法，找到 Visual Studio Installer，安装 C 工具链，再重新执行上面的代码即可。\n\n然后再环境变量中增加`GTK_LIB_BASE`值为`c:\\MyWorks\\github\\vcpkg\\installed\\x64-windows\\lib`(就是 vcpkg 下载依赖包的位置)\n\n环境变量中的 PATH 的第一个值也要配上`c:\\MyWorks\\github\\vcpkg\\installed\\x64-windows\\bin`。\n\n如果 rust 项目还编译不成功，尝试将 vcpkg 里面的/lib/gdk-3.lib 和/lib/gtk-3.lib 连接到/lib/gdk-3.0.lib 和/lib/gtk-3.0.lib，bin 文件夹下的 dll 文件也一样处理。\n\n再次运行`cargo run`即可，[相关代码](https://github.com/gongbaodd/rust_webAssembly_study/tree/master/rust_gtk)。\n\n最初想试一下 rust-gtk 的原因是，想试试这个跨平台框架如何，但是在 Windows 下面效果并不怎么样，而且还有 HIDPI 的问题，Reddit 里面讨论感觉 gtk 这边也没有很着力于 rust，所以对 GTK 的探究就暂时到此为止了。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["rust","gtk"]}},{"id":"2020/02/13/Windows-Rust-QT.md","slug":"2020/02/13/windows-rust-qt","body":"\n# Windows 下为 Rust 提供 QT 环境（弃）\n\nQT 的部署要比 GTK 容易一些，然而由于最近我的机场流量用尽，所以最大的困难就是网络。\n\n参考[Rust-qt](https://github.com/rust-qt/examples)，有比较详细的环境配置。需要下载完整的[Qt 安装包](https://www.qt.io/download)和[Visual Studio 2017](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15)（最好用 2017，能少踩不少坑）。\n\n安装成功后，在环境变量 PATH 里面增加`C:\\Qt\\Qt5.14.1\\5.14.1\\msvc2017_64\\bin`然后找到 VS2017 的命令行，只有这个命令行能准确编译 QT5。\n\n虽然按照 Rust-qt 的做法，C++的 QT 可以完美运行，但是编译的时候要使用 gcc，所以还是要安装 msys2，而且对 QT 要求的版本也比较苛刻，因此我决定就此放弃 QT（即使 QT 已经能跑在 web-assembly 上面了）。\n\n## Rust 相关的 UI 框架\n\n其实还有一篇文章关于 Rust 的 UI 编程的，可以查看[这篇文章](https://gitlab.com/bloom42/research/rust_gui_ecosystem)。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["rust","qt"]}},{"id":"2020/02/15/Github.md","slug":"2020/02/15/github","body":"\n# Github 项目徽章地址\n\n在https://shields.io/可以为Github项目添加徽章。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["github"]}},{"id":"2020/02/22/Windows-strokesPlus.md","slug":"2020/02/22/windows-strokesplus","body":"\n# 分享一个 Windows 下面的鼠标手势工具 StrokesPlus\n\n我终于还是妥协了，在使用 windows 的情况下最好还是配备一个鼠标。尤其是当你在编程的时候。并不是说触摸屏不好，在很多时候，触摸屏可以在可以帮你记录一些东西。比如让你写一些算法的时候，你可以在旁边画一画。\n\n但是不得不说，编辑器就像 VS code。他对触摸屏的交互其实是很反人类的。另外由于我现在是三台设备。所以我的键盘是同时连着三台设备。。这说明当我要操作我的笔记本的时候，身体要跨过两个键盘的距离。这个动作幅度是比较大的。\n\n所以我在网上买了这个科大讯飞的鼠标，他有一个最大的好处就是，我可以说话打字。这样我就不需要操作键盘了。但是 windows 上面还有另外一个问题，就是鼠标，还有触摸屏和触摸板，三者都没有统一的交互体验。所以我又安装了这个鼠标手势工具。\n\nStrokesPlus 安装很简单，依然使用的是 chocolatey。\n\n```shell\nsudo choco install strokesplus\n```\n\n其实我的需求很简单，就是需要鼠标手势来操作切换桌面。安装好 strokePlus，打开 action 菜单即可添加手势。\n\n- @：代表\"Win\"键\n- +：代表“Shift”键\n- ^：代表“Ctrl”键\n- %：代表“Alt”键\n\n如进入右边桌面的命令为`acSendKeys(\"^@{RIGHT}\")`。\n\n添加\n\n- `acSendKeys(\"^@{RIGHT}\")` 进入右桌面\n- `acSendKeys(\"^@{LEFT}\")` 进入左桌面\n- `acSendKeys(\"@{TAB}\")` 全部桌面\n\n配合 GestureSign，终于触摸屏，触摸板和鼠标手势统一了。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["windows"],"series":{"slug":"windows-howto","name":"Windows舒适指南"}}},{"id":"2020/02/23/Mouse-without-borders.md","slug":"2020/02/23/mouse-without-borders","body":"\n# Mouse without borders 让鼠标同时连接 4 台 PC\n\n既然已经给我的 PC 买上了鼠标，那我肯定希望，三台 PC 能够共用这一个鼠标。在网上查询了一下，发现需要这个需求的人不止我一个。所以微软有一个项目叫做[mouse without border](https://www.microsoft.com/en-us/download/details.aspx?id=35460)。\n\n只要三台设备在同一个域下，我就可以通过这一个软件，让三台设备共享鼠标。\n\n今天忙活了半天这个软件，主要是自如的 wifi 5GHz 设置了防火墙，但是 2.4GHz 没有...所以只要有一台设备连接的是 2.4G 赫兹的网络。就可以进入内网，跟其他的设备交互共享鼠标了。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["windows"],"series":{"slug":"windows-howto","name":"Windows舒适指南"}}},{"id":"2020/02/26/WSL-ruby.md","slug":"2020/02/26/wsl-ruby","body":"\n# WSL 安装 ruby 环境\n\n虽然我这个博客是基于 jekyll 的，但是因为国内整 ruby 的环境实在痛苦，但是最近不得不又重新搞起来了，只能在这里记录一下。\n\n首先安装环境\n\n```shell\nsudo apt install ruby ruby-dev build-essential\n```\n\n然后修改 gem 的环境变量\n\n```shell\nexport GEM_HOME=$HOME/gems\nexport PATH=$HOME/gems/bin:$PATH\n```\n\n修改 source 为 ruby-china\n\n```shell\ngem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/\n```\n\n接着安装 jekyll 即可\n\n```shell\ngem install jekyll bundler\n```\n","collection":"blog","data":{"type":"post","category":"tech","tag":["ruby"]}},{"id":"2020/03/10/ssh.md","slug":"2020/03/10/ssh","body":"\n# ssh 免密码登录\n\n总是忘，这里做个记录。\n\n简单说就是把本地的`id_rsa.pub`存储到远端机器的`authorized_keys`里面，详细操作可参考[此文](http://www.linuxproblem.org/art_9.html)。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["ssh"]}},{"id":"2020/03/11/WSL2-Virtualbox.md","slug":"2020/03/11/wsl2-virtualbox","body":"\n# 应该是目前最好的 WSL2 和 Virtualbox 共存的方法了\n\n因为 WSL2 使用的是 Hyper-V（看来微软爸爸并不是完全拥抱开源了），所以其它虚拟化软件都不能和它共存，所以目前最好的办法就是在开机的时候做一个切换。\n\n```batch\nbcdedit /copy {current} /d \"Disable Hyper-V\"\n```\n\n上面操作会生成一个 GUID，它对应开机目录上一个选项，接下来把他的 hyper-v 选项关掉\n\n```batch\nbcdedit /set {<GUID>} hypervisorlaunchtype off\n```\n\n如果本地已经关闭了 hyper-v，可以执行下面的命令打开。\n\n```batch\nbcdedit /set {<GUID>} hypervisorlaunchtype auto\n```\n\n重启的时候长按 shift 键就可以唤起启动目录了。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["WSL2","virtualbox","hyper-v"],"series":{"slug":"windows-howto","name":"Windows舒适指南"}}},{"id":"2020/03/11/apt.md","slug":"2020/03/11/apt","body":"\n# 为 apt 添加代理\n\n我的上帝啊，这两天都在忙活代理（翻译腔）。\n\n系统全局下的`http_proxy`似乎对 apt 无效，需要单独设置。\n\n```shell\nsudo nano /etc/apt/apt.conf.d/proxy.conf\n```\n\n增加代理\n\n```shell\nAcquire {\n  HTTP::proxy \"http://127.0.0.1:8080\";\n  HTTPS::proxy \"http://127.0.0.1:8080\";\n}\n```\n","collection":"blog","data":{"type":"post","category":"tech","tag":["apt","proxy"]}},{"id":"2020/03/11/docker-Jenkins.md","slug":"2020/03/11/docker-jenkins","body":"\n# 使用 docker 安装 Jenkins\n\n自从成功通过 docker 安装了 strapi，我一下子对安装一切产生了很大兴趣。\n\n通过`docker-compose.yaml`可以很快安装。\n\n```yaml\njenkins:\n  restart: always\n  image: jenkins/jenkins:lts\n  container_name: gongbaodd-jenkins\n  volumes:\n    - ./docker/jenkins:/home/ubuntu/jenkins_home\n  ports:\n    - \"50000:50000\"\n    - \"8080:8080\"\n```\n\n然后访问服务器的 8080 端口，即可安装对应插件，注意，这些插件不能走代理，所以...非常慢...国内还是用 coding.net 吧。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["docker","jenkins","ci"]}},{"id":"2020/03/11/snap.md","slug":"2020/03/11/snap","body":"\n# 为 snap 添加代理\n\n想在腾讯云里面做个 CI，本着用新不用旧的思想，我打算试试搭建 microk8s。可是我国强大的网络环境无法导致无法安装，也没有个大厂出一个镜像解围，只好挂下代理解决。\n\n## sslocal\n\n注意，腾讯云里面安装 sslocal 会被和谐的，但是试了下 docker 却可以，我安装了 [teachmyself/sslocal](https://hub.docker.com/r/teachmyself/sslocal) ，目前没问题。\n\n## 修改`/etc/environment`\n\n```ini\nhttp_proxy=http://[服务器地址]:[端口号]\nhttps_proxy=http://[服务器地址]:[端口号]\n```\n\n重启 snap 即可\n\n```\nsudo systemctl restart snapd\n```\n","collection":"blog","data":{"type":"post","category":"tech","tag":["microk8s","snap","docker","shadowsocks","proxy"]}},{"id":"2020/03/15/Coding.net-Jenkins-CI-CD.md","slug":"2020/03/15/codingnet-jenkins-ci-cd","body":"\n# Coding.net 使用 Jenkins 实现自动部署(CI/CD)\n\n最近在做一些后端部署的工作，本来打算使用 Travis 部署，但是用于我的服务器在国内，所以在外网也需要挂梯子登陆到国内。但是使用 Coding.net 部署到腾讯云就方便很多（毕竟是同一家公司）。\n\n## 在 Coding 创建制品库和部署\n\n往往创建好 Coding 仓库之后需要手动配置来获得部署和制品库功能。点击「项目设置>功能开关」把「构建与部署」和「制品库」打开即可。\n\n点击「制品库」增加 docker 仓库，这里的指引很方便，可以本地写一个 hello-world 发布上去。\n\n点击「构建与部属>构建」新建构建计划，默认我都是选择代码仓库中的 Jenkins 文件，但是可以使用 coding 自带的图形化 Jenkins 编辑器，个人感觉还是比较鸡肋的，但是作为一个文件格式化工具还是不错的。另外[帮助文档](https://help.coding.net/docs/devops/ci/env.html?_ga=2.145117619.605259297.1584251292-35448522.1584251292#%E6%9E%84%E5%BB%BA%E8%AE%A1%E5%88%92%E8%AE%BE%E7%BD%AE%E4%B8%AD%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F)中有详细的变量说明。\n\n## Jenkins 配置\n\nJenkins 的主要功能是检出代码(git clone)，编译代码，执行测试，打包成 docker image 最后上传到制品库。详细内容可以参考[代码](https://github.com/gongbaodd/query.gongbushang.com/blob/master/Jenkinsfile)。\n\n```groovy\npipeline {\n  agent any\n  stages {\n    stage('检出') {\n      steps {\n        checkout([\n          $class: 'GitSCM', branches: [[name: env.GIT_BUILD_REF]],\n          userRemoteConfigs: [[\n            url: env.GIT_REPO_URL,\n            credentialsId: env.CREDENTIALS_ID\n          ]]\n        ])\n      }\n    }\n    stage('编译') {\n      steps {\n        script {\n          docker.image('strapi/base').withRun {\n            docker.image(\"strapi/base\").inside {\n              sh 'node -v && yarn --version && yarn install && NODE_ENV=production yarn build'\n            }\n          }\n        }\n\n      }\n    }\n    stage('打包镜像') {\n      steps {\n        script {\n          sh \"docker build -t strapi:${env.GIT_BUILD_REF} -t gongbaodd-docker.pkg.coding.net/query_gongbushang_com/docker/strapi:latest .\"\n        }\n\n      }\n    }\n    stage('发布') {\n      steps {\n        script {\n            sh \"docker login -u ${env.REGISTRY_USER} -p ${env.REGISTRY_PASS} ${REGISTRY_URL}\"\n            sh \"docker push ${REGISTRY_URL}/query_gongbushang_com/docker/strapi:latest\"\n        }\n      }\n    }\n  }\n}\n```\n\n## 服务器部分\n\n接下来就需要服务器自己下载镜像并执行了，这里有一个比较好的工具叫[watchtower](https://github.com/containrrr/watchtower)，它会每五分钟检查镜像是否有更新并更新本地镜像。\n\n```shell\nsudo docker run -d \\\n    --name watchtower \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    containrrr/watchtower\n```\n\n接下来在服务器执行刚才编译好的镜像即可。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["coding.net","jenkins","docker"]}},{"id":"2020/04/02/docker-mongodb.md","slug":"2020/04/02/docker-mongodb","body":"\n# docker 化的 mongodb 使用方案\n\n之前提到过[使用 watchtower 更新本地的 image 的方案](/tech/2020/03/15/Coding.net使用Jenkins实现自动部署CI&CD)，本来我的系统一直使用 sqlite 来做数据库，现在想改成 mongodb。\n\n涉及到 mongodb 就不得不需要考虑怎么本地化，并且如何做备份。数据本地化很好做，只需要 docker 的 volume 即可，编写`docker-compose.yml`，使用`docker-compose up -d`。\n\n```ini\nversion: '3.7'\n\nvolumes:\n  mongo:\n  strapi:\n\nservices:\n  mongo:\n    image: mongo\n    restart: always\n    volumes:\n      - mongo:/data/db\n    ports:\n      - 27017:27017\n  adminmongo:\n    image: mrvautin/adminmongo\n    ports:\n      - 1234:1234\n    environment:\n      - HOST=0.0.0.0\n      - CONN_NAME=mongo\n      - DB_HOST=mongo\n      - DB_PORT=27017\n      - PASSWORD=$ADMIN_MONGO_PASSWORD\n    links:\n      - mongo:mongo\n  strapi:\n      image: <strapi registry>\n      environment:\n        DATABASE_CLIENT: mongo\n        DATABASE_NAME: strapi\n        DATABASE_HOST: mongo\n        DATABASE_PORT: 27017\n      links:\n        - mongo:mongo\n      volumes:\n        - ./app:/srv/app\n      ports:\n        - '1337:1337'\n\n\n```\n\n## 备份\n\n使用如下命令备份\n\n```shell\ndocker-compose exec -T mongo mongodump --archive --gzip --db <database> > dump.gz\n```\n\n## 还原\n\n```shell\ndocker-compose exec -T mongo mongorestore --archive --gzip < dump.gz\n```\n\n## 可视化管理 docker\n\n使用 [portainer](https://www.portainer.io/) 能够可视化管理现在运行的 docker。执行如下命令，再访问 localhost:9000，嗒嗒！以后再也不需要执行`docker ps`了。\n\n```shell\ndocker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer\n```\n\n## 可视化管理 mongodb\n\n可以使用[adminmongo](https://github.com/mrvautin/adminMongo)提供一套简单可用的 WebUI，我已经写到了 docker compose 里面了。\n\n另外`environment`里面的`PASSWORD`并不好使，已经有[issue](https://github.com/mrvautin/adminMongo/issues/166)，不过已经是 2017 年的了，最快的解决方式就是删除`config/app.json`，只需要在 portainer 里面选择`Containers > mongodb_adminmongo_1` 点击 `Edit`，修改 `Command` 并重新部署。\n\n![portainer的设置](./portainer-config.jpg)\n","collection":"blog","data":{"type":"post","category":"tech","tag":["docker","portainer","mongodb"]}},{"id":"2020/04/28/keyLemon.md","slug":"2020/04/28/keylemon","body":"\n# keyLemon 让任何一个摄像头都支持人脸登入\n\nWindows hello 是一个用一次就回不去的功能，目前我的笔记本支持指纹登入，一台平板外接了一个指纹接收器，另一台只能 PIN 码登入。显然 PIN 码用起来就不是很爽，然而这机器还是用来看书的。\n\n然而 Windows Hello 对摄像头要求很苛刻，于是我在想，有没有类似于安卓的单镜头解锁方案，KeyLemon 就是，v3 版本已经支持 Windows 10，虽然网上有评论说这软件免费版只能用 7 天，但是软件中只看到三种授权方式，basic 仅支持一张人脸和无活体检测的人脸登录，貌似这个 basic 就是免费版。\n\n实际体验，这个软件受光照影响很大，晚上录入的脸到早上就不识别了，这时输入 PIN 码依然可以登入。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["windows","facial-recognition","keyLemon"],"series":{"slug":"windows-howto","name":"Windows舒适指南"}}},{"id":"2020/05/06/spacedesk.md","slug":"2020/05/06/spacedesk","body":"\n# spacedesk 让任意一台设备成为扩展屏幕\n\n之前我有一篇[文章](/tech/2020/02/23/Mouse_without_borders让鼠标同时连接四台设备.html)，让鼠标和键盘能跨越四台 Windows，而[spacedesk](https://spacedesk.net/)则是让所有设备成为主计算机的扩展屏幕，注意，这里是所有，包括 Windows 设备和手机设备，应该是类似于 miracast 的技术，安利应用商店里的 slave 端，运行很快。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["windows"],"series":{"slug":"windows-howto","name":"Windows舒适指南"}}},{"id":"2020/05/11/WSL-Xserver.md","slug":"2020/05/11/wsl-xserver","body":"\n# WSL 下运行 Xserver 鼠标太小\n\n不太清楚是不是 HIDPI 造成的，在 VcXsrv 下面的鼠标指针及其小。解决方法只能是换一个看起来大一些的鼠标。\n\n```shell\nsudo apt-get install big-cursor\n```\n\n接下来，重命名 VcXsrv 下面的`font/misc`（比如`C:\\Program Files\\VcXsrv\\fonts\\misc)`）的`cursor.pcf.gz`为`cursor-small.pcf.gz`。\n\n然后将刚才安装在 wsl 中的`/usr/share/fonts/X11/misc/big-cursor.pcf.gz`拷贝到上面的目录下，并重命名为`cursor.pcf.gz`。\n\n重启 VcXsrv 即可。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["windows","wsl","vcxsrv"],"series":{"slug":"windows-howto","name":"Windows舒适指南"}}},{"id":"2020/08/05/Window10-action center.md","slug":"2020/08/05/window10-action-center","body":"# 解决Windows10的action center无法打开的问题\n\n最近打开平板发现任务栏右下角的事件中心无法打开了，不仅如此，连wlan、声音大小、省电中心都不能打开了，简单的查了一下，或许是因为升级之后uwp注册出错了，需要重新注册，管理模式打开powershell输入以下命令重新注册应用。\n\n```\nGet-AppxPackage | % { Add-AppxPackage -DisableDevelopmentMode -Register “$($_.InstallLocation)\\AppxManifest.xml” -verbose }\n```","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2020/12/24/Haproxy-nginx-SS.md","slug":"2020/12/24/haproxy-nginx-ss","body":"\n# Haproxy 和 nginx 做 SS 中继\n\n隔离在家最痛苦的莫过于家中网络连接 SS 总是断线，参考网上的[方案](https://sjq597.github.io/2018/05/22/ShadowSocks-Haproxy%E4%B8%AD%E7%BB%A7/)，使用国内云服务作为 TCP 转发即可。\n\n## Haproxy 配置\n\n```\nglobal\n    ulimit-n  51200\n\ndefaults\n    log     global\n    mode    tcp\n    option  dontlognull\n    timeout connect 5000\n    timeout client  50000\n    timeout server  50000\n\nfrontend ss-in\n    bind *: 国内云服务的端口\n    default_backend ss-out\n\nbackend ss-out\n    server sserver_name SS的IP:SS的端口 maxconn 20480\n\n```\n\nhaproxy 可以运行在 docker 容器里\n\n```\ndocker pull haproxy:latest\nsudo docker run -d --name haproxy_6 -v 配置文件目录:/usr/local/etc/haproxy/haproxy.cfg --restart=always -p 云服务端口:配置中的端口 haproxy:latest\n```\n\n接下来在国内的云服务安全组里面打开上面的端口即可，实测大部分应用可用，但是推特上面不能显示图片，google play 也没法更新，vmess 协议目前还不支持，这些就看我以后跟进了。\n\n## nginx 配置\n\n相比之下 nginx 更加简单，在 nginx.conf 里面增加如下内容。\n\n```\nstream {\n    server {\n        listen 云服务端口;\n        proxy_pass SS的IP:SS的端口;\n    }\n}\n```\n\n这样连 Vmess 都可以使用了，不过混淆加密功能还不好使，唉，涉及到 TLS 我就跪了。\n\n测试之后 PC 端都没问题，但是移动端配置都用不了。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["haproxy","shadowsocks"]}},{"id":"2020/12/27/Google.md","slug":"2020/12/27/google","body":"\n# 如何做代码评审\n\n这是[谷歌的代码评审标准笔记](https://google.github.io/eng-practices/review/reviewer/)。\n\n## 代码评审标准\n\n代码评审是为了提高整体代码进步而设定的。\n\n首先，要确保代码以后是可以进一步改进的。代码的评审人员也应该是代码的持有者。\n\n**_总体上，评审者应该允许能够提高总体代码健壮性的代码，即使它不够完美。_**\n\n当然也有限制，如果代码增加的特性不是整个系统想要的，尽管它多么好也要拒绝掉。\n\n评审者可以任意留下评论，如果不是很重要，请增加「Nit:」作为前缀。\n\n### 指导\n\n代码评审对开发人员了解一个语言、框架都有所帮助，留下评论是可以的，但是一定记住要留下「Nit:」作为不强制性改动的标记。\n\n### 原则\n\n- 技术事实，有数据否决的建议和个人配置。\n- 代码风格，代码风格应该和原有代码保持一致，如果源代码没有代码风格则允许提交。\n- 没有纯粹的代码风格，基本上就是个人设定。\n- 评审者应该要求提交代码和现有代码保持一致，这样不会使现有代码健康更加恶化。\n\n### 处理冲突\n\n在冲突上，评审员和代码作者应该达成一致，做好要有一次面对面会议或者线上会议。如果不能达成一致，一定记得升级到更高层次人员处理。\n\n## 应该看什么\n\n### 设计\n\n- 代码和原有代码配合如何？\n- 这段改动是基于代码层面还是库层面？\n- 和系统的其他部分结合的如何？\n- 现在是增加这个功能的最好时机吗？\n\n### 功能\n\n这段代码是否符合作者用意？是否对用户有利？此处「用户」同时指端用户和开发者。\n\n有时，如 UI 改动需要评审查看 demo。\n\n### 复杂度\n\n代码的复杂度即代码是否可以被迅速理解，其它工程师是否可以修改这一段代码。\n\n一个特别案例：过度开发。\n\n### 测试\n\n要求单元测试，或适当的端对端测试。除非紧急任务，测试必须伴随代码一并提交。\n\n确保测试正确，明确和有效。\n\n### 命名\n\n确保命名简单易懂。\n\n### 注释\n\n注释应该解释这段代码为什么存在，而不是它做什么。\n\n### 代码风格\n\n谷歌有对大部分语言提供[风格指导](http://google.github.io/styleguide/)。\n\n| 生词         |            |\n| ------------ | ---------- |\n| disincentive | 妨碍活动的 |\n| mandatory    | 强制性的   |\n| overrule     | 否决       |\n| underlying   | 基本的     |\n| consensus    | 一致同意   |\n| interaction  | 配合       |\n| appropriate  | 适当的     |\n| sensible     | 明确的     |\n","collection":"blog","data":{"type":"post","category":"tech","tag":["code-review","translate"]}}]}