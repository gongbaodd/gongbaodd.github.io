{"posts":[{"id":"2015/02/17/ArchLinux-bug.md","slug":"2015/02/17/archlinux-bug","body":"\n#ArchLinux升级搜狗输入法有bug的解决方案\n\n>不久前升级了搜狗输入法，因为据说这次升级性能提高了不少，更新了之后，确实啊！但是没意识到的是，出来了一堆bug。\n\n升级AtomEditor到0.177竟然不能使用中文了T.T还以为是个bug[#5447](https://github.com/atom/atom/issues/5447#issuecomment-74660587)，因为当时觉着chrome也没问题啊（其实有问题，地址栏输入太快的时候会发生错乱>.<，比如输baidu.com会变成badiu.cmo，奇葩啊）。\n\n##出问题的特征：\n* AtomEditor不能输入中文\n* SublimeText（打了补丁之后）不能输入中文\n* Chrome/Chromium地址栏输入有时会发生错乱\n\n##解决方案：\n实际上也是自己粗心，运行下面，马上就知道问题在哪了。\n\n    $ fcitx-diagnose\n    \n升级sogou的时候，输入法环境变量被改成Xim了，不知道在别的系统上面咋样，但这些变量在Arch上得是fctix，所以修改一下~/.xprofile。\n\n    export GTK_IM_MODULE=fcitx\n    export QT_IM_MODULE=fcitx\n    \n没问题啦～\n\n##后记\n编辑器不好使的那段时候，我改用了Brackets，很棒的编辑器，做整个项目的时候很好使，而且速度比atom、sublime都快。\n\n","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2015/02/17/pacman.md","slug":"2015/02/17/pacman","body":"\n\n#pacman改下载器\n\npacman默认使用wget下载，没说wget不好，在家里面总是断，所以改成aria2了\n\n## 移除未安装的包\n\n    # pacman -Sc\n    \n## 使用aria2 代替 wget\n\n    # pacman -S aria2\n    \n## 修改/etc/pacman.conf\n\n    XferCommand = /usr/bin/aria2c --allow-overwrite=true -c --file-allocation=none --log-level=error -m2 --max-connection-per-server=6 --max-file-not-found=5 --min-split-size=5M --no-conf --remote-time=true --log=- --summary-interval=60 -t5 -d / -o %o %u\n","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2015/03/21/Don't Starve console.md","slug":"2015/03/21/dont-starve-console","body":"\n#《饥荒》作弊,顺便学习lua\n\n1. 打开Console\n\n    在～下面找DoNotStarve/settings.ini修改。\n\n        ENABLECONSOLE = false\n        \n2. 游戏中点～键打开console。\n    \n        GetPlayer().components.builder:GiveAllRecipes() ---------- 全物品直接制造\n        GetPlayer().components.hungerause(true) ---------- 饥饿值不降低\n        GetPlayer().components.sanity:SetMax(500) ---------- 精神值不降低(慎用不可取消 )\n        GetPlayer().components.health:SetMaxHealth(300) ---------- 最大血格\n        GetPlayer().components.health:SetInvincible(true) ---------- 上帝模式\n\n        minimap = TheSim:FindFirstEntityWithTag(\"minimap\")--------------|\n        minimap.MiniMap:ShowArea(0,0,0, 10000)----------- 开全地图，要输入2个指令才行\n        \n        for var x=1,1,10 do DebugSpawn(\"pigman\") end -------------------出现十个猪人\n        \n        \n        \n        \n        \n        \n\n","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2015/05/30/Climbing-Blue-Harm-Network.md","slug":"2015/05/30/climbing-blue-harm-network","body":"\n#爬蓝调口琴网\n>论文写好了就没事干了，本来想去旅游，完蛋流量没了，所以静下心来学学口琴，网上有个蓝调口琴网挺好哒，想写个应用装手机里，先讲讲怎么爬吧。\n\n主要还是用了request模块，然而由于网站用的是GBK编码，还需要iconv-lite、bufferhelper。\n\n    function get(url,callone,calltwo){\n        var req = request(url, {timeout: 10000, pool: false});\n        req.on('error', function(err) {\n            console.log(err);\n        });\n        req.on('response', function(res) {\n            var bufferHelper = new BufferHelper();\n            res.on('data', function (chunk) {\n                bufferHelper.concat(chunk);\n            });\n            res.on('end',function(){\n                var result = iconv.decode(bufferHelper.toBuffer(),'GBK');\n                callone(result,calltwo);\n            });\n        });\n    }\n    \n爬到了网页，用jquery来读里面的东西，用node-jquery就OK了\n\n    var env = require('jsdom').env;\n    env(html,function(err,window){\n        var $ = require('jquery')(window);\n    })\n    \n这个脚本用了特愚蠢的字符串拼json的方法。。。所以趁脚本结束前还得把json封闭了。\n\n    process.on('exit',function(){\n\t   fs.appendFileSync(FILE,'/b]}');\n    })","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2015/08/23/PebbleJS-pebble.md","slug":"2015/08/23/pebblejs-pebble","body":"\n>这个月初，任性买了刚发布的pebble time，一直还没写个应用，这个周末抽出时间看看。\n\n# 开头\n\npebble的应用可以用C和Node开发，开发工具也可以使用[cloudpebble](https://cloudpebble.net/)（墙内用户伤不起）或者下载sdk离线开发。\n\n# 安装SDK\n\nmac安装pebble sdk太简单了\n\n```\nbrew install pebble/pebble-sdk/pebble-sdk\n```\n\n网路顺畅的话，安装就完成了。\n\n# 建立PebbleJS工程\n\n离线建C项目只要运行```pebble new-project xxx```就好，但是js项目需要把github上的项目https://github.com/pebble/pebblejs.git clone下来\n\n```\ngit clone https://github.com/pebble/pebblejs.git\n```\n# 文件目录\n\npebble应用的配置文件在appinfo.json里面，逻辑代码都写在src下的js/app.js里\n\n# UI module\n\n引入ui模块\n\n```\nvar ui = require('ui');\n```\n\n## Window\n\n```\nvar wind = new UI.Window({\n  fullscreen: true,\n});\nwind.show();\n```\n\n效果如图：\n\n<img src=\"https://developer.getpebble.com/assets/images/getting-started/watchface-tutorial/1-blank.png\">\n\n## Card\n\n创建一个卡片\n\n    // Create a Card with title and subtitle\n    var card = new UI.Card({\n        title:'Weather',\n        subtitle:'Fetching...'\n        });\n\n    // Display the Card\n    card.show();\n\n    card.on('click', 'up', function(e) {\n        /*上键事件*/\n        })\n    card.on('click', 'select', function(e) {\n        /* 中键事件*/\n        })\n    card.on('click', 'down', function(e) {\n        /*下键事件*/\n        })\n\n\n效果如图\n\n<img src=\"https://developer.getpebble.com/assets/images/getting-started/pebble-js-tutorial/1-fetching.png\">\n\n>Card还有body和icon属性\n\n## Menu\n\n    var resultsMenu = new UI.Menu({\n        sections: [{\n            title: 'Current Forecast',\n            items: [{\n                title: 'Clear',\n                subtitle: '11-05 21:00'\n                }]\n            }]\n        });\n\n        resultsMenu.on('select', function(e)    {\n            console.log('Selected item #' + e.itemIndex + ' of section #' + e.sectionIndex);\n            console.log('The item is titled \"' + e.item.title + '\"');\n        });\n\n        // Show the Menu\n        resultsMenu.show();\n\n\n<img src=\"https://developer.getpebble.com/assets/images/getting-started/pebble-js-tutorial/2-menu.png\">\n\n# 编译\n\n```\npebble build\n```\n\n#安装\n\n```\npebble install --phone 192.168.1.107//你的手机ip，记得打开pebble的调试模式\n```\n","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2016/02/14/VIM.md","slug":"2016/02/14/vim","body":"\n> 请原谅我又一次跳票了~\n\n# 前言\n\n之前买了一款iwork8的win10平板，起初是为了看代码，后来信心满满地想去刷linux进行开发，然而无情的现实摆在面前，没有驱动啊（无线驱动需要编译->没有有线接口->搞到了有线接口->md也要编译。。。）但是偶不会放弃的！\n\n# Terminal\n\nwin10的CMD太烂了，尝试了minGW，哇好大，作为一个轻度使用的变成平板来说不合适啊，MSYS2在x86上用不了，git for windows不错，但是在v2ex上看到有人推荐babun，正在下载中。。。\n\n# VIM复习\n\n懒得复习了，直接看```vimtutor```吧。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["vim","linux","windows"]}},{"id":"2016/11/09/ArchLinux.md","slug":"2016/11/09/archlinux","body":"\n>---\n>***Fun Fact***\n>---\n>具有550多年历史的天安门城楼，由于兵火战乱，长期失修，建筑结构已严重坏损变形，主体已严重下沉。新中国成立后虽经多次维修加固，但未能彻底解决问题。1969年河北邢台地区发生了6到7.5级强烈地震，使天安门城楼损坏变形更甚。1969年底国务院决定：彻底拆除天安门城楼，在原址、按原规格和原建筑形式重新修建天安门城楼。\n\n# ArchLinux的护眼法宝\n\n目前我手上有两台笔记本，公司的macbook15和自己的xps13。xps13一直是用来做自己的项目的，说实话，xps屏幕相比于mac好太多了，linux搭配上文泉驿微米黑的字体，简直完美，但由于一直没长时间用xps，所以一直没碰到屏幕颜色过于艳丽的伤——刺眼。\n\n![f.lux icon](https://justgetflux.com/flux-icon-sm.png)\n\n在mac上，我用的护眼工具是f.lux，可是很遗憾，下载了linux版之后并没有运行起来。所以我和所有ArchLinux的用户一样，我第一个想到的就是wiki。\n\n# RedShift\n\n        sudo pacman -S redshift\n\n这样redshift就安装上去了，因为我用的是gnome，所以可以把redshift-gtk作为系统服务启动。当然更简单的，可以右键sys-tray选择开机启动。\n\nRedShift的配置文件wiki上有详细介绍，贴一下我从网上翻到的的\n\n```\n; ==============================================================================\n; redshift 配置文件\n; ==============================================================================\n; Create by Arondight <shell_way@foxmail.com>\n; ==============================================================================\n\n[redshift]\n; 白天屏幕温度\ntemp-day=5800\n; 夜晚屏幕温度\ntemp-night=4600\n; 昼夜是否平滑过度(1/0)\ntransition=1\n; 全局屏幕亮度\n;brightness=0.9\n; 昼夜屏幕亮度(version >= 1.8)\nbrightness-day=0.9\nbrightness-night=0.7\n; 屏幕gamma\ngamma=0.9\n; 位置提供方式(redshift -l list)\nlocation-provider=manual\n; 调整工具(redshift -m list)\nadjustment-method=randr\n\n[manual]\n; 位置提供方式设置\n; 经纬度(北京)\nlat=39.90\nlon=116.41\n; 屏幕调整工具设置\n; 第1 块屏幕(0)\n[randr]\nscreen=0\n```\n\n# 关注我\n\n你可以在微信搜索igongbao就可以关注我哦～","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2017/01/09/PyQt.md","slug":"2017/01/09/pyqt","body":"\n前端做得久了，我的工程根目录下面就会多一个bash脚本，把每一个项目的启动脚本放在里面然后注释掉。这样做的好处是如果要启动一个项目的时候只需要运行脚本就好了。\n\n可是问题随之出现了，项目越来越多，然后那个脚本就变成了下面这样。\n\n![脚本库](http://ww4.sinaimg.cn/mw690/89d0a2e1gw1fbkbh1idg9j20gi046q4s.jpg)\n\n因为用的都是fekit，所以各个工程就mock数据不一样。不久我发现一个问题，工作一天，老眼昏花之后，要想在项目之间切换，就是每次要数出第几行，把它解注释，那简直是件恐怖的事情。\n\n于是我便希望有一个图形化的界面，能实时显示我目前处于什么环境，并且能够切环境（因为是触摸屏，所以图形化界面效率很高😏,同时因为我经常在archLinux和Mac下面切换，所以我对跨平台要求很高）。\n\n# 需求\n\n1. 图形化的界面，能够显示现在mock的是哪个项目。\n2. 兼容ArchLinux(Gnome)和OSX。\n3. 开发时间越短越好（根本没时间在工具上下功夫😢）。\n4. 不要影响到我现有的开发习惯（生成的shell脚本格式不能变）。\n\n# 分析\n\n额，好吧，其实electron也行，可是宝宝就是觉得pyQt好久不用了，就是想用用。\n\n# 编写\n\n文件读写\n\n```python\nimport sys\nimport os\nimport re\n\nQMB_FILE_PATH = os.path.split(os.path.realpath(__file__))[0] + '/qmbrun.sh'# 我那个shell脚本叫qmbrun.sh\nRUN_BASH_PREFIX = '#!/bin/bash\\n'\nFEKIT_SERVER = 'fekit server'\nHASH_CHAR = '#'\nPRD_REG = r'.*-m\\s(.*)/.*'\n\ndef readFile():\n    commands = {}\n    file = open(QMB_FILE_PATH)\n    line = file.readline()\n    while line:\n        if line.find(FEKIT_SERVER) > -1:\n            command = line.replace(HASH_CHAR,'')\n            match = re.match(PRD_REG, command)\n            if match: \n                product = match.groups()[0]\n            if product:\n                commands[product] = {\n                    'selected': line.find(HASH_CHAR) < 0,\n                    'command': command\n                }\n        line = file.readline()\n    file.close()\n    return commands\n\ndef writeFile(str):\n    file = open(QMB_FILE_PATH,'w')\n    file.write(RUN_BASH_PREFIX + str)\n    file.close()\n```\n\n对话框\n\n```python\nfrom PyQt5.QtWidgets import *\n\nclass QMBedit(QDialog):\n    def __init__(self, parent = None):\n        super(QMBedit, self).__init__(parent)\n\n        self.btns = []\n        self.commands = readFile()\n        \n        self.setWindowTitle('QMBedit')\n        layout = QVBoxLayout()\n\n        for cmd in self.commands.keys():\n            btn = QRadioButton(cmd)\n            btn.setChecked(self.commands[cmd]['selected'])\n            btn.clicked.connect(self.btn_clicked)\n            self.btns.append(btn)\n            layout.addWidget(btn)\n\n        self.setLayout(layout)\n    \n    def btn_clicked(self): \n        for btn in self.btns:\n            self.commands[btn.text()]['selected'] = btn.isChecked()\n        self.map2str()\n    \n    def map2str(self):\n        str = ''\n        for cmd in self.commands.keys():\n            if self.commands[cmd]['selected']:\n                str += self.commands[cmd]['command']\n            else:\n                str += HASH_CHAR + self.commands[cmd]['command']\n        writeFile(str)\n```\n\n# 运行\n\n![运行结果](http://ww1.sinaimg.cn/mw690/89d0a2e1gw1fbkbh2aju0j205s04xwex.jpg)\n\nOK，用起来不错，拯救了老眼昏花的我。话说本文是本年度第一文啊！其实我挺用心的，写文章的时间远远超过了写这段代码的时间。。。真的😂。\n\nPS：话说emojipedia真的很好用，可以考虑给vcode开发个插件🤔。","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2017/01/17/VScode-Python-python3.6.md","slug":"2017/01/17/vscode-python-python36","body":"\n本来想写一篇pyqt+qml的文章，结果今天打开VScode发现Python不语法提示了。打开开发者模式，发现一直在报错，gramar3.6 not found。\n\n打开```~/.vscode/extensions/donjayamanne.python-0.5.5/pythonFiles/preview/jedi/parser```找到里面的```grammar3.5.txt```复制为```grammar3.6.txt```\n\n重启VScode就好了。","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2017/01/18/PyQt-QML.md","slug":"2017/01/18/pyqt-qml","body":"\n> 翻了翻以前保存的书签，发现了一个pyQt和QML的开发总结，代码跑起来还是有点错误，但是还是比官网的tutorial更简单直观一点。还能从里面找一点hybrid开发的idea（因为QML其实也是一种ECMAScript引擎实现）。\n\n# 在QML上下文插入变量\n\n在```view.setSource```之前将变量插入上下文之中。\n\n```python\nfrom PyQt4.QtDeclarative import QDeclarativeView\nfrom PyQt4.QtGui import QApplication\nfrom PyQt4.QtCore import QUrl\n\napp = QApplication([])\n\nview = QDeclarativeView()\n\nrootCtx = view.rootContext()\nrootCtx.setContextProperty(\"textData\", \"hi\")\n\nview.setSource(QUrl('ctxProp.qml'))\nview.show()\n\napp.exec_()\n```\n\n```qml\nimport Qt 4.7\n\nRectangle {\n    id: test\n\n    width: 1000; height: 300\n\n    Text {\n        \n        anchors.fill: parent;\n        text: textData\n    }\n}\n```\n\n# PyQt修改QML中变量\n\n这样可以先加载qml再修改内部的值，注意```property```后面是有类型的。\n\n```python\nfrom PyQt4.QtDeclarative import QDeclarativeView\nfrom PyQt4.QtGui import QApplication\nfrom PyQt4.QtCore import QUrl\n\napp = QApplication([])\n\nview = QDeclarativeView()\nview.setSource(QUrl('./ownProp.qml'))\n\nrootObj = view.rootObject()\nrootObj.setProperty(\"textData\", 'hi')\n\nview.show()\napp.exec_()\n```\n\n```qml\nimport Qt 4.7\n\nRectangle {\n    width: 1000\n    height: 300\n    id: test\n    \n    property string textData;\n\n    Text {\n        \n        anchors.fill: parent;\n        text: textData;\n    }\n    \n}\n```\n\n# 消息传递\n\nQT最主要的就是它的信号槽机制，对我的影响也很很大，以至于我现在的组件开发也在用这一套思维。那么QT怎么和QML内部进行消息传递呢？\n\n```python\nfrom PyQt4.QtDeclarative import QDeclarativeView\nfrom PyQt4.QtGui import QApplication\nfrom PyQt4.QtCore import QUrl\n\napp = QApplication([])\n\nview = QDeclarativeView()\nview.setSource(QUrl('./signal.qml'))\n\ndef on_click():\n    print(\"hi\")\n\nrootQbj = view.rootObject()\nrootQbj.mclicked.connect(on_click)\nrootQbj.setProperty('name','hello')\nview.show()\napp.exec_()\n```\n\n```qml\nimport Qt 4.7\n\nRectangle {\n    width: 1000\n    height: 300\n    id: test;\n    signal mclicked;\n    property string name;\n    \n\n    Text {\n        anchors.fill: parent;\n        text: name\n    }\n\n    MouseArea {        \n        anchors.fill: parent\n\n        onClicked: {\n            mclicked();\n        }\n    }\n    \n}\n\n```\n\n# 调用QML内部函数\n\n```python\nfrom PyQt4.QtDeclarative import QDeclarativeView\nfrom PyQt4.QtGui import QApplication\nfrom PyQt4.QtCore import QUrl\n\napp = QApplication([])\n\nview = QDeclarativeView()\nview.setSource(QUrl('./interface.qml'))\n\ndef on_click():\n    rootObject.set_text('Clicked')\n\nrootObject = view.rootObject()\nrootObject.mclicked.connect(on_click)\n\nview.show()\napp.exec_()\n```\n\n```qml\nimport Qt 4.7\n\nRectangle {\n    width: 1000\n    height: 300\n    color: \"transparent\"\n    id: test\n    signal mclicked\n    Text {\n        id: testText\n        \n        anchors.fill: parent\n        \n        text: \"Click Me\"\n    }\n    MouseArea {\n        anchors.fill: parent\n        onClicked: {\n            mclicked();\n        }\n    }\n    function set_text(text) {\n        testText.text = text\n    }   \n}\n```\n\n就酱，后面再写一篇QML调用js的文章吧🤔。","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2017/02/03/node-302.md","slug":"2017/02/03/node-302","body":"\n```javascript\nvar http = require(\"http\");\n\nvar server = http.createServer(function(req, res) {\n    var clientIP = req.headers['x-forwarded-for'] ||\n                   req.connection.remoteAddress ||\n                   req.socket.remoteAddress ||\n                   req.connection.socket.remoteAddress,\n        ServerDate = new Date();\n    console.log('['+ ServerDate +']' + clientIP);\n    res.writeHead( 302, { 'Location': 'http://www.baidu.com/' });\n    res.end();\n});\n\nserver.listen(80);\n```\n\n然后将脚本作为守护进程启动\n\n```bash\nnohup node app.js > app.log &\n```","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2017/02/10/AP.md","slug":"2017/02/10/ap","body":"","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2017/05/14/nas.md","slug":"2017/05/14/nas","body":"\n# 树莓派搭建 NAS\n\n好忙啊，写个大纲好了\n\n## 安装 RPI-Monitor\n\n## 安装吸血迅雷\n\n## Samba 共享文件\n\n## ssh 端口映射\n","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2017/05/28/Second-screen.md","slug":"2017/05/28/second-screen","body":"# 第二块屏幕\n\n作为一个前端程序员，13寸的屏幕显然不够工作，尤其是当你写代码的时候还想看美剧的时候。\n\n我有一个屏幕，15寸的联想800x600 VGA屏幕，以前为了玩树莓派在旧货市场淘来的，分辨率实在太低了。如果连我家的投影的话，为了使用自由，我只会使用无线连接，但是linux下面还没有一个完备的无线连接方案。\n\n## 拆掉我的旧电脑\n\n年前我提到过，我把我的老电脑拆了，硬盘用来接树莓派，当然我也把屏幕拆过来了。我在淘宝上搜了一下五合一屏幕驱动板，加上电源大概100块搞定，卖家比较热心，问好型号之后整块驱动板基本上是连接好就寄过来了。\n\n## 做一个比较好的壳\n\n基本上只能拿垃圾做一个壳了，在北京的家里面，没有螺丝，所以我只能把驱动板缝在巧克力盒包装上。大概如图（如果我传图了）。\n\n## linux处理第二块屏幕\n\n其实连接好屏幕就可以玩了，但是由于我的笔记本是4K的，老屏幕虽然是14寸，但其实只能显示我现在笔记本的1/4.需要xrandr处理缩放。\n\n    xrandr --output eDP1 --auto --scale 1x1 --output DP1 --auto --scale 1.8x1.8 --right-of eDP1\n\n> 为什么不是 2x2 ? 其实我尝试过，可是很快就能挂掉，所以我改成 1.8x1.8 \n\n还有一个bug，屏幕虽然能够显示了，但鼠标能够控制的地方还是1/4。ArchWiki里面说是一个bug，看了一下。貌似还没解决。。。\n\n好吧，最后我选择了妥协，毕竟已经可以美美哒地看美剧了～\n\n---\n\n<p style=\"float:right;\">\n宫不上，2017/05/28【端午节】，在北京9㎡的家中。\n</p>\n","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2017/05/30/sad-WPS4linux.md","slug":"2017/05/30/sad-wps4linux","body":"# sad,WPS4Linux停止开发\n\n默哀三分钟","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2017/06/03/sinopia-NPM.md","slug":"2017/06/03/sinopia-npm","body":"# sinopia搭建你的私人NPM\n\n今天本来想边刷CodeWars边看《纸牌屋》的，显然两件烧脑的事情还是不要放到一起做比较好。\n\n简评一下《纸牌屋》第五季，编剧能写五季不错了，赶紧完结吧，剧情开始走下坡路咯。\n\n## 进入正题\n\n为什么要搭建私人NPM？我靠，这还用问。。。（你自己猜吧）\n\n    npm install -g sinopia\n\n安装好sinopia之后，执行sinopia就好了，默认端口4873，只能本地访问。\n\n## 配置\n\n往往我会新建一个用户\n\n    useradd -G users sinopia -d\n\n然后用户这个用户执行sinopia，sinopia执行的根目录需要三个文件，config.yaml，storage，htpasswd\n\n只配置config.yaml就好了，示例在https://github.com/rlidwka/sinopia/tree/master/conf\n\n## 执行\n\n用PM2执行，默认sinopia会在执行目录寻找config。本地访问成功后大工造成。\n\n***注意***\n\n1. 因为我用的是Linux，自从安装了node8+npm5之后，可能涉及到Darwin的包会报警，不过忽略就好。\n\n2. 注册的时候报错crypt3找不到，貌似安装的时候gyp出错被忽略掉了，我到sinopia目录里重装了crypt3解决。","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2017/07/14/egg-ts.md","slug":"2017/07/14/egg-ts","body":"# 起因\n\n今年我开始在生产环境里试用node（貌似比很多人慢了一年......）。\n由于公司node环境较低，我只能使用一款修改过的express，\n为了解决兼容问题我还用typescript进行编译（事实证明typescript简直awesome）。\n\n随着公司更新了新版的node（也不高，6.1.2）。我也有了更多选择，\n有一天我在cnode上面看到了egg的发布，打算自己试一下。\n\n## 废话少说，从快速入门开始\n\negg有一个详细的快速入门[https://eggjs.org/zh-cn/intro/quickstart.html]()，\n但是时间紧张，我直接用脚手架建项目了。\n\n    egg-init egg-example --type=simple\n\n## 目录结构\n\n我曾一度认为一个较好的框架其实不需要什么目录结构，自打我和其他人合作之后我就彻底打消这个念头了。\n\n```shell\negg-project\n├── tsconfig.json\n├── package.json\n├── app.js (可选)\n├── agent.js (可选)\n├── ts\n|   ├── router.ts\n│   ├── controller\n│   |   └── home.ts\n│   ├── service (可选)\n│   |   └── user.ts\n│   ├── middleware (可选)\n│   |   └── response_time.ts\n│   ├── schedule (可选)\n│   |   └── my_task.ts\n│   ├── public (可选)\n│   |   └── reset.css\n│   └── extend (可选)\n│       ├── helper.ts (可选)\n│       ├── request.ts (可选)\n│       ├── response.ts (可选)\n│       ├── context.ts (可选)\n│       ├── application.ts (可选)\n│       └── agent.ts (可选)\n├── config\n|   ├── plugin.js\n|   ├── config.default.js\n│   ├── config.prod.js\n|   ├── config.test.js (可选)\n|   ├── config.local.js (可选)\n|   └── config.unittest.js (可选)\n└── test\n    ├── middleware\n    |   └── response_time.test.js\n    └── controller\n        └── home.test.js\n```\n\n删了项目里的app文件夹，并把app文件夹加到.gitignore里面。\n修改tsconfig.json，css可以用别的工具解决，不在本次话题里面。\n\n```json\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2016\",\n    \"module\": \"commonjs\",\n    \"outDir\": \"./app\",\n    \"rootDir\": \"./src\"\n  }\n}\n```\n\n另外，我把view文件夹给删掉了，理由是我一直比较推崇前后端同构，所以既然有view层，前后端的模板应该一致，\n目前前端忙于组件化，基于vue和jsx的模板语言也很多（虽然性能不高，但可预见性能问题会很快解决），所以本文暂时不谈view。\n\n## OK，可以愉快地写代码了\n\n因为官网没有TS的相关文档，这里记录一下。\n\n### 新建一个Controller\n\n    // src/controller/home.ts\n    import { Controller } from \"egg\";\n    import { prefix, suffix } from \"../frags\";\n\n    export default class HomeController extends Controller {\n        async index() {\n            this.ctx.body = `${prefix}<h1>Hello World</h1>${suffix}`;\n        }\n    }\n\n### Router的引用\n\n    import { Application } from \"egg\";\n\n    export default (app: Application) => {\n        app.get('/', \"home.index\");\n    }\n\n## 结论\n\negg其实不错，能换自然是最好了。但是不换的话，如果项目已经跑起来了，\n说明egg该趟的坑都被你自己趟过了，而且已经用了typescript，async和await自然都用上了，\n所以（在我看来）generator就没更多优势了。\n\n但是如果你还没用上typescript...真的，动态一时爽，重构火葬场啊。\n\n以上。","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2017/10/17/linux-swap.md","slug":"2017/10/17/linux-swap","body":"# 给 linux 增加 swap 文件\n\n> 上周末，自己写的公司的服务挂了，心疼自己几分钟。。。\n\n事发之后看了眼服务器，好多配置被当白鼠了，比如机器都没有 SWAP，\n以前都是装机器的时候习惯性分配 SWAP，还没有现挂载的经验，在此记录一下。\n\n1. 创建分页文件（3GB）\n\n        dd if=/dev/zero of=/opt/swapfile bs=1M count=3000\n\n2. 格式化为 SWAP 分区\n\n        mkswap /opt/swapfile \n\n3. 挂载分区\n\n        swapon /opt/swapfile\n\n4. 保证以后重启后自动挂载（在 /etc/fstab 增加信息）\n\n         /opt/swapfile    swap   swap defaults 0 0\n\n5. 重新挂载\n\n        mount -a\n\n> 关于执行 free -m 的提示\n\n内存中的 buffered 和 cached 分别表示可以用来 写入/写出 磁盘的内存","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2017/11/26/QA-node.md","slug":"2017/11/26/qa-node","body":"# 给 QA 同学看的 node 科普\n\n## 目录\n\n* 什么是 Node.js\n* 什么是 NPM\n* 什么是 QXF\n* 什么是 webpack\n* 什么是 postcss\n* 什么是 sass\n* 什么是 babel\n* 什么是 TypeScript\n* node时代下的前端发布流程\n* 单元测试\n* 端对端测试\n\n## 什么是 Node.js\n\n![](http://click-labs.com/wp-content/uploads/2014/05/nodejs_logo_green.jpg)\n\nNode.js 是一个开源的跨平台 javascript 运行时. \n初期是由 Ryan Dahl 在 2009 年设计开发.\n\n设计 Node.js 的灵感来自于一套向 Flicker 上传进度条的实现. \n\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/b/b2/Ryan_Dahl.jpg/440px-Ryan_Dahl.jpg)\n\n## Node.js 的技术细节\n\n* 基于谷歌 Chrome 的 V8 JavaScript 即时编译器\n* 单线程无阻塞 I/O\n* 基于 CommonJS 的模块机制\n* 一元化的 API\n* 事件轮询\n\n### 单线程无阻塞 I/O\n\nWeb 请求,对于即时性要求并不高,\n服务器需要处理一堆的异步事件,\n照以往的逻辑,\n我们会通过新建线程来处理这套逻辑,\n而这种方式往往是浪费资源的.\n\n在 Node.js 里面程序是单线程的,\n每一个异步事件通过事件轮询的方式解决.\n代码被要求以回调形式编写.\n\n```javascript\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello World\\n');\n});\n\nserver.listen(port, hostname, () => {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});\n```\n\n### CommonJS\n\n因为 JavaScript 的模块标准是在 2016 年才被定义的,\n所以 Node.js 使用的是另外一套模块机制 CommonJS.\n\nCommonJS 包括 require 函数和 module 对象.\n\n```javascript\nvar a = require(\"path/to/a.js\");\nmodule.exports = {...};\n```\n\n### 一元化的API\n\n使用 JavaScript 做服务器语言的框架其实很多,\n但是 Nodejs 最吸引人的一点就是一元化API.\n\n比如日志API:\n\n```javascript\nvar a = \"浏览器下打印日志\";\nconsole.log(a);\n```\n\n```JavaScript\nvar a = \".Net下打印日志\";\nprint(a);\n```\n\n```JavaScript\nvar a = \"Node.js下打印日志\";\nconsole.log(a);\n```\n\n### 事件轮询\n\n事件轮询是计算机系统的一种机制,\nJavaScript 用的是这种机制来解决单线程运行带来的问题.\n\n![](http://image.beekka.com/blog/201310/2013102001.png)\n\n## Node.js 小结\n\n![](https://img3.doubanio.com/lpic/s27269296.jpg)\n\n## 什么是 NPM\n\n![](http://playnode.io/2012/img/profile/aa.jpg)\n\nNPM 是 2010年由 Isaac Z. Schlueter 开发,\n用于 JavaScript 的模块管理.\n\nNPM 包括一个命令行的前端和一个远端资源库默认是 https://registry.npmjs.org/\n\nnpmjs.org 默认免费, 但是提交者的代码必须面向全网使用,\n也可以购买私有源, 私有模块往往如\n\n```shell\n@xxx/name\n```\n\n由于 NPM 本身开源,\n所以也有很多公司为了省钱单独搭建资源库,\n并定期和NPM同步.\n\n### NPM 在客户端的用途\n\n#### 本地安装 NPM 代码包\n\n```shell\nnpm install <package_name><?:@version>\n```\n\n执行以上代码之后,\n本地文件夹下会增加一个 node_modules 文件夹,\n里面放的是新安装的 NPM 代码包.\n\n代码包会首先按照指定的 version 安装,\n其次会按照本地 npm-shrinkwrap.json 安装,\n再次会按照本地 package.json 按装,\n最后会安装最新版.\n\n#### pacakge.json\n\n```\nnpm init\n```\n\n每一个 NPM 模块必须有一个 package.json,\n一下简单介绍几个重要字段.\n\n* name　代码包的名字\n* version 代码版本\n* main 包的入口文件\n* scripts 自定义命令\n* dependencies 本包需要安装的依赖包\n* devDependencies 本包开发时需要安装的依赖包\n\n#### npm-shrinkwrap.json\n\npackage.json 里面只记录了依赖包的版本信息,\n会导致多端执行 npm install 之后生成的 node_modules 不一致.\n\n```shell\nnpm shrinkwrap\n```\n\n执行上述命令, 本地根目录会新建 npm-shrinkwrap.json,\n文件会记录本地安装的每一个依赖包的确切版本信息以及资源库地址.\n\n#### run-script\n\npackage.json 里面的 script 字段是可以写 shell 命令的.\n\n```javascript\n{\n    \"script\": {\n        \"test\": \"node test.js\",\n        \"dev\": \"NODE_ENV=dev && node index.js\",\n        \"prd\": \"NODE_ENV=prd && node index.js\",\n        \"hello\": \"echo \\\"hello\\\"\"\n    }\n}\n```\n\n执行命令也很简单\n\n```shell\nnpm run test\n```\n\n## 什么是 Express\n\n![](http://img.kuqin.com/upimg/allimg/140806/2330395116-1.jpg)\n\nExpress 是 TJ Holowaychuk 于 2009年开发的, 基于 Node.js 平台，快速、开放、极简的 web 开发框架。\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/', function (req, res) {\n  res.send('Hello World!');\n});\n\nvar server = app.listen(3000, function () {\n  var host = server.address().address;\n  var port = server.address().port;\n\n  console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n\n### Connect 中间件\n\nConnect是一个node中间件（middleware）框架。如果把一个http处理过程比作是污水处理，中间件就像是一层层的过滤网。每个中间件在http处理过程中通过改写request或（和）response的数据、状态，实现了特定的功能。\n\n```javascript\napp.use(middleware);\n```\n\n### 路由器\n\nExpress 路由器在我看来算是一种特殊的中间件,\n只不过路由结束之后整个请求就结束了.\n\n```javascript\napp.use('/calendar', router);\n```\n\n### QXF\n\nQXF 是去哪儿基于 Express 修改的 web 框架,\n在 Express 的基础上增加了面向去哪儿内部的监控等服务SDK.\n\n## 什么是 webpack\n\nwebpack 是一个模块的打包工具, 支持打包 CommonJs, AMD, ES6 modules, CSS, Images, JSON, Coffeescript, LESS, ...\n\n### 什么是 FEkit\n\nFEkit 是去哪儿之前一直使用的前端打包工具,能够打包 CSS 和 CommonJS, 现在已经不进行维护.\n\n### 什么是 ykit\n\nykit 基于 webpack, 是去哪儿目前大部分使用的打包工具.\n\n## 什么是 postcss\n\npostcss 是一个类似于 node-sass 的预编译期器,\n只不过编译的是 CSS. 它可以把更高级的 CSS 代码进行降级处理以适配兼容更古老的浏览器.\n\n## 什么是 SASS\n\nSASS 是 CSS 的扩展语言,\nnode-sass 是 SASS 的编译器,\nSASS 编译之后会生成 CSS.\n\n由于去哪儿内部大量使用的 Yo 框架基于 SASS,\n所以 node-sass 编译是一个必选项.\n\n## 什么是 babel\n\nbabel 可以对更高级的 JavaScript 代码进行降级处理,\n以适配兼容更古老的浏览器.\n\n## 什么是 TypeScript\n\nTypeScript 是对 JavaScript 的功能扩展之后的语言,\n增加了类型检查和代码编译以适应更复杂的开发需求.\n它编译后生成代码是 JavaScript.\n\n## node时代下的前端发布流程\n\n### 代码检查\n\n检查JS,TS,SASS,CSS...等文件是否有语法错误\n\n### 资源分拣\n\n* 分离前后端JS\n* 分离CSS\n* 分离大图片\n* 小图片 base64 编码\n\n### 编译检查\n\n* 编译 TypeScript\n* 编译 SASS\n\n### 向下编译\n\n* babel 向下兼容处理\n* postcss 向下兼容处理\n\n### 打包\n\n分别打包前后端代码\n\n### 客户端代码混淆压缩\n\n* JS 使用 Uglify 混淆\n* CSS 使用 cssnano 混淆\n\n### 客户端代码上传 CDN\n\n### Node 代码上传服务器\n\n### 重启服务\n\n## 单元测试\n\nJavaScript 目前已经有多套单元测试框架,\n如 Jest, Jasmine, Tape, AVA...\n\n```javascript\nconst sum = require('./sum');\n\ntest('adds 1 + 2 to equal 3', () => {\n  expect(sum(1, 2)).toBe(3);\n});\n```\n\n## 端对端测试\n\nsuperagent 可以对 http 请求进行断言处理.\n\n```javascript\nconst request = require('supertest');\nconst express = require('express');\n\nconst app = express();\n\napp.get('/user', function(req, res) {\n  res.status(200).json({ name: 'tobi' });\n});\n\nrequest(app)\n  .get('/user')\n  .expect('Content-Type', /json/)\n  .expect('Content-Length', '15')\n  .expect(200)\n  .end(function(err, res) {\n    if (err) throw err;\n  });\n```","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2017/12/08/ArchLinux.md","slug":"2017/12/08/archlinux","body":"# 树莓派+ArchLinux\n\n大概是今年五月份吧,我的树莓派2又一次吃灰了,\n之前用来当AP, 可是 Tenda U1 的驱动(RTL8192EU)需要配合新内核编译,\n毫无意外的编译失败了, 反正也不想折腾了, 就让它吃灰了.\n\n最近收拾东西, 发现了在吃灰的树莓派, 想想干脆拿出来刷上 Arch,\n就当 rust 的编译环境吧.\n\nwlan就用水星的吧, 起码不用编译驱动了.\n\n安装方法很简单, 照这个链接做就好\n\nhttps://github.com/phortx/Raspberry-Pi-Setup-Guide\n\nArchLinuxARM 不是像 Raspbian 那样烧录的,\n所以要下载好 tar 包, 解压到 SD 卡里.\n\n个人经验, 因为国内读卡器真的不咋地,\n最好先解压到本地在复制过去.\n\n另外 aliyun 没有 ArchLinuxARM 的源,\n但是可以使用清华的源.\n\n安装完 ohmyzsh 之后,\n切换 ssh 默认为 zsh\n\nchsh -s /usr/bin/zsh\n\n然后修改 .zsh 主题(因为我本地也是zsh),\n选择 avit 也行\n\n![](https://cloud.githubusercontent.com/assets/2618447/6316718/51a2fd9a-ba00-11e4-845a-24bed6ae9210.png)\n","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2017/12/23/P2P.md","slug":"2017/12/23/p2p","body":"# P2P实现不死网络","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2017/12/26/Mac-20264.md","slug":"2017/12/26/mac-20264","body":"# 解决 MacOS 安装绿联20264网线适配器驱动失败的问题\n\n公司里面配的 Mac 网线适配器快要断了, 我赶紧去狗东定了一个绿联的.\n谁成想, 插上机器没有反应, 翻了说明文档是要安装驱动的,\n到官网下载驱动, 安装成功. 重启后还是没反应...\n\n我插到 linux 机器上面, 没问题, 急忙搜了一下,\n原来是苹果 SIP 机制把第三方驱动拦截了.\n\n[苹果SIP机制](http://www.freebuf.com/articles/system/97411.html)\n\n## 解决方案\n\n1. 重启, 一直按 cmd + R 进入 recovery\n\n+. 执行命令 csrutil disable\n\n+. 重启, 重新安装驱动","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2018/01/04/win10.md","slug":"2018/01/04/win10","body":"\n# win10 家庭版打开组策略\n\n无非是把 pro 版的组策略安装进来就好了\n\n```batch\npushd \"%~dp0\"\ndir /b C:\\Windows\\servicing\\Packages\\Microsoft-Windows-GroupPolicy-ClientExtensions-Package~3*.mum >List.txt\ndir /b C:\\Windows\\servicing\\Packages\\Microsoft-Windows-GroupPolicy-ClientTools-Package~3*.mum >>List.txt\nfor /f %%i in ('findstr /i . List.txt 2^>nul') do dism /online /norestart /add-package:\"C:\\Windows\\servicing\\Packages\\%%i\"\n\n作者：知乎用户\n链接：https://www.zhihu.com/question/53834660/answer/158108562\n来源：知乎\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n```\n","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2018/01/11/anko.md","slug":"2018/01/11/anko","body":"\n# 使用 anko 布局安卓应用\n\n## build.gradle 配置\n\n如[wiki](https://github.com/Kotlin/anko)修改两处\n\n```groovy\n// app(Module)\ndependencies {\n    implementation \"org.jetbrains.anko:anko:$anko_version\"\n    implementation \"org.jetbrains.anko:anko:$anko_version\"\n    implementation \"org.jetbrains.anko:anko-commons:$anko_version\"\n    implementation \"org.jetbrains.anko:anko-appcompat-v7:$anko_version\"\n    implementation \"org.jetbrains.anko:anko-recyclerview-v7:${anko_version}\"\n\n}\n```\n\n```groovy\n// app(Project)\nbuildscript {\n    ext.kotlin_version = '1.2.10'\n}\n```\n\n## 使用 ConstraintLayout\n\n修改 build\n\nhttps://github.com/AckeeCZ/anko-constraint-layout\n\n```groovy\ndependencies {\n    implementation 'com.android.support.constraint:constraint-layout:1.1.0-beta4'\n    implementation 'cz.ackee:anko-constraint-layout:0.6.5'\n}\n```\n\n## 如何使用\n\n```kotlin\nclass MainActivity: AppCompatActivity() {\n    override fun onCreate(savedInstanceState bundle?) {\n        super.onCreate(bundle)\n\n        verticalLayout {\n            val name = editText()\n            button(\"sayHello\") {\n                onClick { ctx.toast(\"Hello, ${name.text}\") }\n            }\n        }\n    }\n}\n```\n\n## 缺点\n\nanko 里面除了简单的布局有 DSL 其它的需要去找(毕竟不是官方的)用起来还真不是特别方便\n","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2018/02/27/Git.md","slug":"2018/02/27/git","body":"# Git保存账户\n\n用 Git 保存账户名和密码\n\n```shell\ngit config credential.help store\n```\n","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2018/04/17/DevTools-Node.md","slug":"2018/04/17/devtools-node","body":"# DevTools 调试 Node 项目\n\n## 使用 DevTools\n\n```shell\nnode --inspect-brk index.js\n```\n\n要求 node 版本 8 以上，打开 chrome://inspect 之后可以点开 debugger 了， 默认断点是点开的（因为指定了brk）\n\n## 使用 0x 生成火焰图\n\n```shell\n0x index.js\n```\n\n生成的火焰图\n\ny轴表示调用栈位置，在上面表示正在执行，x表示抽样数，大致可以理解为时间。\n\n## 参考\n\n[How do I debug Node.js applications?](https://stackoverflow.com/questions/1911015/how-do-i-debug-node-js-applications/16512303#16512303)\n\n[如何读懂火焰图？](http://www.ruanyifeng.com/blog/2017/09/flame-graph.html)\n","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2018/05/26/blender.md","slug":"2018/05/26/blender","body":"# Blender 复习之快捷键\n\nlinux下面使用blender必须搭配鼠标，因为拖动需要鼠标中键，模拟的快捷键是alt+鼠标左键，笔记本上必须要关掉alt快捷键（臣妾不想做）。\n\n移动元素是鼠标右键，另外需要打开模拟小键盘（file-preference-input）才能快速切换试图。\n\n## 菜单\n\nshift-a\n\n## 学习视频\n\nhttps://www.blenderguru.com/tutorials/blender-beginner-tutorial-series\n","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2018/06/03/linuxMint.md","slug":"2018/06/03/linuxmint","body":"# LinuxMint 修改移动窗口快捷键\n\nAlt 在 blender 中很重要，所以要修改 LinuxMint 的 keyBinding\n\n打开 DConfig，点击 org > cinnamon > desktop > wm > preferences， 修改  mouse-button-modifier 中 <Alt> 为 <Super>","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2018/06/14/jupyter.md","slug":"2018/06/14/jupyter","body":"\n# Jupyter 的使用\n\n## 配置 Docker\n\n安装很容易，记住每次使用 docker 的时候要启动 deamon 服务，其实不建议默认打开，因为 docker 会常驻 8888 端口，这样 charles 就不好抓包了。\n\n还需要把本地用户加到 docker 组里\n\n```shell\ngpasswd -a $USER docker\n```\n\n加速服务可以用阿里云的，相关帮助已经很清楚了。\n\n## 安装并运行 jupyter\n\n```shell\n\n    docker pull jupyter/base-notebook\n\n    docker run -P jupyter/base-notebook\n\n```\n\n运行 Docker run 之后会有一大堆 http://xxxx:8888/?token=xxxx 的日志。\n\n执行`docker ps`查看哪个端口被映射了，替换地址为 localhost:【端口】即可。\n\n## 使用 jupyter\n\n直接新建 python3 文件，可以直接运行代码了，使用`Ctrl+Enter`组合执行代码。\n\n- `a`插入行\n- `b`在行后插入\n- `x`删除行\n\n## 安装 tensorflow\n\n哈哈官方版本有[tensorflow-notebook](https://hub.docker.com/r/jupyter/tensorflow-notebook/)\n\n这样就可以直接学习 tensorFlow 啦\n","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2018/06/24/redbird.md","slug":"2018/06/24/redbird","body":"\n# 用 [redbird](https://github.com/OptimalBits/redbird) 代替 nginx \n\n我的网站都是拿 nginx 做反向代理，但是 ng 反向代理很麻烦， 而 redbird 是个不错的替代，里面的人哥哥牛逼，语法又好听，非常推荐。","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2018/06/28/The-current-cloud-service-available.md","slug":"2018/06/28/the-current-cloud-service-available","body":"# 目前可用的云服务\n\n今天收到邮件，原因是我的域名没备案。。。\n\n汗，不是故意不备案的，主要还是懒（囧）。既然国内不备案不能用那么就试试看有什么云服务（其实照以前第一反应就该是云服务，可惜现在有钱买机器了，反倒迟钝了）。\n\n## Heroku\n\n之前听说被墙了，没想到还能用，安装heroku-cli就能用了很方便。\n\n## Leancloud\n\n国内的heroku，文档都是中文的，基本上还能当firebase使唤。","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2018/08/17/GitHub-1Password.md","slug":"2018/08/17/github-1password","body":"# GitHub 打开二次 1Password 认证\n\n这个安卓没有这功能，但是 mac 和 windows 都可以。\n\n* 在 Github 的 Security 选项，打开 2 Factor authentication\n\n* 保存下一步的还原码\n\n* 点开 1Password 的 Github 项目，点击编辑，找到 label，点击右面的三个点，选择 \"one-time password\"\n\n* 用三个点旁边的二维码扫描器扫描 Github 页面上的二维码。\n\n然后你就发现你的代码不能再 commandline push 了。。。\n\n* 参照 https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/ 新建一个 token， 以后用这个token作为密码即可。\n","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2018/08/31/MagicaVoxel.md","slug":"2018/08/31/magicavoxel","body":"# MagicaVoxel 使用笔记\n\n没时间写了，上链接好了\n\nhttps://zhuanlan.zhihu.com/p/29884021\n\nhttps://zhuanlan.zhihu.com/p/23164903","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2018/10/05/anker.md","slug":"2018/10/05/anker","body":"\n# 安利一下 anker 的随身投影\n\n其实是个音响，外带投影的功能，投影是 1080p 的，那就比市面上很多投影好得多，噪音低，音效好，重点是它小啊，真的，就可乐罐难么大，而且是 anker 的，质量肯定不错。\n","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2018/10/18/Algolia.md","slug":"2018/10/18/algolia","body":"# 关于调用Algolia","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2019/01/09/curl-k.md","slug":"2019/01/09/curl-k","body":"# curl有一个k参数是可以不校验证书的！\n\n可能是我后知后觉了，curl -k 可以忽略证书认证\n\n> -k, --insecure\n(SSL) This option explicitly allows curl to  perform  \"insecure\"\nSSL connections and transfers. All SSL connections are attempted\nto be made secure by using the CA certificate  bundle  installed\nby  default.  This  makes  all connections considered \"insecure\"\nfail unless -k, --insecure is used.\nSee this online resource for further details:\n http://curl.haxx.se/docs/sslcerts.html\n","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2019/01/11/outline.md","slug":"2019/01/11/outline","body":"# 解析outline协议\n\n今天是小三节，祝各位小三都能打倒原配，走上人生巅峰（误）。\n\n谷歌的Outline，如何在linux下面使用呢？\n\nOutline是基于ShadowSocket的，协议是```ss://<base64>@<server>:<port>```所以如果你用的是安卓的客户端，直接把协议转成二维码，用ShadowSocks就能扫码使用了。\n\n上面已经能看出来```server```和```server_port```了，那么一个shadowsocks的配置文件，还差```password```和```method```，解译base64部分，便可以得出```<method>:<password>```。\n","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2019/01/12/Wanderer.md","slug":"2019/01/12/wanderer","body":"\n# 流浪地球\n\n马上流浪地球就要上映了，反正也是篇中篇小说我大致看一下好了。\n\n故事大概说的是太阳即将变成矮星，人类打算搬离太阳系，但是无法创造一个完全的类地生态系统，所以干脆让地球达到逃逸速度逃离太阳的故事。\n\n科幻故事嘛，总会有瑕疵，详情参考知乎[流浪地球：行星发动机理论可行吗？](https://zhuanlan.zhihu.com/p/51496504)。\n\n整个故事还算合情合理的，起码当我拿它当睡前故事看，晚上睡觉还真梦到地球爆炸了。。。\n","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2019/01/19/windows.md","slug":"2019/01/19/windows","body":"\r\n# Using Windows to develop\r\n\r\nLast year, I started thingking to switch into Windows rapidly. Back to the years I decided to use Linux. Mostly because I want a faster working environment, the old Vista required more memories and CPU usages that I could't afford. Even in Windows8, gnome-shell run much more fluent.\r\n\r\n## Cons in Linux desktops \r\n\r\nSo, why do I want to switch?\r\n\r\nWell, games are not the problem, I quiet like to play supertuxkart, actually.\r\n\r\nHDPI is a hard chalenge, especially on a touch screen. I admire the effort that the Open Source world took, but it's still not good enough.\r\n\r\nInput bar is an important tool for Chinese users. The latest version of GTK-Chromiumn has a bug, that the input bar cannot get the correct place where the input box is (I was using fcitx). However, if you refer to the old commit of this package, you would see it had been fixed in an earlier version, maybe the bug appeared after some UI refactors.\r\n\r\nthe Input bar problem seems a nofix. gladlly you can use KDE desktop. The great advance of Linux, is the mass amount of desktops. I tried a lot desktops in ArchLinux, KDE, gnome, mint (a fork of gnome) and budgie (another fork of gnome), they all have pretty good support for HIDPI.\r\n\r\nWireless screen sharing, I have a projector. share the screen of my phone to the walls makes me comfortable, but I can't share screen in Linux. Intel holds the driver for screen sharing, and it's not open source.\r\n\r\nBIOS update, dell updates BIOS some time, it makes my laptop more stable. But I can only update it in Windows.","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2019/02/20/AWS SQS.md","slug":"2019/02/20/aws-sqs","body":"# AWS SQS 相关状态说明\n\n+ Message Available:  SQS 客户端可以获取到的消息, 即 Visible Messages\n\n+ Messages in Flight: 消息被 SQS 收取了之后，由 Available 转为 In Flight, 该状态的消息不能被客户端接收到\n\n+ Visibility Timeout:  消息停留在 In Flight 状态的时间, 如果在 Timeout 之前未删除这个消息，该消息重新变为 Available 状态\n\n所以在Visibility Timeout时间内，同一条消息是不会被多个客户消费的，适当延长Visibility Timeout可避免单条消息被重复处理。","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2019/02/25/javascript - unsigned int.md","slug":"2019/02/25/javascript---unsigned-int","body":"# JavaScript 获取 Unsigned Int\n\nJavaScript 默认是64位有符号的整型，可以利用移位符号解决，但不是>>2而是>>>0\n\n```javascript\nconst a = 4136517969;\nconst b = a >> 2;\n/* b == -39612332 */\n```\n\n```javascript\nconst a = 4136517969;\nconst b = a >>> 0;\n/* b == 4136517969 */\n```\n\n>最好不要使用 >> ，推荐使用 >>> 因为最左边一位会被解析成符号位，当数字溢出时，会被解析成负数。\n\n当然按照这种方式eslint的默认配置是不允许的，所以可以借助 Unit32Array.\n\n```javascript\nconst a = 4136517969;\nconst b = new Uint32Array([a])[0];\n/* b == 4136517969 */\n```","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2019/04/27/Windows.md","slug":"2019/04/27/windows","body":"# 为什么文泉驿微米黑在windows上面那么难看\r\n\r\n之前我吐槽过大部分win32应用使用的都是segeUI字体，对中文的fallback是宋体，并不是吐槽宋体不好看，不知道多少Mac用户曾经吐槽过自己没有宋体，可是宋体在屏幕里的显示真心不好，很多字只能看到收锋而看不清笔画。\r\n\r\n好在有NoMeiryoUI的存在，可以把字体都换成微软雅黑，可视微软雅黑并不好看，也许是我本身弱视的缘故，微软雅黑每个汉字的结构体类似导致我不仔细看基本上看不清楚。相比之下，我就怀念起来在linux下面很常用的文泉驿微米黑。\r\n\r\n其实文泉驿微米黑也有很多缺点，比如同字号的微软雅黑就比文泉驿微米黑大，但是因为字形不像微软雅黑那么工整，反倒有利于我阅读。而且因为沿用Droid font风格，字体看起来又有一些俏皮。\r\n\r\n可是在windows上面用起来却出现了些问题，有部分笔画竟然有粗有细，在linux和mac上面的表现完全不同。查了资料，我在之乎上面找到了答案（原谅我没有贴链接，在火车上呢）。Windows为了解决老显示器分辨率的问题，在中文字体上面做了处理，比如在结构密集的字上细化它的笔画，甚至是减少笔画，这样在低分辨率上这些字不至于糊到一块，可这样就苦了高分屏幕的同志了。Mac就没有这个问题，因为人家字体刚用上的时候就是高分屏的时代了。\r\n\r\n其实这个容错处理在字体中可以设置，比如微软雅黑就有这个功能，可惜文泉驿还需要等。","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2019/07/24/iwork8.md","slug":"2019/07/24/iwork8","body":"# 如何魔改你的iwork8\r\n\r\n![改造图](https://ws1.sinaimg.cn/mw690/89d0a2e1gy1g9joycabslj23401k07wk.jpg)\r\n\r\n搬家的时候发现我的iwork8并没有当二手卖掉，或者扔在北京。正巧，在百度贴吧搞到一张这机器主板的结构图。\r\n\r\n![结构图](https://ws1.sinaimg.cn/large/89d0a2e1gy1g9jp0th158j20fk0cfagx.jpg)\r\n\r\n简单说只要短接一处，这机器上面就会多两个usb口。那么我的目标就是\r\n\r\n一、增加一个标准USB口\r\n二、更换6000mah电池\r\n三、增加一个指纹模块\r\n四、更换wifi天线\r\n\r\n遗憾的是，microUSB接口已经取不下来了，所以充电口有些接触不良，索性可以待机两天（充满要一天...）还可以忍受。\r\n\r\nwifi信号依然不是很好，所以平日会再插一个外接wlan，看书嘛，其实也没这么高需求了。\r\n","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2019/09/01/USB.md","slug":"2019/09/01/usb","body":"# 谈一谈USB\r\n\r\n这篇文章其实是之前挖的坑，大上个月在改造我的平板的时候，就像写这篇文章了。说说这个平板吧，酷比魔方iwork8，8英寸的windows平板，用来读pdf刚刚好，只是存储不是很足而且只有一个micro-usb接口。所以我更期望给它改造成usb type-c接口或者增加一个标准usb接口，然而当我粗略查询micro-usb和type-c针脚的不同点的时候，发现并不是那么简单。当然，最后我还是给这个平板装上了标准usb接口，而这篇文章也就油然而生了。\r\n\r\n## USB的产生\r\n\r\n如果你是近些年才使用了计算机，那么熟知的接口自然就只有USB，然而就在上世纪90年代，计算机接口的分工还有所不同。当时还有链接屏幕的串口，链接打印机的并口，链接键盘鼠标的PS/2口，声卡显卡的PCI-E，而现在基本上都被USB统一天下了。\r\n\r\n根据Wikipedia，在1994年，7家公司开始开发USB，通用串口，目标是实现为计算接提供可以通用适配多种外设，包括足够的电量适配和数据传输，他们组织了USB-IF，以后每次技术更新都要提交到USB-IF中。7家公司分别提供了对USB从软件到硬件的支持（颇有一点点西方神话众神造物的感觉）。其中Intel于1995年研发出了USB的集成单元。到1996年1月，USB终于发布了1.0版本（有趣的是红荔村也是1996年出来的，这俩没什么关系，主要是我刚吃完红荔村）。\r\n\r\n### USB 1.x\r\n\r\nUSB最早发布了两个版本每秒1.5Mbit/s的【Low Speed】和12Mbit/s的【Full Speed】，大概一首3MB的歌，Low Speed需要传输16s，而Full Speed需要2s，如果拆解过这两款数据线，Full Speed会有另外一条解决静电的地线。可见Low Speed是用来处理如鼠标、键盘等设备，而Full Speed则处理如打印机软盘等设备，显然在1.0时链接屏幕还是不行的，如果一张1MB的图片光传输就要1s，那基本上看视频就和看PPT一样了。\r\n\r\nWindows 95于1997年开始预装USB的驱动。1998年8月，USB1.1发布，苹果全线产品开始推动USB，在苹果的影响之下，PC也开始推动市场上的计算机换代使用USB。\r\n\r\nUSB 1.x的时候其实没有对小型接口的形状有描述，以至于除了标准的type-A（最常见的长方形接口）和方形的type-B（我在打印机上面见到过）接口的其它接口基本上由厂家自定义，要知道90年代末期可是mp3、mp4大爆发的年代。\r\n\r\n### USB 2.x\r\n\r\n到了2000年4月，60MB/s的【High Speed】传输版本发布，发布了usb-min和usb-micro标准（从Wikipedia看基本上算是整理出来的，可见这个组织初期的地位是多低...）；提供了USB供电标准，允许1.5A到5A的接口（这么大的跨度，估计也是个整理的数值）；On-the-go允许主从设备反向链接。\r\n\r\n#### USB on the go\r\n\r\nUSB初期设计是一个主从设备，计算机链接U盘，计算机就是主设备，U盘则是从设备。可是随着平板等一系列设备出现，这种平板链接U盘的时候是主设备，而链接计算机的时候又是从设备，除了给这种平板两个接口之外，还可以依赖一个转接口反转主从位置，这就是USB OTG。\r\n\r\n### USB 3.x\r\n\r\nUSB 3.0于2008年11月提出称之为【Super Speed】，允许5Gbit/s传输速率，支持每byte以10bit传输，所以会按照500MB/s单工传输。\r\n\r\nUSB 3.1于2013年7月发布，将USB 3.0改名为【USB 3.1 Gen 1】，并将USB 3.1命名为【Super Speed+】也叫【USB 3.1 Gen 2】，Super Speed+对于Super Speed的改造就是修改原有的单工传输为双工传输，这样单方向传输速率可以达到1GB/s。\r\n\r\nUSB 3.2于2017年发布，主要是将Super Speed和Super Speed+实现在USB type-c接口上，并允许传输效率达到1.25~2.5GB/s。\r\n\r\n写到这里，感觉USB 3系列有点晕。基本上每个子版本都被改名了，现在是按照速率命名：\r\n\r\n+ 符合USB 3.0标准，但是速率为5Gbit/s的接口被命名为USB 3.2 Gen 1\r\n+ 符合USB 3.0标准，但是速率为10Gbit/s的接口被命名为USB 3.2 Gen 2\r\n+ 符合USB 3.0标准，但是速率为20Gbit/s的接口被命名为USB 3.2 Gen 2x2\r\n\r\n所以目前号称是USB 3.2的接口说不定它是08年的USB 3.0接口。\r\n\r\n### USB 4\r\n\r\n2019年8月，USB 4发布，支持40Gbit/s和Thunderbolt 3协议，并向下兼容USB 2.0和USB 3.2协议。\r\n\r\n#### 什么是Thunderbolt协议\r\n\r\n这个协议是Intel和苹果合作实现的，用来代替PCIe和DisplayPort接口，Thunderbolt 3选择使用USB type-c作为默认接口。\r\n\r\n## USB的针脚定义\r\n\r\n#### 标准USB\r\n\r\n包括+5V， Data-， Data+， Ground，当然这一直是USB2.0的标准\r\n\r\n#### 迷你USB\r\n\r\n包括+5V，Data-， Data+， ID（用于OTG），Ground\r\n\r\n#### Type-C\r\n\r\n因为Type-C接口支持正反方向，所以两个方向的针脚排列是镜像的。包括Ground，SuperSpeed+，SuperSpeed-，+5V，Configure， D+， D-，SideBand use，+5V，SuperSpeed-， SuperSpeed+，Ground。\r\n\r\n所以想拿Type-C的针脚链接迷你USB的主板，基本是不太可能的。\r\n\r\n## USB的特征和限制\r\n\r\n1. USB的设计基于主从模式，主设备提供对从设备的控制，至于人体输入设备或者OTG设备则需要额外芯片处理。\r\n2. 链接于同一台主设备的两台从设备不能互相连通。\r\n3. 两台主设备链接不能互相联通。\r\n4. 目前的USB线缆只能保证近距离数据传输，远程传输需要依赖远程传输的设备，当然USB-4中还包括光纤，所以这个限制只算是目前。\r\n\r\n# 参考\r\n\r\n[1] USB https://en.wikipedia.org/wiki/USB\r\n[2] USB hardware https://en.wikipedia.org/wiki/USB_hardware#Connectors\r\n[3] USB_On-The-Go https://en.wikipedia.org/wiki/USB_On-The-Go\r\n[4] USB-C https://en.wikipedia.org/wiki/USB-C\r\n[5] A brief history of USB, what it replaced, and what has failed to replace it https://arstechnica.com/gadgets/2014/08/a-brief-history-of-usb-what-it-replaced-and-what-has-failed-to-replace-it/\r\n\r\n\r\n\r\n\r\n\r\n","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2019/10/31/Glamor-hood-and-triangular-prism.md","slug":"2019/10/31/glamor-hood-and-triangular-prism","body":"\n# 胶皮遮光罩和三棱镜\n\n作为小众相机「宾得」的用户，深刻感受到了摄影穷三代的道理，对应的配件实在是太贵了。\n\n好在某宝还是有些东西的，比如这个胶皮遮光罩，首先，因为是胶皮的，不用担心螺口对不上的问题，还有拍摄一些被镜子遮盖的物体就不用担心反光之类的事儿了。\n\n![胶皮遮光罩](http://ww1.sinaimg.cn/mw690/89d0a2e1gy1g8lv93gm89j23401k0e83.jpg)\n","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2019/11/15/wifi.md","slug":"2019/11/15/wifi","body":"# 没想到小杜wifi竟然还能用\n\n大概是我大四的时候，也就是2014年，国内的互联网公司开始发布wifi发射器。原因很简单，4G时代刚刚开始，资费高得不得了，而3G的网速还不足以满足互联网公司的需求。于是所有公司都盯上另一个技术wlan，只要有一台机器连接了网络就可以让它成为别的机器的nat，正巧联发科的2.4G的wlan模块已经很成熟了，我依稀记得当时买一个小度wifi只要16元。\n\n显然，现在小杜wifi已经没有用了，如果把它插上一台Windows10机器，系统会报找不到驱动错误，但显然还能识别出来他是个2.4G wlan模块。\n\n最近我在考虑把我的第二块屏幕连接树莓派，原因是当我的笔记本连接第二块屏幕来看视频时会占用我开发的资源，毕竟一台8GB内存+核显的机器比较难以支撑现在的开发需求。作为一个抠门的人，我并不想网购一个wifi模块，可是我确实需要一个wifi模块以保证我的树莓派保持更新，这时我注意到那个挂在我钥匙链上的小杜WiFi。\n\n执行`lsusb`查看小杜WiFi的设备号2955:1001，有意思的是百度抹掉了这个设备的其它信息，谷歌一下这是联发科的一款wlan芯片MT7601U，可以在联发科官网下载linux驱动的。但是wait for it，如果你用的是Ubuntu mate，你都不需要担心编译驱动的问题，因为它已经写入内核了。\n\n所以只需要写入Ubuntu mate到树莓派，插入小杜WiFi，然后将sourcelist的ubuntu-ports镜像改成USTC的，接下来就万事大吉了。","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2019/11/19/Window 10 Home-docker desktop.md","slug":"2019/11/19/window-10-home-docker-desktop","body":"# 怎么在Windows 10 Home安装docker desktop\n\n先说一下，在Windows上面安装docker可比Mac上面难多了，首先官网有两种docker tool，推荐的Docker Desktop竟然要求Windows Professional以上（what？）。要知道大陆没有微软官方授权的Windows Professional... 给我的选择，要么删除我的win10 home安装个破解版，或者某宝上面找了个密钥。\n\n简单搜了一下某宝，大概可以整理出以下几个版本：\n\n1. 英文官方密钥，有点贵\n\n2. 不提供密钥，提供破解方法（这种人怎么不去死）\n\n3. OEM密钥，不知道能不能用来升级\n\n4. 批量安装密钥，这个比较坑，你当时激活成功几个月后可能会被revoke\n\n最后决定...算了，用我的正版Home好得不得了。其实docker需要win10 pro的Hyper V来虚拟化Windows container，早说嘛，我又不用Windows container。那么问题就是要欺骗docker安装包我的机器是win pro就好了呗。\n\n将以下命令保存为*.cmd文件并执行可以安装Hyper V。\n\n```bash\npushd \"%~dp0\"\n\ndir /b %SystemRoot%\\servicing\\Packages\\*Hyper-V*.mum >hyper-v.txt\n\nfor /f %%i in ('findstr /i . hyper-v.txt 2^>nul') do dism /online /norestart /add-package:\"%SystemRoot%\\servicing\\Packages\\%%i\"\n\ndel hyper-v.txt\n\nDism /online /enable-feature /featurename:Microsoft-Hyper-V-All /LimitAccess /ALL\n```\n\n安装成功会提醒重启计算机，启动成功后不要着急安装，还要修改一处注册表。\n\n```\nREG ADD \"HKEY_LOCAL_MACHINE\\software\\Microsoft\\Windows NT\\CurrentVersion\" /v EditionId /T REG_EXPAND_SZ /d Professional /F\n```\n\n好了起码对于docker来说，这就是台win10机器了，接下来正常安装一直下一步，如果你的机器支持docker的话（虽然这句话有点多余，但是我有三台机器，只有一台跑起来docker了），每次启动机器会带起来docker。\n","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2019/11/19/fluent terminal-git bash.md","slug":"2019/11/19/fluent-terminal-git-bash","body":"# fluent terminal适配给git bash\n\n相信很多windows平台上的开发者都换上了fluent terminal，而且有相当的一部分用的是git-bash，另一拨人应该用的是powershell，我彩不会有多少人使用的是CMD吧。\n\n当然自从WSL发布以后，我尽量将所有Windows设备都撞上了Artix，然而WSL只支持64位系统，那意味着我手上用来看书的8寸小平板因为硬件架构只能保持在32位环境下面。\n\n当然我也不指望在一台7寸屏幕下面开发，但毕竟折腾精神永存，我也在这台设备上装上了fluent terminal，接下来就是配置它使用git-bash。如截图所示，指定执行文件为```C://Program Files/Git/bin/bash.exe```，接下来重启就可以了。\n\n![配置项](http://ww1.sinaimg.cn/mw690/89d0a2e1gy1g93k97jhn7j20zk0m8n4i.jpg)","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2019/11/26/Ubuntu.md","slug":"2019/11/26/ubuntu","body":"# 树莓派Ubuntu重启音频\n\n前一阵子重新拿起来我的树莓派用来放一些学习视频，然而发现ubuntu mate对音频处理有问题，一旦占用结束后有新的应用来占用就会有杂音，感觉ubuntu这个问题出N久了。目前我没找到更好的解决方案，只好重启一下了。\n\n```shell\n#!/bin/bash\npulseaudio -k && sudo alsa force-reload\n```","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2019/11/28/Ubuntu-sslocal.md","slug":"2019/11/28/ubuntu-sslocal","body":"\n# 树莓派 Ubuntu 实现 sslocal 负载匀衡\n\n由于某些原因，我配置了多个 ssserver，windows 客户端可以简单配置负载匀衡，而在 linux 上面需要借助 haproxy。\n\n首先，因为我的服务是 aes-255-gcm 加密方式，需要升级 ss 客户端。\n\n```shell\npip install https://github.com/shadowsocks/shadowsocks/archive/master.zip -U\n```\n\n修改 sslocal 配置，server 连接的是本地 haproxy 端口，增加/etc/shadowsocks/default.json\n\n```JSON\n{\n    \"server\": \"127.0.0.1\",\n    \"server_port\": 8888,\n    \"local_address\": \"127.0.0.1\",\n    \"local_port\": 1234,\n    \"password\": \"password\",\n    \"timeout\": 50,\n    \"method\": \"aes-256-gcm\",\n    \"fast_open\": true,\n    \"workers\": 2\n}\n```\n\n为 sslocal 增加 service，增加/etc/systemd/system/sslocal.service\n\n```ini\n[Unit]\nDescription=Shadowsocks\nAfter=network.target\n\n[Service]\nExecStart=/usr/local/bin/sslocal -c /etc/shadowsocks/default.json\nRestart=on-abort\n\n[Install]\nWantedBy=multi-user.target\n```\n\n好了，sslocal 的部分说完了，接下来 apt 安装 haproxy，修改/etc/haproxy/haproxy.cfg，增加以下行。\n\n```INI\nlisten status\n    bind *:1111\n    mode  http\n    stats refresh 30s\n    stats uri /status\n    stats realm Haproxy\n    stats auth admin:admin\n\nfrontend ss-in\n    mode tcp\n    bind *:8888\n    default_backend ss-out\n\nbackend ss-out\n    mode tcp\n    option tcp-check\n    balance roundrobin\n    server xxx <server>:<port> check\n    server yyy <server>:<port> check\n    server zzz <server>:<port> check\n```\n\n配置完成还要改一下 systemd，/etc/systemd/system/haproxy.service，修改 After 和 Wants 字段，用 network-online.target 替换 network.target。\n\n最后用 systemd 启动 haproxy 和 sslocal。\n\n```shell\nsudo systemd enable haproxy\nsudo systemd enable sslocal\n```\n\n**_参考链接_**\n\n[求教如何让 ss 客户端支持 aes-256-gcm 加密方式](https://www.ubuntukylin.com/ukylin/forum.php?mod=viewthread&tid=188059)\n\n[guyskk/shadowsocks-server.service](https://gist.github.com/guyskk/a9665bc6b2a89b73fae34678b1f6dc6b)\n\n[多 Shadowsocks 服务器负载均衡](https://www.solarck.com/haproxy-shadowsocks-balance.html)\n\n[解决 Haproxy 用 Systemd 启动失败的问题](https://www.solarck.com/systemd-wait-network-online.html)\n","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2019/11/28/windows powertoy.md","slug":"2019/11/28/windows-powertoy","body":"\n# 安利一下 Windows Powertoy\n\n这是最近 Windows 开源的一个应用，可以拓展 Windows 的一些功能，比如下图的 Fancy zones，可以提高 Windows 的分屏功能。\n\n![fancy zones](https://ws1.sinaimg.cn/mw690/89d0a2e1gy1g9drryez7hj22gu1bo4dr.jpg)\n\n可惜目前只支持 x64 平台，但是 github 上面已经有[issue](https://github.com/microsoft/PowerToys/issues/413)跟踪了。\n\n目前还不能在 Windows 商店里面安装，可以利用 chocolatey 安装。\n\n```batch\nsudo choco install powertoys\n```\n","collection":"blog","data":{"type":"post","category":"tech","tag":["windows"],"series":{"slug":"windows-howto","name":"Windows舒适指南"}}},{"id":"2019/12/02/Windows.md","slug":"2019/12/02/windows","body":"# 重装Windows记\n\n![更新中](https://ws1.sinaimg.cn/mw690/89d0a2e1gy1g9jos5k3vaj23401k0hdv.jpg)\n\n就目前来说，我有三台Windows设备，两台已经是64位，只有一台iwork8还是32位。由于一次[魔改](https://gongbaodd.github.io/tech/2019/07/24/%E5%A6%82%E4%BD%95%E9%AD%94%E6%94%B9%E4%BD%A0%E7%9A%84iwork8.html)以及为它[配置了fluent-terminal](https://gongbaodd.github.io/tech/2019/11/19/fluent-terminal%E9%80%82%E9%85%8Dgit-bash.html)，这个小本儿对我是越来越重要。\n\n哎，其实到我这岁数，折腾装系统实在没精力，但长痛不如短痛，咬咬牙，以后就能拿64位看书了。\n\n那么32位系统显然不足够的，这个平板的芯片是Intel Atom Z8300，是支持64位的，而且当初到手的时候是双系统，Windows+安卓，但是因为容量不足被我刷成了单一Windows系统。\n\n官方给了两个固件，一个是32位Windows+32位UEFI，另一个是64位Windows+64位UEFI以及安卓系统。这留给我下面几个方案：\n\n1. 用32位UEFI引导64位Windows\n2. 刷双系统，删除安卓\n3. 刷双系统，缩小安卓部分\n\n## 用32位UEFI引导64位Windows\n\n我曾经在这台机器上实现引导64位ArchLinux，只是没有触屏驱动，最终放弃。这次Windows也不是很乐观，因为Windows是闭源的，所以不知道怎么在32位机器上面编译一个64位引导，放弃。\n\n## 双系统，删除安卓\n\n删了安卓，发现启动还要等10秒的安卓引导...忍了。发现闲置的分区在Windows分区前面，无法扩展到现有分区里面。删了安卓重装Windows，发现没有触屏驱动，查找了一下是没有校准...找了很久也没找到校准的方法，放弃。\n\n安装了固件里面的install.wim，发现引导搞不定（也有可能是我的u盘的质量问题，启动总提示文件损坏）。\n\n## 缩小安卓部分\n\n找到安卓固件里面的gpt.bin，找到000360h的d列，把它改成06，贴吧里面说是1G，经我实测是4G...\n算了，最后还是给Windows省了22.5G，安装了WSL，VLC，edge，fluent-terminal，kindle，系统还剩下5G（哭，尽力了）。\n\n好了，看书工具嘛，毕竟大部分书都放在u盘里面。话说虽说64位系统的优化对这个2G内存的机器没啥实际作用，但感觉好像快乐些呢（心理作用）。","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2019/12/10/iwork8.md","slug":"2019/12/10/iwork8","body":"# 再见我的iwork8\n\nmicro-usb口接触不良，换口的时候把主板击穿了sad...\n\n感谢它陪伴我度过了4年的时光。\n\n![iwork8](https://ws1.sinaimg.cn/mw690/89d0a2e1gy1g9rhcuhc7fj20l50gan2x.jpg)\n\n这个故事告诉我们，usb otg要少用，因为接口真的不结实。\n","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2019/12/14/MiPad2-Windows.md","slug":"2019/12/14/mipad2-windows","body":"# 小米平板二代安装Windows\r\n\r\n因为我手上的iwork8被我玩坏了，当务之急我需要一款8寸左右的小平板来看书。\r\n\r\n市面上的平板8寸的已经不多，即使是有也大多是安卓板子。老实说，安卓做平板其实还是只能做玩具。自从灵动推出个人移动领域，用在移动端的i3886/amd64芯片就只有酷睿m系列了（而且价格不菲，这样的平板都得过千了）。\r\n\r\n连续看了几款，包括iwork8、EZpad mini和小米平板2（注意小米只有这一款平板是Intel的），还是选择了小米平板2.\r\n\r\n闲鱼上的小米平板2基本上由16G和64G组成，16G价格区间在250~500，64G在350~700，为了装amd64的Windows，我买了个64G版的，卖家用户密码忘了，自己不会解锁就卖出去了。\r\n\r\n刷Windows很简单，只要一个大于6GB以及type-c的优盘，格式化成FAT32，将下面链接里面的压缩包解压到优盘，插入平板重启，系统就会自动刷Windows，刷机完成的时候记得拔出U盘，否则会重装。\r\n\r\n```\r\n链接: https://pan.baidu.com/s/1We2GU0JGKkeocuRbhKFw1g \r\n提取码: hmjf\r\n```\r\n\r\n安装的Windows版本比较低，需要下载Windows更新助手更新到19年11月版本，然后就会发现，网卡挂了...\r\n\r\n不知道为什么，最新版的网卡驱动有故障，要降级，下面的链接是老版本的驱动备份，用设备管理器安装即可。\r\n\r\n```\r\n链接: https://pan.baidu.com/s/1GFfa_bEt4xjXDKc8ogKKLw 提取码: gpq2 \r\n```\r\n","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2019/12/29/keeweb.md","slug":"2019/12/29/keeweb","body":"\n# 使用 keeweb 管理密码\n\n如果说在 Aftership 工作的最大收获，应该是使用 1Password 管理自己的密码，以前自己的密码是结合网站域名和自己的固定字符串组合而成的，随着访问的站点越来越多，不得不说，还是有一点重复的。\n\n考虑到 1Password 是个收费软件，我决定参考它的开源对手，keepass。值得注意的是 keepass 拥有一个 web 客户端 keeweb，并能将你的密码库加密存储到 onedrive，google 或者私人 web 服务中。\n\n目前我用 edge 将 keeweb 打包成 PWA 应用放在任务栏上面，接下来我会逐渐迁移现有应用的密码到上面去。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["keeweb"]}},{"id":"2019/12/31/WindowsTerminal2-gitBash-profile.md","slug":"2019/12/31/windowsterminal2-gitbash-profile","body":"\n# 为 Windows Terminal 2 添加 git bash 的 profile\n\n粘贴以下代码到 settings 中。\n\n```JSON\n        {\n            \"guid\": \"{00000000-0000-0000-ba54-000000000002}\",\n            \"commandline\" : \"\\\"%PROGRAMFILES%\\\\git\\\\usr\\\\bin\\\\bash.exe\\\" -i -l\",\n            \"name\" : \"Bash\",\n            \"startingDirectory\" : \"%USERPROFILE%\",\n            \"icon\" : \"ms-appx:///ProfileIcons/{0caa0dad-35be-5f56-a8ff-afceeeaa6101}.png\"\n        }\n\n```\n","collection":"blog","data":{"type":"post","category":"tech","tag":["windows-terminal"]}},{"id":"2020/01/04/gitBash.md","slug":"2020/01/04/gitbash","body":"\n# GitBash 增加环境变量\n\nWSL 的运行速度比较慢，所以我在 windows 下面的开发很大一部分还是在 GitBash 下面，GitBash 基于 mingw 开发，所以直接修改.bashrc 即可\n\n```\nPATH=$PATH:/c/Program\\ Files/nodejs\nalias python='winpty python.exe'\nalias ubuntu='winpty ubuntu.exe'\n```\n\n这里注意下，因为 python 和 Ubuntu 是从应用商店安装的，直接修改 PATH 变量会有权限问题，只能利用 winpty 调用。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["git"]}},{"id":"2020/01/04/kindle-pdf.md","slug":"2020/01/04/kindle-pdf","body":"\n# 转换 kindle 书籍到 pdf\n\n自从习惯用讯飞听书之后，我就很少看书了。如果是 pdf 的话，就在 Windows 上面拿 edge 读给我听，可问题是 kindle 上面很多书加了设备锁，只能在 kindle 上面看，而 kindle 的 TTS 功能实在太差，查了一下，Calibre 是有[DeDRM 插件](https://github.com/apprenticeharper/DeDRM_tools)的。\n\n解压缩插件，在 Calibre 中点击首选项->插件->从文件加载插件，选中解压好的 zip 文件。\n\n之后在插件中找到 DeDRM，把自己的产品序列号输入进去（在亚马逊我的设备中可以找到），之后转换 azw 文件就不会有问题了。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["kindle"]}},{"id":"2020/01/05/CloudFlare-https.md","slug":"2020/01/05/cloudflare-https","body":"# 利用CloudFlare实现网站https访问\n\n## 配置DNS指向CloudFlare\n\n首先登入CloudFlare的时候，会被要求更改网站的DNS为cloudflare中。需要登入到自己网站的域名配置中修改DNS到CloudFlare下。\n\n配置成功后，收到CloudFlare的确认邮件，打开DNS，将Proxy status都打开。\n\n## 配置https-only\n\n打开CloudFlare的TLS选项，选择encryption mode为flexible，就是服务器到cloudflare不加密（只要cloudflare不作恶，我就OK），在Edge Certificates里面选择Always use https即可。\n\n## 配置防火墙只允许cloudflare的IP\n\n这里没配置成功，留个坑以后补全。\n\n安装firewalld\n\n```\nsudo apt install firewalld\nsudo systemctl start firewalld\nsudo systemctl enable firewalld\n```\n\n接下来执行以下脚本为cloudflare增加至白名单\n\n```shell\n!#/bin/bash\n\nfor i in $(curl \"https://www.cloudflare.com/ips-v4\");\ndo\nsudo firewall-cmd --permanent --zone=public --add-rich-rule='rule family=\"ipv4\" source address=\"'$i'\" port port=80 protocol=tcp accept';\nsudo firewall-cmd --permanent --zone=public --add-source=$i;\ndone\n\nfor i in $(curl \"https://www.cloudflare.com/ips-v6\");\ndo\nsudo firewall-cmd --permanent --zone=public --add-rich-rule='rule family=\"ipv6\" source address=\"'$i'\" port port=80 protocol=tcp accept';\nsudo firewall-cmd --permanent --zone=public --add-source=$i;\ndone\n\nsudo firewall-cmd --permanent --change-zone=eth0 --zone=public\n\nsudo firewall-cmd --reload\n\nfirewall-cmd --zone=public --list-all\n```","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2020/01/06/Windows-Jupyter-NotImplementError.md","slug":"2020/01/06/windows-jupyter-notimplementerror","body":"\n# 修复 Windows 下打开 Jupyter 报 NotImplementError\n\n打开`/c/Users/{USER_NAME}/AppData/Local/Programs/Python/Python38/Lib/asyncio/__init__/py`.\n\n修改\n\n```python\nif sys.platform == 'win32':\n    from .windows_event import *\n    __all__ += windows_events.__all__\n```\n\n改为如下\n\n```python\nimport asyncio\n\nif sys.platform == 'win32':\n    from .windows_event import *\n    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())\n    __all__ += windows_events.__all__\n```\n","collection":"blog","data":{"type":"post","category":"tech","tag":["jupyter"]}},{"id":"2020/01/15/Static-phylical-scope.md","slug":"2020/01/15/static-phylical-scope","body":"\n# 静态词法作用域\n\n最近在看 rust，里面提到静态词法作用域，一个神奇的 deja-vu，于是我急忙查了下它是啥。\n\nrust 和 js 都是静态词法作用域，简单说，作用域中的变量在编译时已经确定，不会随着运行时变化而变化。\n\n```javascript\nvar a = 1;\n\nfunction foo() {\n  var a = 2;\n\n  bar();\n}\n\nfunction bar() {\n  console.log(a);\n}\n\nfoo(); // print 1\n```\n\n而相对的 shell 就是动态作用域。\n\n```shell\nvalue=1\n\nfunction foo() {\n    local value=2;\n    bar;\n}\n\nfunction bar() {\n    echo $value;\n}\n\nfoo;# print 2\n```\n\n动态作用域被广泛应用于早期动态语言，猜测是早期运行环境内存比较少不能装拿这么多东西吧。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["compilers"]}},{"id":"2020/01/16/rust.md","slug":"2020/01/16/rust","body":"# rust编程之道\n\n这是一本大概是我18年买的书，当初是打算紧随Mozilla的脚步学习使用Rust，然而这本书显然不太适合那个时代的我学习。当时我只是个完全的前端，过了第3章类型管理的时候基本上就是一脸懵逼。\n\n可以说经过19年一年的后端工程师工作，我是更加了解关于线程、内存管理之类的概念。而且由于过去一年读了RxJS，对函数编程范式更加了解。另外在18年中旬，我是完全的面向对象范式追随者，对于Rust里面的一些范式显然不是很理解。\n\n这本书讲得很全面，可以说，如果拿里面的某些章节详细写出来就可以做大学教材了。但是弊端肯定是有的，比如Rust的应用，这里基本上没提，不过也可以谅解，毕竟就是在这本书出版后两年的今天，要说Rust的存在感依然很低；另外，很多作者用的很习惯的词汇往往会漏注释，毕竟我不是专门抽出一段时间来看这本书的，乍一看某个缩写还真难回忆它对应语境里面应该是什么。\n\n## 笔记\n\nrust虽然使用类C语法，但是很多地方真的和C语言及其它语言大相径庭。\n\n比如用来代替interface的trait系统\n\n```typescript\n// typescript\ninterface A {\n    bar()\n}\n\nclass B implements A {\n    bar() {\n\n    }\n}\n```\n\n在Rust中\n\n```rust\nstruct B {\n\n}\n\nimpl A for B {\n    fn bar() -> () {\n\n    }\n}\n```\n\n第182页提供了trait系统的不足，当时没看懂，以后回来看好了。\n\n另外259页生命周期参数，比较复杂，个人感觉等用到的时候再看吧。\n\n322页和361页，关于原生闭包和迭代器语法糖的第三方实现。\n\n435页RAII模式，以后抽时间看把。\n\n727页，无状态协程async/await语法糖实现。\n\n","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2020/01/28/spotify.md","slug":"2020/01/28/spotify","body":"\n# 白嫖 spotify 的方式\n\n今年开始，我不再在家办公，这使得我的网络环境不是很稳定，无法一直在线听 spotify。最好的办法，自然是把要听的音乐缓存下来。\n\nGitHub 里面有一个 python 项目[spotify-downloader](https://github.com/ritiek/spotify-downloader)可以下载 spotify 的音频。\n\n利用 pip 安装\n\n```shell\npip install spotdl\n```\n\n因为是国内使用，需要代理\n\n```shell\nenv https_proxy=http://127.0.0.1:1080 spotdl --song http://open.spotify.com/xxx\n```\n\n另外，spotdl 支持列表下载\n\n```shell\nspotdl --playlist [listUrl] # to get all songs' url\nspotdl --list list.txt # to download the songs\n```\n","collection":"blog","data":{"type":"post","category":"tech","tag":["spotify"],"series":{"slug":"windows-howto","name":"Windows舒适指南"}}},{"id":"2020/01/31/monect.md","slug":"2020/01/31/monect","body":"\n# Monect 让手机变成鼠标\n\n自从我的 XPS 键盘坏了，我就打算使用 K380 键盘替代我的笔记本键盘，然而这样使用触摸板就很困难。\n\n很久之前我就想让手机成为我的远程键盘，以前用 Linux 的时候有一个 KDE connect 可以实验通过 wifi 链接。但是因为我住的公寓 wifi 貌似会阻拦互相发现，最好的办法还是用蓝牙链接。去年稍稍了解了一些 blueman 的相关知识，其实蛮有意思的，可惜拖延症没有继续下去（确实比较有意思，苹果曾开发过一个协议，通过商场蓝牙派发广告）。\n\n回到正题，可以通过 Monenct 官网下载 PC 的 host，在 play store 下载 client，monect 支持 wifi、蓝牙以及 usb 链接。这样即使有一种连接方式暂时不可用其他方式能够立马替换。\n","collection":"blog","data":{"type":"post","category":"tech","series":{"slug":"windows-howto","name":"Windows舒适指南"}}},{"id":"2020/02/04/Powershell-Windows.md","slug":"2020/02/04/powershell-windows","body":"\n# 用 Powershell 更新 Windows\n\n发现已经半个月没有被 Windows 更新打扰了，原来是一个累积更新挂了，我发现在图形界面下面怎么更新都失败，于是寻思在命令行执行。\n\n在 powershell 中有一个包 PSUpdateWindows 可以派上用场。\n\n```powershell\nInstall-Module PSUpdateWindow\n\nGet-WindowsUpdate #下载更新\n\nInstall-WindowsUpdate #安装更新\n```\n","collection":"blog","data":{"type":"post","category":"tech","tag":["powershell"],"series":{"slug":"windows-howto","name":"Windows舒适指南"}}},{"id":"2020/02/04/Windows-scrapy.md","slug":"2020/02/04/windows-scrapy","body":"\n# Windows 上使用 scrapy 抓取网页\n\n过去一周，我在尝试在 Windows 上面使用 python，我会在这一篇文章中总结一下这一次体验的经验，代码已经发布到[GitHub](https://github.com/gongbaodd/webScrapingStudy)上面。\n\n## 安装 python\n\n本身 python 的版本就比较混乱，Windows 又提供了商店版，而且 WSL 下面也可以安装 Linux 的 python，我都体验了一下。\n\n- Windows 商店版，这个貌似就是为了教学使用，因为 Windows 目前比较尴尬，全局安装的包可能会有兼容性问题，但是因为商店版都运行在沙盒之下，基本上就没多少修改的可能了。\n- WSL 版本，这个版本体验的是纯正的 Linux，但是一定要注意，如果没安装 Xserver 就相当于没有图形界面。\n- x64 版本，这个问题在于安装文件的地址都跟了个 x64。\n- win32 版本，这个版本的问题比较小，除了 pyenv 需要单独下载 Windows 版和[jupyter 报错](https://gongbaodd.github.io/tech/2020/01/06/%E4%BF%AE%E5%A4%8DWindows%E4%B8%8B%E6%89%93%E5%BC%80Jupyter%E6%97%B6%E6%8A%A5NotImplementError.html)，还没碰到其他问题。\n\n## pyenv\n\n介于 python 大版本兼容性，个人认为要安装一个版本管理器。因为习惯于 JavaScript 工作环境，我肯定会寻找类似于 nvm 的映射就是 pyenv，在 Windows 下面可以通过 chocolatey 安装。\n\n```shell\nsudo choco install pyenv-win\n```\n\n下面几个命令是最常用的。\n\n- `pyenv install -l`查看可以安装的 python 版本号。\n- `pyenv local install 3.8.0`在项目中安装 3.8.0 版本（会在项目目录增加.python-version 文件）。\n- `pyenv version`查看现在的 python 版本。\n- `pyenv versions`查看安装过的 python 版本。\n\nwin10 上了一个新功能，控制台会引导 python 到应用商店，在“设置>应用和功能>应用执行名”中可以勾掉这个功能\n\n## virtualenv\n\npython 的包管理其实很差，都是放到 global 下面，这就导致多个项目可能都用同一个依赖。那么如何实现每个项目都有自己的依赖呢？这就靠 virtualenv。\n\n```shell\npip install virtualenv\n```\n\n如下命令最常用\n\n- `virtualenv [venv folder name]`新建虚拟环境文件夹。\n- `source [venv folder name]/Scripts/activate`启动虚拟环境（在 Linux 下面是 bin/activate）。\n- `deactivate`关闭虚拟环境（这个在 Linux 会比较常用）。\n\n## scrapy\n\nscrapy 是一个 python 的爬虫框架，使用 pip 可以安装 scrapy。\n\n```shell\npip install scrapy\n```\n\n下面是 scrapy 用的比较多的几个命令\n\n- `scrapy startproject [project name]`新建项目。\n- `scrapy crawl [spider name] -o [output file]`爬取页面并输出结果到文件。\n\nscrapy 的概念比较多，包括 spider、pipeline、middleware 等等，但个人看来基本上看完[tutorial](https://docs.scrapy.org/en/latest/intro/tutorial.html#our-first-spider)就可以上手了。\n\n### scrapy shell\n\n执行`scrapy shell [url]`可以以命令形式使用 scrapy。\n\n- `fetch('http://xxx.com')`爬取页面\n- `view(response)`浏览爬取的页面\n- `response.css('a::text').extract()`析取页面中链接的文字列表\n- `response.css('a::attr(href)')`析取页面中链接列表\n\n### 发起 Xmlhttp 请求\n\n使用[Scrapy.FormRequest](https://docs.scrapy.org/en/latest/topics/request-response.html#scrapy.http.FormRequest)发起请求，接收到结果可以使用[response.body_as_unicode()]解析 JSON 为字典。\n\n### splash\n\n截至目前，scrapy 都只能渲染非 JavaScript 运行的页面，但是借助 splash 就可以解析 JavaScript 了。我们使用 docker 可以尝试一下 splash。\n\n```shell\ndocker pull scrapinghub/splash\ndocker run -p 8050:8050 scrapinghub/splash\n```\n\n访问 localhost:8050 即可访问 splash。通过安装`scrapy-splash`可以在 scrapy 中使用 splash，具体安装步骤[官网](https://github.com/scrapy-plugins/scrapy-splash)已经很详细在此不做赘述。\n\n## Scrapinghub\n\nScrapinghub 是一个基于 scrapy 的云服务，可以将自己的爬虫部署到该平台。[这里](https://support.scrapinghub.com/support/solutions/articles/22000200667-running-a-scrapy-spider)有个工具可以帮助部署（当然通过链接 GitHub 可以做到 master 部署）。\n\n```shell\npip install shub\n```\n\n### 解决依赖\n\n爬虫上传到 Scrapinghub 之后，会部署失败，可能源于以下两点。\n\n- scrapinghub 使用的是 python2\n- 部份依赖没有安装\n\n以上两点可以通过修改 scrapinghub.yml 完成\n\n```yaml\nprojects:\n  default: 427692\nstacks:\n  default: scrapy:1.8-py3\nrequirements:\n  file: requirements.txt\n```\n\n通过`pip freeze`能够列举出目前环境下的所有包，需要挑出可能缺少的依赖写在 requirements.txt 里面（没错这一步只能人工完成，不要妄想把所有包都写进去）。\n\n```\nbeautifulsoup4==4.8.2\nfeedparser===5.2.1\nscrapy-splash==0.7.2\n```\n\n## 单元测试\n\n使用 python 自带的 unittest 模块以及 pytest 可以对代码进行单元测试。可以参考我代码中的[测试](https://github.com/gongbaodd/webScrapingStudy/tree/master/test/test_spider)。\n\n执行 pytest 的时候会出现找不到模块的问题，可以按照如下方式重置根地址位置。\n\n```\npython -m pytest [file path]\n```\n\n## 代码优化和格式化\n\n这里比较爽了，如果用的是 vscode，在第一次格式化代码的时候，vscode 就会安装格式化工具。\n\n## pre-commit\n\npre-commit 是一个 git 钩子工具，简单说，当本地代码不满足要求的时候，利用这个工具自动格式化代码或者阻止用户提交代码。可以参考[官网配置](https://pre-commit.com/)。\n\n## 包健康检查\n\n目前没在 python 找到一个类似于 yarn audit 的东西，到那时找到了一个[SNYK](https://snyk.io)是一个跨语言的包健康检查工具，但是貌似还有 bug，暂时先裸奔好了。\n\n## 持续集成\n\n目前我是用 Travis 做集成，配置文件可参考[此文件](https://github.com/gongbaodd/webScrapingStudy/blob/master/.travis.yml)。\n\n## 兼容性处理\n\n另外还找到一个 python 版本兼容测试工具，考虑到使用 python 命令的人自己的 python 版本并不确定，[tox](https://pypi.org/project/tox/)则是用来测试 py 是否兼容某些 python 的版本。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["scrapy","python"]}},{"id":"2020/02/06/git-CRLF-LF.md","slug":"2020/02/06/git-crlf-lf","body":"\n# Git 中的 CRLF 和 LF\n\n跨平台开发的时候，如果是在 Windows 下面上传代码，git 会提醒部分文本文件的 CRLF 会改为 LF。\n\n原因是在 Windows 下面，文本文件会以 CRLF（回车换行）结尾，而 Linux 和 Mac 会以 LF（换行）结尾。其实想想打字机，回车换行是一个正确的做法，但是为了保持兼容性，git 会把 Windows 上传的 CRLF 都改成 LF。\n\n如果只在 Windows 下面开发，可以关掉这个功能。\n\n```shell\ngit config --global core.autocrlf false\n```\n","collection":"blog","data":{"type":"post","category":"tech","tag":["git"]}},{"id":"2020/02/12/Windows-Rust-GTK.md","slug":"2020/02/12/windows-rust-gtk","body":"\n# Windows 下为 Rust 提供 GTK 环境\n\nWindows 下面安装 GTK 环境有两种方法，借助 msys2 的 linux 环境，或者借助 VCPKG 安装 Windows 的 GTK 依赖。\n\n尝试了一下，msys2 并没有成功，只能使用 VCPKG，参考[gnome 编译指南](https://www.gtk.org/download/windows.php)。\n\n```batch\ngit clone https://github.com/Microsoft/vcpkg\ncd vcpkg\n.\\bootstrap-vcpkg.bat\nvcpkg install gtk:x64-windows\n```\n\n安装的时候发现不能编译成功，此时需要祭出 Visual Studio 大法，找到 Visual Studio Installer，安装 C 工具链，再重新执行上面的代码即可。\n\n然后再环境变量中增加`GTK_LIB_BASE`值为`c:\\MyWorks\\github\\vcpkg\\installed\\x64-windows\\lib`(就是 vcpkg 下载依赖包的位置)\n\n环境变量中的 PATH 的第一个值也要配上`c:\\MyWorks\\github\\vcpkg\\installed\\x64-windows\\bin`。\n\n如果 rust 项目还编译不成功，尝试将 vcpkg 里面的/lib/gdk-3.lib 和/lib/gtk-3.lib 连接到/lib/gdk-3.0.lib 和/lib/gtk-3.0.lib，bin 文件夹下的 dll 文件也一样处理。\n\n再次运行`cargo run`即可，[相关代码](https://github.com/gongbaodd/rust_webAssembly_study/tree/master/rust_gtk)。\n\n最初想试一下 rust-gtk 的原因是，想试试这个跨平台框架如何，但是在 Windows 下面效果并不怎么样，而且还有 HIDPI 的问题，Reddit 里面讨论感觉 gtk 这边也没有很着力于 rust，所以对 GTK 的探究就暂时到此为止了。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["rust","gtk"]}},{"id":"2020/02/13/Windows-Rust-QT.md","slug":"2020/02/13/windows-rust-qt","body":"\n# Windows 下为 Rust 提供 QT 环境（弃）\n\nQT 的部署要比 GTK 容易一些，然而由于最近我的机场流量用尽，所以最大的困难就是网络。\n\n参考[Rust-qt](https://github.com/rust-qt/examples)，有比较详细的环境配置。需要下载完整的[Qt 安装包](https://www.qt.io/download)和[Visual Studio 2017](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15)（最好用 2017，能少踩不少坑）。\n\n安装成功后，在环境变量 PATH 里面增加`C:\\Qt\\Qt5.14.1\\5.14.1\\msvc2017_64\\bin`然后找到 VS2017 的命令行，只有这个命令行能准确编译 QT5。\n\n虽然按照 Rust-qt 的做法，C++的 QT 可以完美运行，但是编译的时候要使用 gcc，所以还是要安装 msys2，而且对 QT 要求的版本也比较苛刻，因此我决定就此放弃 QT（即使 QT 已经能跑在 web-assembly 上面了）。\n\n## Rust 相关的 UI 框架\n\n其实还有一篇文章关于 Rust 的 UI 编程的，可以查看[这篇文章](https://gitlab.com/bloom42/research/rust_gui_ecosystem)。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["rust","qt"]}},{"id":"2020/02/15/Github.md","slug":"2020/02/15/github","body":"\n# Github 项目徽章地址\n\n在https://shields.io/可以为Github项目添加徽章。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["github"]}},{"id":"2020/02/22/Windows-strokesPlus.md","slug":"2020/02/22/windows-strokesplus","body":"\n# 分享一个 Windows 下面的鼠标手势工具 StrokesPlus\n\n我终于还是妥协了，在使用 windows 的情况下最好还是配备一个鼠标。尤其是当你在编程的时候。并不是说触摸屏不好，在很多时候，触摸屏可以在可以帮你记录一些东西。比如让你写一些算法的时候，你可以在旁边画一画。\n\n但是不得不说，编辑器就像 VS code。他对触摸屏的交互其实是很反人类的。另外由于我现在是三台设备。所以我的键盘是同时连着三台设备。。这说明当我要操作我的笔记本的时候，身体要跨过两个键盘的距离。这个动作幅度是比较大的。\n\n所以我在网上买了这个科大讯飞的鼠标，他有一个最大的好处就是，我可以说话打字。这样我就不需要操作键盘了。但是 windows 上面还有另外一个问题，就是鼠标，还有触摸屏和触摸板，三者都没有统一的交互体验。所以我又安装了这个鼠标手势工具。\n\nStrokesPlus 安装很简单，依然使用的是 chocolatey。\n\n```shell\nsudo choco install strokesplus\n```\n\n其实我的需求很简单，就是需要鼠标手势来操作切换桌面。安装好 strokePlus，打开 action 菜单即可添加手势。\n\n- @：代表\"Win\"键\n- +：代表“Shift”键\n- ^：代表“Ctrl”键\n- %：代表“Alt”键\n\n如进入右边桌面的命令为`acSendKeys(\"^@{RIGHT}\")`。\n\n添加\n\n- `acSendKeys(\"^@{RIGHT}\")` 进入右桌面\n- `acSendKeys(\"^@{LEFT}\")` 进入左桌面\n- `acSendKeys(\"@{TAB}\")` 全部桌面\n\n配合 GestureSign，终于触摸屏，触摸板和鼠标手势统一了。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["windows"],"series":{"slug":"windows-howto","name":"Windows舒适指南"}}},{"id":"2020/02/23/Mouse-without-borders.md","slug":"2020/02/23/mouse-without-borders","body":"\n# Mouse without borders 让鼠标同时连接 4 台 PC\n\n既然已经给我的 PC 买上了鼠标，那我肯定希望，三台 PC 能够共用这一个鼠标。在网上查询了一下，发现需要这个需求的人不止我一个。所以微软有一个项目叫做[mouse without border](https://www.microsoft.com/en-us/download/details.aspx?id=35460)。\n\n只要三台设备在同一个域下，我就可以通过这一个软件，让三台设备共享鼠标。\n\n今天忙活了半天这个软件，主要是自如的 wifi 5GHz 设置了防火墙，但是 2.4GHz 没有...所以只要有一台设备连接的是 2.4G 赫兹的网络。就可以进入内网，跟其他的设备交互共享鼠标了。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["windows"],"series":{"slug":"windows-howto","name":"Windows舒适指南"}}},{"id":"2020/02/26/WSL-ruby.md","slug":"2020/02/26/wsl-ruby","body":"\n# WSL 安装 ruby 环境\n\n虽然我这个博客是基于 jekyll 的，但是因为国内整 ruby 的环境实在痛苦，但是最近不得不又重新搞起来了，只能在这里记录一下。\n\n首先安装环境\n\n```shell\nsudo apt install ruby ruby-dev build-essential\n```\n\n然后修改 gem 的环境变量\n\n```shell\nexport GEM_HOME=$HOME/gems\nexport PATH=$HOME/gems/bin:$PATH\n```\n\n修改 source 为 ruby-china\n\n```shell\ngem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/\n```\n\n接着安装 jekyll 即可\n\n```shell\ngem install jekyll bundler\n```\n","collection":"blog","data":{"type":"post","category":"tech","tag":["ruby"]}},{"id":"2020/03/10/ssh.md","slug":"2020/03/10/ssh","body":"\n# ssh 免密码登录\n\n总是忘，这里做个记录。\n\n简单说就是把本地的`id_rsa.pub`存储到远端机器的`authorized_keys`里面，详细操作可参考[此文](http://www.linuxproblem.org/art_9.html)。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["ssh"]}},{"id":"2020/03/11/WSL2-Virtualbox.md","slug":"2020/03/11/wsl2-virtualbox","body":"\n# 应该是目前最好的 WSL2 和 Virtualbox 共存的方法了\n\n因为 WSL2 使用的是 Hyper-V（看来微软爸爸并不是完全拥抱开源了），所以其它虚拟化软件都不能和它共存，所以目前最好的办法就是在开机的时候做一个切换。\n\n```batch\nbcdedit /copy {current} /d \"Disable Hyper-V\"\n```\n\n上面操作会生成一个 GUID，它对应开机目录上一个选项，接下来把他的 hyper-v 选项关掉\n\n```batch\nbcdedit /set {<GUID>} hypervisorlaunchtype off\n```\n\n如果本地已经关闭了 hyper-v，可以执行下面的命令打开。\n\n```batch\nbcdedit /set {<GUID>} hypervisorlaunchtype auto\n```\n\n重启的时候长按 shift 键就可以唤起启动目录了。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["WSL2","virtualbox","hyper-v"],"series":{"slug":"windows-howto","name":"Windows舒适指南"}}},{"id":"2020/03/11/apt.md","slug":"2020/03/11/apt","body":"\n# 为 apt 添加代理\n\n我的上帝啊，这两天都在忙活代理（翻译腔）。\n\n系统全局下的`http_proxy`似乎对 apt 无效，需要单独设置。\n\n```shell\nsudo nano /etc/apt/apt.conf.d/proxy.conf\n```\n\n增加代理\n\n```shell\nAcquire {\n  HTTP::proxy \"http://127.0.0.1:8080\";\n  HTTPS::proxy \"http://127.0.0.1:8080\";\n}\n```\n","collection":"blog","data":{"type":"post","category":"tech","tag":["apt","proxy"]}},{"id":"2020/03/11/docker-Jenkins.md","slug":"2020/03/11/docker-jenkins","body":"\n# 使用 docker 安装 Jenkins\n\n自从成功通过 docker 安装了 strapi，我一下子对安装一切产生了很大兴趣。\n\n通过`docker-compose.yaml`可以很快安装。\n\n```yaml\njenkins:\n  restart: always\n  image: jenkins/jenkins:lts\n  container_name: gongbaodd-jenkins\n  volumes:\n    - ./docker/jenkins:/home/ubuntu/jenkins_home\n  ports:\n    - \"50000:50000\"\n    - \"8080:8080\"\n```\n\n然后访问服务器的 8080 端口，即可安装对应插件，注意，这些插件不能走代理，所以...非常慢...国内还是用 coding.net 吧。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["docker","jenkins","ci"]}},{"id":"2020/03/11/snap.md","slug":"2020/03/11/snap","body":"\n# 为 snap 添加代理\n\n想在腾讯云里面做个 CI，本着用新不用旧的思想，我打算试试搭建 microk8s。可是我国强大的网络环境无法导致无法安装，也没有个大厂出一个镜像解围，只好挂下代理解决。\n\n## sslocal\n\n注意，腾讯云里面安装 sslocal 会被和谐的，但是试了下 docker 却可以，我安装了 [teachmyself/sslocal](https://hub.docker.com/r/teachmyself/sslocal) ，目前没问题。\n\n## 修改`/etc/environment`\n\n```ini\nhttp_proxy=http://[服务器地址]:[端口号]\nhttps_proxy=http://[服务器地址]:[端口号]\n```\n\n重启 snap 即可\n\n```\nsudo systemctl restart snapd\n```\n","collection":"blog","data":{"type":"post","category":"tech","tag":["microk8s","snap","docker","shadowsocks","proxy"]}},{"id":"2020/03/15/Coding.net-Jenkins-CI-CD.md","slug":"2020/03/15/codingnet-jenkins-ci-cd","body":"\n# Coding.net 使用 Jenkins 实现自动部署(CI/CD)\n\n最近在做一些后端部署的工作，本来打算使用 Travis 部署，但是用于我的服务器在国内，所以在外网也需要挂梯子登陆到国内。但是使用 Coding.net 部署到腾讯云就方便很多（毕竟是同一家公司）。\n\n## 在 Coding 创建制品库和部署\n\n往往创建好 Coding 仓库之后需要手动配置来获得部署和制品库功能。点击「项目设置>功能开关」把「构建与部署」和「制品库」打开即可。\n\n点击「制品库」增加 docker 仓库，这里的指引很方便，可以本地写一个 hello-world 发布上去。\n\n点击「构建与部属>构建」新建构建计划，默认我都是选择代码仓库中的 Jenkins 文件，但是可以使用 coding 自带的图形化 Jenkins 编辑器，个人感觉还是比较鸡肋的，但是作为一个文件格式化工具还是不错的。另外[帮助文档](https://help.coding.net/docs/devops/ci/env.html?_ga=2.145117619.605259297.1584251292-35448522.1584251292#%E6%9E%84%E5%BB%BA%E8%AE%A1%E5%88%92%E8%AE%BE%E7%BD%AE%E4%B8%AD%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F)中有详细的变量说明。\n\n## Jenkins 配置\n\nJenkins 的主要功能是检出代码(git clone)，编译代码，执行测试，打包成 docker image 最后上传到制品库。详细内容可以参考[代码](https://github.com/gongbaodd/query.gongbushang.com/blob/master/Jenkinsfile)。\n\n```groovy\npipeline {\n  agent any\n  stages {\n    stage('检出') {\n      steps {\n        checkout([\n          $class: 'GitSCM', branches: [[name: env.GIT_BUILD_REF]],\n          userRemoteConfigs: [[\n            url: env.GIT_REPO_URL,\n            credentialsId: env.CREDENTIALS_ID\n          ]]\n        ])\n      }\n    }\n    stage('编译') {\n      steps {\n        script {\n          docker.image('strapi/base').withRun {\n            docker.image(\"strapi/base\").inside {\n              sh 'node -v && yarn --version && yarn install && NODE_ENV=production yarn build'\n            }\n          }\n        }\n\n      }\n    }\n    stage('打包镜像') {\n      steps {\n        script {\n          sh \"docker build -t strapi:${env.GIT_BUILD_REF} -t gongbaodd-docker.pkg.coding.net/query_gongbushang_com/docker/strapi:latest .\"\n        }\n\n      }\n    }\n    stage('发布') {\n      steps {\n        script {\n            sh \"docker login -u ${env.REGISTRY_USER} -p ${env.REGISTRY_PASS} ${REGISTRY_URL}\"\n            sh \"docker push ${REGISTRY_URL}/query_gongbushang_com/docker/strapi:latest\"\n        }\n      }\n    }\n  }\n}\n```\n\n## 服务器部分\n\n接下来就需要服务器自己下载镜像并执行了，这里有一个比较好的工具叫[watchtower](https://github.com/containrrr/watchtower)，它会每五分钟检查镜像是否有更新并更新本地镜像。\n\n```shell\nsudo docker run -d \\\n    --name watchtower \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    containrrr/watchtower\n```\n\n接下来在服务器执行刚才编译好的镜像即可。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["coding.net","jenkins","docker"]}},{"id":"2020/04/02/docker-mongodb.md","slug":"2020/04/02/docker-mongodb","body":"\n# docker 化的 mongodb 使用方案\n\n之前提到过[使用 watchtower 更新本地的 image 的方案](/tech/2020/03/15/Coding.net使用Jenkins实现自动部署CI&CD)，本来我的系统一直使用 sqlite 来做数据库，现在想改成 mongodb。\n\n涉及到 mongodb 就不得不需要考虑怎么本地化，并且如何做备份。数据本地化很好做，只需要 docker 的 volume 即可，编写`docker-compose.yml`，使用`docker-compose up -d`。\n\n```ini\nversion: '3.7'\n\nvolumes:\n  mongo:\n  strapi:\n\nservices:\n  mongo:\n    image: mongo\n    restart: always\n    volumes:\n      - mongo:/data/db\n    ports:\n      - 27017:27017\n  adminmongo:\n    image: mrvautin/adminmongo\n    ports:\n      - 1234:1234\n    environment:\n      - HOST=0.0.0.0\n      - CONN_NAME=mongo\n      - DB_HOST=mongo\n      - DB_PORT=27017\n      - PASSWORD=$ADMIN_MONGO_PASSWORD\n    links:\n      - mongo:mongo\n  strapi:\n      image: <strapi registry>\n      environment:\n        DATABASE_CLIENT: mongo\n        DATABASE_NAME: strapi\n        DATABASE_HOST: mongo\n        DATABASE_PORT: 27017\n      links:\n        - mongo:mongo\n      volumes:\n        - ./app:/srv/app\n      ports:\n        - '1337:1337'\n\n\n```\n\n## 备份\n\n使用如下命令备份\n\n```shell\ndocker-compose exec -T mongo mongodump --archive --gzip --db <database> > dump.gz\n```\n\n## 还原\n\n```shell\ndocker-compose exec -T mongo mongorestore --archive --gzip < dump.gz\n```\n\n## 可视化管理 docker\n\n使用 [portainer](https://www.portainer.io/) 能够可视化管理现在运行的 docker。执行如下命令，再访问 localhost:9000，嗒嗒！以后再也不需要执行`docker ps`了。\n\n```shell\ndocker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer\n```\n\n## 可视化管理 mongodb\n\n可以使用[adminmongo](https://github.com/mrvautin/adminMongo)提供一套简单可用的 WebUI，我已经写到了 docker compose 里面了。\n\n另外`environment`里面的`PASSWORD`并不好使，已经有[issue](https://github.com/mrvautin/adminMongo/issues/166)，不过已经是 2017 年的了，最快的解决方式就是删除`config/app.json`，只需要在 portainer 里面选择`Containers > mongodb_adminmongo_1` 点击 `Edit`，修改 `Command` 并重新部署。\n\n![portainer的设置](./portainer-config.jpg)\n","collection":"blog","data":{"type":"post","category":"tech","tag":["docker","portainer","mongodb"]}},{"id":"2020/04/28/keyLemon.md","slug":"2020/04/28/keylemon","body":"\n# keyLemon 让任何一个摄像头都支持人脸登入\n\nWindows hello 是一个用一次就回不去的功能，目前我的笔记本支持指纹登入，一台平板外接了一个指纹接收器，另一台只能 PIN 码登入。显然 PIN 码用起来就不是很爽，然而这机器还是用来看书的。\n\n然而 Windows Hello 对摄像头要求很苛刻，于是我在想，有没有类似于安卓的单镜头解锁方案，KeyLemon 就是，v3 版本已经支持 Windows 10，虽然网上有评论说这软件免费版只能用 7 天，但是软件中只看到三种授权方式，basic 仅支持一张人脸和无活体检测的人脸登录，貌似这个 basic 就是免费版。\n\n实际体验，这个软件受光照影响很大，晚上录入的脸到早上就不识别了，这时输入 PIN 码依然可以登入。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["windows","facial-recognition","keyLemon"],"series":{"slug":"windows-howto","name":"Windows舒适指南"}}},{"id":"2020/05/06/spacedesk.md","slug":"2020/05/06/spacedesk","body":"\n# spacedesk 让任意一台设备成为扩展屏幕\n\n之前我有一篇[文章](/tech/2020/02/23/Mouse_without_borders让鼠标同时连接四台设备.html)，让鼠标和键盘能跨越四台 Windows，而[spacedesk](https://spacedesk.net/)则是让所有设备成为主计算机的扩展屏幕，注意，这里是所有，包括 Windows 设备和手机设备，应该是类似于 miracast 的技术，安利应用商店里的 slave 端，运行很快。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["windows"],"series":{"slug":"windows-howto","name":"Windows舒适指南"}}},{"id":"2020/05/11/WSL-Xserver.md","slug":"2020/05/11/wsl-xserver","body":"\n# WSL 下运行 Xserver 鼠标太小\n\n不太清楚是不是 HIDPI 造成的，在 VcXsrv 下面的鼠标指针及其小。解决方法只能是换一个看起来大一些的鼠标。\n\n```shell\nsudo apt-get install big-cursor\n```\n\n接下来，重命名 VcXsrv 下面的`font/misc`（比如`C:\\Program Files\\VcXsrv\\fonts\\misc)`）的`cursor.pcf.gz`为`cursor-small.pcf.gz`。\n\n然后将刚才安装在 wsl 中的`/usr/share/fonts/X11/misc/big-cursor.pcf.gz`拷贝到上面的目录下，并重命名为`cursor.pcf.gz`。\n\n重启 VcXsrv 即可。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["windows","wsl","vcxsrv"],"series":{"slug":"windows-howto","name":"Windows舒适指南"}}},{"id":"2020/08/05/Window10-action center.md","slug":"2020/08/05/window10-action-center","body":"# 解决Windows10的action center无法打开的问题\n\n最近打开平板发现任务栏右下角的事件中心无法打开了，不仅如此，连wlan、声音大小、省电中心都不能打开了，简单的查了一下，或许是因为升级之后uwp注册出错了，需要重新注册，管理模式打开powershell输入以下命令重新注册应用。\n\n```\nGet-AppxPackage | % { Add-AppxPackage -DisableDevelopmentMode -Register “$($_.InstallLocation)\\AppxManifest.xml” -verbose }\n```","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2020/12/24/Haproxy-nginx-SS.md","slug":"2020/12/24/haproxy-nginx-ss","body":"\n# Haproxy 和 nginx 做 SS 中继\n\n隔离在家最痛苦的莫过于家中网络连接 SS 总是断线，参考网上的[方案](https://sjq597.github.io/2018/05/22/ShadowSocks-Haproxy%E4%B8%AD%E7%BB%A7/)，使用国内云服务作为 TCP 转发即可。\n\n## Haproxy 配置\n\n```\nglobal\n    ulimit-n  51200\n\ndefaults\n    log     global\n    mode    tcp\n    option  dontlognull\n    timeout connect 5000\n    timeout client  50000\n    timeout server  50000\n\nfrontend ss-in\n    bind *: 国内云服务的端口\n    default_backend ss-out\n\nbackend ss-out\n    server sserver_name SS的IP:SS的端口 maxconn 20480\n\n```\n\nhaproxy 可以运行在 docker 容器里\n\n```\ndocker pull haproxy:latest\nsudo docker run -d --name haproxy_6 -v 配置文件目录:/usr/local/etc/haproxy/haproxy.cfg --restart=always -p 云服务端口:配置中的端口 haproxy:latest\n```\n\n接下来在国内的云服务安全组里面打开上面的端口即可，实测大部分应用可用，但是推特上面不能显示图片，google play 也没法更新，vmess 协议目前还不支持，这些就看我以后跟进了。\n\n## nginx 配置\n\n相比之下 nginx 更加简单，在 nginx.conf 里面增加如下内容。\n\n```\nstream {\n    server {\n        listen 云服务端口;\n        proxy_pass SS的IP:SS的端口;\n    }\n}\n```\n\n这样连 Vmess 都可以使用了，不过混淆加密功能还不好使，唉，涉及到 TLS 我就跪了。\n\n测试之后 PC 端都没问题，但是移动端配置都用不了。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["haproxy","shadowsocks"]}},{"id":"2020/12/27/Google.md","slug":"2020/12/27/google","body":"\n# 如何做代码评审\n\n这是[谷歌的代码评审标准笔记](https://google.github.io/eng-practices/review/reviewer/)。\n\n## 代码评审标准\n\n代码评审是为了提高整体代码进步而设定的。\n\n首先，要确保代码以后是可以进一步改进的。代码的评审人员也应该是代码的持有者。\n\n**_总体上，评审者应该允许能够提高总体代码健壮性的代码，即使它不够完美。_**\n\n当然也有限制，如果代码增加的特性不是整个系统想要的，尽管它多么好也要拒绝掉。\n\n评审者可以任意留下评论，如果不是很重要，请增加「Nit:」作为前缀。\n\n### 指导\n\n代码评审对开发人员了解一个语言、框架都有所帮助，留下评论是可以的，但是一定记住要留下「Nit:」作为不强制性改动的标记。\n\n### 原则\n\n- 技术事实，有数据否决的建议和个人配置。\n- 代码风格，代码风格应该和原有代码保持一致，如果源代码没有代码风格则允许提交。\n- 没有纯粹的代码风格，基本上就是个人设定。\n- 评审者应该要求提交代码和现有代码保持一致，这样不会使现有代码健康更加恶化。\n\n### 处理冲突\n\n在冲突上，评审员和代码作者应该达成一致，做好要有一次面对面会议或者线上会议。如果不能达成一致，一定记得升级到更高层次人员处理。\n\n## 应该看什么\n\n### 设计\n\n- 代码和原有代码配合如何？\n- 这段改动是基于代码层面还是库层面？\n- 和系统的其他部分结合的如何？\n- 现在是增加这个功能的最好时机吗？\n\n### 功能\n\n这段代码是否符合作者用意？是否对用户有利？此处「用户」同时指端用户和开发者。\n\n有时，如 UI 改动需要评审查看 demo。\n\n### 复杂度\n\n代码的复杂度即代码是否可以被迅速理解，其它工程师是否可以修改这一段代码。\n\n一个特别案例：过度开发。\n\n### 测试\n\n要求单元测试，或适当的端对端测试。除非紧急任务，测试必须伴随代码一并提交。\n\n确保测试正确，明确和有效。\n\n### 命名\n\n确保命名简单易懂。\n\n### 注释\n\n注释应该解释这段代码为什么存在，而不是它做什么。\n\n### 代码风格\n\n谷歌有对大部分语言提供[风格指导](http://google.github.io/styleguide/)。\n\n| 生词         |            |\n| ------------ | ---------- |\n| disincentive | 妨碍活动的 |\n| mandatory    | 强制性的   |\n| overrule     | 否决       |\n| underlying   | 基本的     |\n| consensus    | 一致同意   |\n| interaction  | 配合       |\n| appropriate  | 适当的     |\n| sensible     | 明确的     |\n","collection":"blog","data":{"type":"post","category":"tech","tag":["code-review","translate"]}},{"id":"2021/01/09/PowerShell101.md","slug":"2021/01/09/powershell101","body":"\n# Powershell 101\n\n已经打算学习 Powershell 很久了，然而工作时间使用的是 Mac，所以往往觉得 bash 已经足够了，即使 Windows 下面 WSL 和 MSYS 总能解决。但是经历了这次 ReactNative 编译失败的经验之后，我马上意识到什么叫做原生的好（尤其是在网络环境极其严苛的情况之下）。\n\n学习 Powershell 的资源相比 bash 还是比较少的，基本上也是靠社团驱动。社团驱动虽然活跃性高，出现的问题还是比较明显的，比如 bash 就有两种写法...那么 Powershell 除了本身的.Net 支持同时支持 shell 语法就更加艰难了。\n\n「Powershell 101」是微软官网推荐的书籍，其实是一次分享的幻灯片 PDF，我在网上还没有找到分享视频，不过光看文档还能了解一二。\n\n## Cmdlet\n\nCmdlet 是 Powershell 下的命令，通过「动词-名词」组成如`Get-Process`和`Get-Help`，可以通过使用`Get-Verb`获取到动词都有哪些。\n\n## 变量\n\n和 PHP 类似，powershell 变量使用\\$做标识。\n\n```powershell\n$i = 42; $i # 控制台输出42\n```\n\n同时，和 bash 不同的是，Powershell 中的命令返回的是对象。\n\n```powershell\n$count = (ls ./).count # 控制台输出当前目录文件个数\n```\n\n## profile\n\n和 bash 的 profile 类似，powershell 也有类似于`bashrc`的东西。每个系统有 4 个 profile 文件。\n\n- 每个用户的单一 powershell 端\n- 所有用户的单一 powershell 端\n- 每个用户的所有 powershell 端\n- 所有用户的所有 powershell 端\n\n## 工具\n\n安装`posh-git`来自动提示`git`和`oh-my-posh`来美化界面。\n\n```powershell\nInstall-Module posh-git -Scope CurrentUser\nInstall-Module oh-my-posh -Scope CurrentUser\n```\n\n修改`$profile`并且引入这两个包，并设定 oh-my-posh 的主题。\n\n```powershell\nImport-Module oh-my-posh\nImport-Module posh-git\nSet-Theme Robbyrussell\n```\n\n另外，系统可能禁止执行外部代码，造成上面的脚本无法执行，此时需要在管理员模式下面修改规则。\n\n```powershell\nget-executionpolicy # 可能输出 Restrictrd\nset-executionpolicy remotesigned\n```\n","collection":"blog","data":{"type":"post","category":"tech","tag":["powershell"],"series":{"slug":"windows-howto","name":"Windows舒适指南"}}},{"id":"2021/01/09/husky-Windows.md","slug":"2021/01/09/husky-windows","body":"\n# 解决 husky 在 Windows 上面无法安装的问题\n\n其实问题在于，在执行`yarn`安装依赖并处理 git hooks 的时候，Windows 的控制台会打印内容反馈，并被理解为安装失败使得整个安装过程失败了。其实已经过去了很久，但是小版本还没有解决，可以先执行`yarn --silent`忽略 husky 上面的问题。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["husky","Windows","npm","yarn"]}},{"id":"2021/01/10/AudoRelay.md","slug":"2021/01/10/audorelay","body":"\n# AudioRelay蓝牙耳机实现多设备切换的优雅方法\n\n其实在蓝牙4.0之后，蓝牙耳机已经能够实现在多个设备上面无缝切换了。但是还是有很多耳机并不支持多设备，比如我手上的红米Dots。但不妨换个方法，让多个设备的音频流输出到同意设备中，这样只需要耳机链接一台设备即可。\n\nAudioRelay就是类似这样的软件，只需让设备都在同一局域网中。然而这个软件并不完美，首先，它只是复制了音频流到手机上，计算机必须静音，否则就在外放。兼容性上面也有问题，经测试我的小米平板静音之后音频流也静音了。最后是安全性，这个软件没有密钥配置，也就是同一局域网下所有的设备都是透明的，所以最好不要在公有网络中使用这款软件。","collection":"blog","data":{"type":"post","category":"tech","tag":["bluetooth"],"series":{"slug":"windows-howto","name":"Windows舒适指南"}}},{"id":"2021/01/13/Barrier.md","slug":"2021/01/13/barrier","body":"\n# Barrier更好的多屏交互方式\n\n之前介绍过[Mouse Without Borders](https://blog.gongbushang.com/tech/2020/02/23/Mouse_without_borders%E8%AE%A9%E9%BC%A0%E6%A0%87%E5%90%8C%E6%97%B6%E8%BF%9E%E6%8E%A5%E5%9B%9B%E5%8F%B0%E8%AE%BE%E5%A4%87.html)，可以实现多台PC共享鼠标和键盘，在过去的一年里它帮了我不少忙，也有如下bug。\n\n- 长时间使用，鼠标滚轮会时常失效。\n- 和Stroke Plus使用的时候，不小心跨屏会导致stroke plus崩溃。\n- 鼠标在不同PPi的屏幕里面速度是不一样的。\n- 因为项目已经停止更新了，所以以上问题只能默默忍受。\n\n因此我更换了barrier，作为收费项目synergy的免费分支，拥有和synergy类似的兼容Mac、PC以及Linux上限达15台的多屏协同，本来是有安卓的，可惜已经停止支持了。\n\n目前看来上面的问题都已经解决了，但还要看长期使用的效果。","collection":"blog","data":{"type":"post","category":"tech","tag":["windows"],"series":{"slug":"windows-howto","name":"Windows舒适指南"}}},{"id":"2021/01/24/OK.md","slug":"2021/01/24/ok","body":"\n# OK，说说黑苹果\n\n首先，一个开发者是不是要有一台 Mac 呢？个人认为如果不是 iOS 或者 OSX 开发，一台 Mac 并不是必须的。然而我还是想要一台黑苹果，其一，过去十年对比 Windows 和 Linux，MacOS 被更多 UI 开发者所青睐；其二，Windows 和 Mac 的开发方式相对来说比较隔离，多一台 Mac 会多一个思考问题的角度。\n\n## 准备\n\n首先，如果不是新组的机器，黑苹果最好是台式机双系统，因为诸如声卡、网卡指纹锁、摄像头等硬件会因为兼容问题而不得不被放弃或者再去买个外设挂上。\n\n最重要的，CPU，一定要选择 Intel 酷睿，会轻松很多。我知道有很多 AMD 或者奔腾都黑苹果成功了，但考虑到稳定性，就算用酷睿也不能保证 100%成功，何况换到非酷睿的 CPU 上。\n\n接下来，镜像，推荐[黑锅小兵](https://blog.daliansky.net/)，下载好镜像后使用[Ether](https://www.balena.io/etcher/)烧录 U 盘，当然也可以使用别的烧录工具，试验了下这个成功率更高一些。\n\n## 安装\n\nClover 是黑苹果 UEFI 引导工具，想想以前用的比较多的引导是变色龙，不过为了踩坑少一点，就用 Clover 吧。另外镜像最好多下个旧版本，烧录好的安装盘卡在一堆加号的情况很常见，往往这些情况就是 Clover 版本太低，理论上升级 Clover 能解决，但也可能搞不定，所以手上拿着黑苹果就不要想着尝鲜了。\n\n先分好一个分区然后重启进入 U 盘引导 Clover 进入安装，有的时候点击安装提示不能安装，可以到终端里面修改到更早一点的时间再安装。\n\n## 配置 ESP 分区\n\n安装之后，进入 MacOS 依然需要借助 U 盘上的 Clover 来引导，此时需要把 U 盘上 EFI 文件夹下的 CLOVER 文件夹全部复制到机器 ESP 分区的 EFI 文件夹下。这一操作可以通过再 Mac 上面安装 Clover Configurator 来配置，同时，这个工具也可以用来修改 Clover 配置。\n\n前面说，Clover 的驱动需要保持更新，可以通过安装 Hackintool 实现。\n\n重启进入 Windows，安装 BOOTICE 来修改 UEFI 启动项，其中需要访问 ESP/EFI/CLOVER 下的 Clover.efi 文件（可能名字会不同，但一定是 efi 文件），可以使用 DISKPART 并给 ESP 分区一个盘符。\n\n新建好 CLOVER 项，把它放到第一项，重启就能进入机器的 CLOVER 了。\n\n## 安装软件\n\n### 和内网的 PC 交互\n\n前面介绍过 barrier 是可以在 mac 上面安装并实现一对鼠标键盘操作多台设备。\n\n目前 Windows 还没有右键共享文件到 Mac 的方案，考虑到我的黑苹果蓝牙和 wifi 都废了，也不能实现投屏，不过还好 mac 支持 smb 分享，也算是实现了几台设备在内网连接了。\n\n大概用了一天，最大的不适应就是 Ctrl-C 和 Cmd-C 不能互相映射了。\n\n### 科学上网\n\n目前 v2ray 支持比较好的应用是 v2rayU，我测试最新版是有问题的，可以选择早一点的版本。\n\nnvm 的镜像可以使用阿里的，不过和 Windows 不同，只需要增加环境变量即可`export NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node/`。\n\nhomebrew 可以使用[清华的源](https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/)，不过依然很卡。\n\nNPM 使用阿里的源`npm config set registry=https://registry.n pm.taobao.org/`\n\nyarn 使用阿里的源`yarn config set registry https://registry. npm.taobao.org/`\n\nAndroid Studio 使用东软的代理，`http://mirrors.neusoft.edu.cn:80`。\n\nRustup 使用清华的源`export RUSTUP_DIST_SERVER=https://mirrors.tuna.tsinghua.edu.cn/rustup`。\n\nCargo 使用中科大的源\n\n```ini\n# ~/.cargo/config\n[source.crates-io]\nregistry = \"https://github.com/rust-lang/crates.io-index\"\nreplace-with = 'ustc'\n\n[source.ustc]\nregistry = \"git://mirrors.ustc.edu.cn/crates.io-index\"\n```\n\nflutter 使用清华源`export FLUTTER_STORAGE_BASE_URL=\"https://mirrors.tuna.tsinghua.edu.cn/flutter\";export PUB_HOSTED_URL=\"https://mirrors.tuna.tsinghua.edu.cn/dart-pub\"`\n\n大概先做这么多\n\n### 问题\n\n其实问题还是很多的，除了没有无线，休眠之后往往就卡死了，另外，很多镜像都不支持虚拟化，那意味着 Docker 也不能使用。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["hackintosh"]}},{"id":"2021/01/25/A-website-that-practice-typing.md","slug":"2021/01/25/a-website-that-practice-typing","body":"\n# keybr 一个练习打字的网站\n\n感觉自己的盲打速度不行，需要一个网站练习下，[keybr](https://www.keybr.com/)是一个不错的打字网站，以一种循序渐进的方式来练习，另外还有数据统计，接下来我打算练习一个月看看能否提高。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["typing"]}},{"id":"2021/02/09/Latex cheat sheet.md","slug":"2021/02/09/latex-cheat-sheet","body":"\n# Latex cheat sheet\n\n```letax\n\\sum_{i=1}^{k+1}i\n```\n\n$$\n\\sum_{i=1}^{k+1}i\n$$\n\n```letax\n\\frac{k(k+1)}{2} + k + 1\n```\n\n$$\n\\frac{k(k+1)}{2} + k + 1\n$$\n\n```latex\n1 + \\frac{q^2}{(1-q)} + \\frac{q^6}{(1-q)(1-q^2)} + \\cdots\n=\n\\prod^{\\infty}_{j=0}\n\\frac{1}{(1-q^{5j+2})(1-q^{5j+3})}\n\\text{, for }\n\\lvert q \\rvert < 1\n```\n\n$$\n1 + \\frac{q^2}{(1-q)} + \\frac{q^6}{(1-q)(1-q^2)} + \\cdots\n=\n\\prod^{\\infty}_{j=0}\n\\frac{1}{(1-q^{5j+2})(1-q^{5j+3})}\n\\text{, for }\n\\lvert q \\rvert < 1\n$$\n\n```latex\n\\Gamma \\Delta \\Theta \\Lambda \\Xi \\Pi \\Sigma \\Upsilon \\Phi \\Psi \\Omega\n```\n\n$$\n\\Gamma \\Delta \\Theta \\Lambda \\Xi \\Pi \\Sigma \\Upsilon \\Phi \\Psi \\Omega\n$$\n\n```latex\n\\alpha \\beta \\gamma \\delta \\epsilon \\eta \\theta \\mu \\nu \\xi\n```\n\n$$\n\\alpha \\beta \\gamma \\delta \\epsilon \\eta \\theta \\mu \\nu \\xi\n$$\n\n```\n\\int u \\frac{dy}{dx} dx = uv - \\int \\frac{du}{dx}v dx\n```\n\n$$\n\\int u \\frac{dy}{dx} dx = uv - \\int \\frac{du}{dx}v dx\n$$\n\n```\n\\mathbf{V}_1 \\times \\mathbf{V}_2\n=\n\\begin{vmatrix}\n    i & j & k \\\\\n    \\frac{\\partial{X}}{\\partial{u}} & \\frac{\\partial{Y}}{\\partial{u}} & 0 \\\\\n    \\frac{\\partial{X}}{\\partial{v}} & \\frac{\\partial{Y}}{\\partial{v}} & 0 \\\\\n\\end{vmatrix}\n```\n\n$$\n\\mathbf{V}_1 \\times \\mathbf{V}_2\n=\n\\begin{vmatrix}\n    i & j & k \\\\\n    \\frac{\\partial{X}}{\\partial{u}} & \\frac{\\partial{Y}}{\\partial{u}} & 0 \\\\\n    \\frac{\\partial{X}}{\\partial{v}} & \\frac{\\partial{Y}}{\\partial{v}} & 0 \\\\\n\\end{vmatrix}\n$$\n\n```\n\\left(\n    \\frac{x^2}{y^3}\n\\right)\n```\n\n$$\n\\left(\n    \\frac{x^2}{y^3}\n\\right)\n$$\n\n```\nf(n) =\n\\begin{cases}\n    \\frac{n}{2}, \\text{if } n \\text{ is even} \\\\\n    3n + 1, \\text{if} n \\text{is odd}\n\\end{cases}\n```\n\n$$\nf(n) =\n\\begin{cases}\n    \\frac{n}{2}, \\text{if } n \\text{ is even} \\\\\n    3n + 1, \\text{if} n \\text{is odd}\n\\end{cases}\n$$\n\n```\n\\sqrt[n]{1 + x + x + x^2 + x^3 + \\ldots}\n```\n\n$$\n\\sqrt[n]{1 + x + x + x^2 + x^3 + \\ldots}\n$$\n\n```\n\\begin{pmatrix}\n    a_{11} & a_{12} & a_{13}\\\\\n    a_{21} & a_{22} & a_{23}\\\\\n    a_{31} & a_{32} & a_{33}\\\\\n\\end{pmatrix}\n```\n\n$$\n\\begin{pmatrix}\na_{11} & a_{12} & a_{13}\\\\\na_{21} & a_{22} & a_{23}\\\\\na_{31} & a_{32} & a_{33}\\\\\n\\end{pmatrix}\n$$\n\n```\n\\begin{bmatrix}\n    0      & \\cdots & 0      \\\\\n    \\vdots & \\ddots & \\vdots \\\\\n    0      & \\cdots & 0      \\\\\n\\end{bmatrix}\n```\n\n$$\n\\begin{bmatrix}\n    0      & \\cdots & 0      \\\\\n    \\vdots & \\ddots & \\vdots \\\\\n    0      & \\cdots & 0      \\\\\n\\end{bmatrix}\n$$\n","collection":"blog","data":{"type":"post","category":"tech","tag":["latex"]}},{"id":"2021/02/21/mltype.md","slug":"2021/02/21/mltype","body":"\n# mltype 一个练习打字的应用\n\n上个月安利了一个 keybr 用来练习盲打，现在已经打完每个字母了，想要尝试一下程序盲打，目前线上的有两个一个是 typing.io 另一个是 speedcoder，这两个虽然是程序打字，但体验远不及 keybr，程序已经老旧，而且收费，在网上找到了个 mltype，可以自定义打字，只是需要动手配置的比较多，这里 mark 一下，哪天有心情搞搞。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["typing"]}},{"id":"2021/03/11/Windows.md","slug":"2021/03/11/windows","body":"\n# 让 Windows 更加频繁的同步系统时间\n\n最近发现我的平板时钟不对，第一反应是主板电池没电了，可是拆开也没找到电池在哪，算了，干脆价格定时任务更新时间。\n\nWindows 下面有一个 task scheduler 可以新建定时任务，在 microsoft>Windows>Time Synchronization,需要新建两个任务`%windir%\\system32\\sc.exe start w32time task_started`和`%windir%\\system32\\w32tm.exe /resync`[参考文章](https://www.pretentiousname.com/timesync/)\n","collection":"blog","data":{"type":"post","category":"tech","tag":["windows"],"series":{"slug":"windows-howto","name":"Windows舒适指南"}}},{"id":"2021/12/29/VSCode-C-IDE.md","slug":"2021/12/29/vscode-c-ide","body":"\n# VSCode 作为 C 语言 IDE\n\n很简单，只需要添加微软的\"C/C++\"和\"Code Runner\"两个插件，本地再安装 MinGw（如果安装了 MSYS2 也可以），把 bin 文件夹添加到系统的 PATH 环境变量里面（一定是系统的不是本地的）。\n\n然后在 VSCode 设置中，给 Code Runner 添加 run in terminal，以实现输入功能。\n","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2022/03/21/Barrier-DeskDroid-Universal Control.md","slug":"2022/03/21/barrier-deskdroid-universal-control","body":"\n# Barrier 和 DeskDroid 实现苹果的 Universal Control\n\n今天被人显摆了苹果的 Universal Control 了，作为跨屏协同用了这么久的我，为啥不显摆一下我现有的桌面配置呢？\n\nDeskDroid 的最新版本是可以和 Barrier 集成的，需要在设置中选择集成到 barrier，会有提示提醒如何把现有机器配置到 barrier 的设置里。\n\n由于 DeskDroid 基于 adb，可以很简单实现 adb 的无线连接\n\n```shell\nadb devices # 展示现在有线连接的设备\nadb tcpip 5555 # 打开设备无线的5555端口，成功后可以断开有线了（如果有多台设备连接，需要用-s指定设备）\nadb connect ${DeviceIP}:5555\n```\n\n现在就可以实现全局操控了。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["windows"],"series":{"slug":"windows-howto","name":"Windows舒适指南"}}},{"id":"2022/05/14/QWERT Learner.md","slug":"2022/05/14/qwert-learner","body":"\n# QWERT Learner 练打字\n\nkeybr 被墙之后，我就琢磨换一个打字网站，最近使用了[QWERT Learner](https://qwerty.kaiyi.cool/)，很不错，还可以顺便背单词。\n\n后期我可能会 fork 这个项目加入 anki 的功能\n\n现在暂时 dict2anki 成单词卡\n","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2022/05/30/WSL2.md","slug":"2022/05/30/wsl2","body":"\n# WSL2加载虚拟硬盘\n\n在最新版的Windows11中，WSL2新增了[mount参数](https://docs.microsoft.com/zh-cn/windows/wsl/wsl2-mount-disk\n)可以加载虚拟硬盘了。\n\n依过去的经验WSL经常会更新崩溃，所以开发的时候我会把代码仓库和系统放在两个分区里，然而在Linux中操作NTFS是非常慢的，最好是新建一个Ext4的虚拟硬盘，再挂载到Linux中。\n\n在Windows的磁盘管理可以新建`.vhdx`文件（默认新建好会自动挂载，以后双击文件也可加载硬盘），然后使用Diskgen将这个磁盘分区并格式化成Ext4格式。\n\n接着在Powershell执行`GET-CimInstance -query \"SELECT * from Win32_DiskDrive\"`查看挂载的硬盘DiskPath，紧接着管理员执行`sudo wsl --mount <DiskPath> --bare`将硬盘挂载到WSL中。\n\n进入Linux里面，执行`lsblk`查看新加载的分区如sda3，新建文件夹`work`，并把这个分区挂在上去`sudo mount /dev/sda3 work`，完成。\n\nExt4的磁盘格式比NTFS快得不是一星半点，只可惜这些都只能在Windows11中实现，而且目前还没有更好的自动化实现方案。","collection":"blog","data":{"type":"post","category":"tech","tag":["windows"],"series":{"slug":"windows-howto","name":"Windows舒适指南"}}},{"id":"2022/06/14/VSCode-NeoVim.md","slug":"2022/06/14/vscode-neovim","body":"\n# 从VSCode到NeoVim\n\n最近Github的Atom宣布暂停更新了，这让我想起来现在的VSCode就如它的老对手一样卡...\n没错，换成Ext4分区之后WSL的开发速度快了很多，但还是能够感觉到卡顿，所以最近几天就折腾起来NeoVim了。\n\n具体的配置我就不多说了，因为网上的内容实在太多，学习的话可以参考[Neovim 配置实战：从 0 到 1 打造自己的 IDE](https://github.com/nshen/learn-neovim-lua)，入门足够了。\n\n目前我的配置是[nvim-config](https://github.com/gongbaodd/nvim-config)是从别人那里fork出来的。\n\n现在的NeoVim已经all in lua了，这让我怀念起来玩饥荒的美好时光，哈哈\n","collection":"blog","data":{"type":"post","category":"tech","tag":["vim"]}},{"id":"2022/06/20/Makefile.md","slug":"2022/06/20/makefile","body":"\n# 学习使用 makefile\n\nMakefile其实一直都用过，只是没有系统学习一下，也从未遇到过要从头写一个的机会。\n\n这个[链接](https://makefiletutorial.com/)很详细了，抽出一点时间看了下。\n\n","collection":"blog","data":{"type":"post","category":"tech","tag":["makefile"]}},{"id":"2022/06/29/kindle.md","slug":"2022/06/29/kindle","body":"\n# 破解 kindle\n\n据说手上的 kindle 还有两年就不能服役了，果断选择把它破解掉，破解的方式是主要参照[书伴](https://bookfere.com/post/970.html)。\n\n越狱成功后可以参考[此文](https://bookfere.com/post/311.html)安装插件，试用了 Koreader，比 kindle 原生的浏览器好用太多了，File Browser 可以搭建了本地 http 服务实现局域网传文件。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["kindle"]}},{"id":"2022/07/05/CMake.md","slug":"2022/07/05/cmake","body":"\n# 学习 CMake\n\n学习了 Makefile 之后自然开始学习 CMake，网上找到了一个[例子](https://github.com/ttroy50/cmake-examples)有一些老了，但是还是挺有用的。\n\n里面包括使用 boost 和 catch2 以及 GoogleTest 做单元测试，还有包装 deb 以及使用 conan 进行包管理的例子。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["CMakeFile"]}},{"id":"2022/07/27/wxWidgets.md","slug":"2022/07/27/wxwidgets","body":"\n# 在学习大概一周的 wxWidgets 之后，我决定放弃了\n\n之前我冲浪的时候看到了[这篇博客](https://zetcode.com/gui/wxwidgets)，一下子勾起了我关于古早味的 UI 开发的兴趣，照着里面的教程，在 Linux 下面学习很顺利，唯一小坑就是 Ubuntu-22.04 里面的`libwxgtk3.0-dev`改名为`libwxgtk3.0-gtk3-dev`，另外还需要设置环境变量`export wxWidgets_ROOT_DIR=/usr/lib/x86_64-linux-gnu/wx`。\n\n然而到了 Windows 下面就没有那么顺利了，当然，我个人反思一下，如果使用 MSYS2 或者 mingw，虽然慢点，但应该和 Ubuntu 下面差不多，然而，想要尝试顺滑编程体验的我最先选择 VSCode + CMake + conan + ninja 作为技术栈。\n\n第一个坑，conan 的官方仓库没有 wxWidgets，小问题我马上找到了 bincrafters 仓库 https://bincrafters.jfrog.io/artifactory/api/conan/public-conan。配置好发现没有支持VS2019的x64二进制文件......好说，执行`conan install --build-missing`，后面发现编译不成功，少一堆依赖。\n\n算了，编译那么大的项目比较麻烦，官网给了直接下载二进制包的方法啊，配置好`wxWidgets_ROOT_DIR`，执行 cmake 一直提醒 find_package(wxWidgets)不成功，我几乎把[文档](https://docs.wxwidgets.org/trunk/overview_cmake.html)里面的所有变量都处理了个遍，就是不行。\n\n好吧，可能是技术栈的问题，我看大部分用 Windows 的都是 VS2019 开发，于是把技术栈改成 VS2019+vcpkg，别说各种帮助方法，如 wxPuts 都能使用了，可 GUI 编译不过。\n\n寻思这既然 vcpkg 都能编译过去了，那我直接把源文件当成 subdirectory，用之前的技术栈不是也能成？果然也是 GUI 编译不通过。\n\n太难过了，古早味的跨平台 GUI 开发真辛苦...\n","collection":"blog","data":{"type":"post","category":"tech","tag":["WxWidgets"]}},{"id":"2022/07/31/SwiftUI.md","slug":"2022/07/31/swiftui","body":"\n# 短暂尝试 SwiftUI\n\n周围吹 SwiftUI 的人太多了，而且手上刚好有台黑苹果就一直想试一试。\n\n其实受伤的黑苹果挺卡的，所以更希望不使用 XCode，而是 vscode 远程编程，也确实有人尝试了，[这里是他的 demo](https://www.alwaysrightinstitute.com/tows-ios/)。\n\n尝试过这段代码，很遗憾要求至少 MacOS 11，不能编译成功，算了以后有机会再事先吧。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["SwiftUI"]}},{"id":"2022/08/11/OpenGL-tutorial.md","slug":"2022/08/11/opengl-tutorial","body":"\n# 几个 OpenGL 的 tutorial\n\nOpenGL 和 Rust 算是我一直在学习，但一直没办法实际使用的技术了。\n\n[Rust and OpenGL from scratch](http://nercury.github.io/rust/opengl/tutorial/2018/02/08/opengl-in-rust-from-scratch-00-setup.html) 这是一篇讲 Rust 结合 OpenGL 的博客，照着操作下去，主要的感觉就是 unsafe 太多了，网上几乎所有的 OpenGL 教程都基于[LearnOpenGL](https://learnopengl-cn.github.io/)来做，这是一篇中文译本，非常值得细看。\n\n今天我还会再看一下 Vulkan，希望里面的 unsafe 的部分不要太多。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["OpenGL"]}},{"id":"2022/08/17/Rust.md","slug":"2022/08/17/rust","body":"\n# Rust 实现的几个排序算法\n\n## 冒泡排序\n\n$O(n^2)$ 稳定排序\n\n选择每个元素和后面的作比较，如果前面的元素比后面的大，就交换两个元素的位置。\n\n```rust\nfn bubble_sort<T: Ord>(arr: &mut [T]) {\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                arr.swap(i, j);\n            }\n        }\n    }\n}\n```\n\n## 插入排序\n\n$O(n^2)$ 稳定排序\n\n假定只有两个元素并排好序，每次再插入新的元素，直到全部元素都插入。\n\n```rust\nfn insert<T: Ord>(arr: &mut [T]) {\n    for i in 1..arr.len() {\n        let mut j = i;\n        while j > 0 && arr[j] < arr[j-1] {\n            arr.swap(j, j-1);\n            j -= 1;\n        }\n    }\n}\n```\n\n## 快速排序\n\n期望$O(n\\log{n})$，最坏情况$O(n^2)$，不稳定排序\n\n选中一个元素，把小于它的元素放到左边，再把大于它的放到右边，再继续处理两边数据。\n\n```rust\nfn quick<T:Ord>(arr: &mut [T]) {\n    _quick(arr, 0, (arr.len() - 1) as isize);\n}\n\nfn _quick<T:Ord>(arr: &mut [T], start: usize, end: isize) {\n    if start > end {\n        return;\n    }\n\n    let pivot = partition(arr, start, end as isize);\n    _quick(arr, start, (pivot) as isize - 1);\n    _quick(arr, pivot + 1, end);\n}\n\nfn partition<T:Ord>(arr: &mut [T], mut low: usize, mut high: usize) -> usize {\n    let pivot = 0;\n\n    loop {\n        if low < high && data[low] < pivot {\n            low += 1;\n        }\n        data.swap(low, high);\n\n        if low < high && data[high] > pivot {\n            high -= 1;\n        }\n        data.swap(low, high);\n\n        if low == high {\n            break;\n        }\n    }\n\n    low\n}\n```\n\n## 归并排序\n\n$O(n\\log{n})$ 稳定排序\n\n将两个有序数组合并为一个有序数组\n\n```rust\nfn merge<Ord:T>(arr: &mut [T]) {\n    let length = arr.len();\n    let middle = length / 2;\n\n    if length > 1 {\n        let a = arr[0..middle];\n        let b = arr[middle..length];\n        merge(a);\n        merge(b);\n\n\n    }\n}\n\nfn sort<Ord: T>(a: &[T], b: &[T], arr: &mut[T]) {\n    let mut ia = 0;\n    let mut ib = 0;\n    let mut i = 0;\n\n    while ia < arr.len() && ib < arr.len() {\n        if a[ia] < b[ib] {\n            data[i] = a[ia];\n            ia += 1;\n        } else {\n            data[i] = b[ib];\n            ib += 1;\n        }\n        i += 1;\n    }\n\n    if ia < arr.len() {\n        data[..i].copy_from_slice(&a[ia..]);\n    }\n\n    if ib < arr.len() {\n        data[..i].copy_from_slice(&b[ib..]);\n    }\n}\n```\n\n## 希尔排序\n\n$O(n\\log^2{n})$不稳定排序\n\n升级版的插入排序，每隔一个 gap 进行一次排序，直到 gap 缩到 1。\n\n```Rust\nfn shell<T: Ord>(arr: &mut [T]) {\n    let length = arr.len();\n    let mut gap = length / 2;\n\n    while gap > 0 {\n        for i in gap..length {\n            let mut j = i;\n            while j > gap & data[j] < data[j-gap] {\n                data.swap(j, j-gap);\n                j -= gap;\n            }\n        }\n        gap /= 2;\n    }\n}\n```\n\n## 堆排序\n\n$O(n\\log{n})$不稳定排序\n\n将数组转换成大顶堆，把作为根的最大值排到数组最后，再去除最大值重新排序。\n\n```Rust\nfn heap(data: &mut Vec<i32>) {\n    if data.len() < 2 {\n        return ;\n    }\n\n    // build one max heap\n    let last_root = (data.len() + 2) / 2;\n    for root in (0..=last_root).rev() {\n        to_max_heap(data, root, data.len() - 1);\n    }\n\n    // replace the first element(max element) to the last\n    // make max heap using the other elements\n    for last in (1..data.len()).rev() {\n        data.swap(0, last);\n        to_max_heap(data, 0, last-1);\n    }\n}\n\nfn to_max_heap(data: &mut Vec<i32>, mut root: usize, last: usize) {\n    loop {\n        let left = root * 2 + 1;\n        let right = left + 1;\n        let max_child;\n\n        if left > last {\n            break;\n        }\n\n        if right > last {\n            max_child = left;\n        } else {\n            max_child = if data[right] > data[left] {\n                right\n            } else {\n                left\n            }\n        }\n\n        if data[max_child] > data[root] {\n            data.swap(max_child, root);\n        }\n\n        root = max_child;\n    }\n}\n```\n\n另外还有很多排序算法参考[https://github.com/TheAlgorithms/Rust/tree/master/src/sorting](https://github.com/TheAlgorithms/Rust/tree/master/src/sorting)\n\n## bogo 排序\n\n$O(n\\times n!)$\n\n随机排列直到排序完成\n\n## 桶排序(Bucket Sort)\n\n$O(n)$ 稳定排序\n\n先对元素分类，如 0-10，10-20...然后在每个桶中进行排序\n\n## 鸡尾酒排序(cocktail Sort)\n\n$O(n^2)$ 稳定排序\n\n冒泡排序的变形，先向上冒泡，再进行一次下沉，是两个方向的冒泡排序。\n\n## 梳排序(Comb sort)\n\n$O(n\\log{n})$ 不稳定排序\n\n用希尔排序的方法进化冒泡排序，衰减值默认选 1.3 效率最高\n\n## 计数排序\n\n$O(n+k)$ 稳定排序\n\n新建一个 k 元素的计数数组，k 为排序数组的取值空间，有值的计数数组键值就是排序结果。\n\n## 基数排序(Radix sort)\n\n$O(k\\cdot n)$\n\n按照个位、十位、百位...排序\n\n## Tim sort\n\n长度小于 64 的数组进行二分插入排序，大于 64 的数组进行归并排序，归并排序在比较大于 minrun 时直接对接数组。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["algorithm","Rust"]}},{"id":"2022/08/24/Astro.md","slug":"2022/08/24/astro","body":"\n# Astro 算是比较终极状态的前端框架了\n\n这几天刷油管发现都在推荐一个 Astro 的框架，这算是一个比 React、Vue 更高一维度的框架，\n它可以使用目前已知的主流前端框架作为渲染器生成静态页面，同时可以把页面中需要交互的部分以「岛」的形式添加到页面里。\n\n更有趣的，同一个项目可以接受不同的框架，相比于 Next、Gatsby 等，它看起来是更加简单易用的。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["astro","js"]}},{"id":"2022/08/27/Ziglang.md","slug":"2022/08/27/ziglang","body":"\n# 试用 Zig\n\n最近 bun 大火，带动一个语法看起来很像 JS 的语言 Zig 受到关注。听了 Devtools 播客里面的推荐，我觉得可以试用一下。\n\nZig 官网两个学习链接[ziglearn](https://ziglearn.org/)和[ziglings](https://github.com/ratfactor/ziglings)很有帮助，这个语言的学习曲线远没有 Rust 那么陡，甚至可以说，比 C 简单。可以说 Zig 就是披着高级语言语法外衣的 C 语言，而根据官方文档的说法，Zig 的编译器确实可以直接编译 C。\n\n提到语言安全，比较多提的是类型安全和内存安全。类型在 Zig 中只有编译环境使用，官方介绍 Zig 没有宏语言，实际使用中其实是有的，只不过宏语言用的也是 Zig 语法，前面加上了 comptime 关键字，它的泛型写法也利用了编译时可编程的特点。个人觉得使用的时候会混淆，但是教程里面表示用习惯了就不会...\n\n对比 Golang 的垃圾回收和 Rust 的借用机制，Zig 是完全不管内存安全的，跟 C 类似，想要操作堆内存，要新建 allocator，好在利用 defer 关键词能让回收工作在代码里面看起来不是那么难懂。\n\nasync 几乎和 JS 一模一样，用起来感觉是 JS 里面 generator 和 async 的合体版（但它不是迭代器），感觉 JS 用户体验是无缝的。\n\n个人很推荐 Zig，是一个完全新味道的语言。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["zig"]}},{"id":"2022/09/08/Traversing-a-binary-tree.md","slug":"2022/09/08/traversing-a-binary-tree","body":"\n# 遍历二叉树\n\n遍历二叉树其实也不难，就是利用栈的思维实现遍历挺有意思的，另外在写迭代器的时候还会用的 Rust 的生命周期，刚好能够对 Rust 的生命周期有更多的理解。\n\n## 遍历方法\n\n- 先序遍历，根左右\n- 中序遍历，左根右\n- 后序遍历，左右根\n- 按层遍历\n\n先序遍历，先把跟压入栈，执行 next 出栈取值，并将右子树和左子树压入栈，直到栈空，返回 None。\n\n```Rust\nstruct TreeIter<'tree> {\n    order: Order,\n    stack: Vec<&'tree Tree>,\n}\n\nimpl<'tree> TreeIter<'tree> {\n    pub fn new(tree: &Tree) -> TreeIter {\n            TreeIter {\n                stack: vec![tree],\n                order,\n            }\n    }\n}\n\nimpl<'tree> Iterator for TreeIter<'tree> {\n    type Item = String;\n    fn next(&mut self) -> Option<Self::Item> {\n        if self.stack.is_empty() {\n            return None;\n        }\n\n        let item = self.stack.pop().unwrap();\n\n        if item.right.is_some() {\n            self.stack.push(item.right.as_ref().unwrap());\n        }\n\n        if item.left.is_some() {\n            self.stack.push(item.left.as_ref().unwrap());\n        }\n\n        Some(item.value.to_owned())\n    }\n}\n```\n\n中序遍历，先把根的左手边按节点拆成几棵没有左子树的树压入栈，执行 next 的时候逐一弹出，如果弹出的子树有右子树，把右子树也拆成没有左子树的子树压入栈。\n\n```Rust\nstruct TreeIter<'tree> {\n    order: Order,\n    stack: Vec<&'tree Tree>,\n}\n\nimpl<'tree> TreeIter<'tree> {\n    pub fn new(tree: &Tree) -> TreeIter {\n        let mut iter = TreeIter {\n            stack: vec![tree],\n            order,\n        };\n\n        while let Some(node) = &iter.stack.last().unwrap().left {\n            iter.stack.push(node);\n        }\n\n        iter\n    }\n}\n\nimpl<'tree> Iterator for TreeIter<'tree> {\n    type Item = String;\n    fn next(&mut self) -> Option<Self::Item> {\n        if self.stack.is_empty() {\n            return None;\n        }\n        let item = self.stack.pop().unwrap();\n        if item.right.is_some() {\n           self.stack.push(item.right.as_ref().unwrap());\n              while let Some(node) = &self.stack.last().unwrap().left {\n                  self.stack.push(node);\n              }\n        }\n\n        Some(item.value.to_owned())\n    }\n}\n```\n\n后序遍历，相比于前两个准备工作多一些，需要两个栈，第一个栈按照先序遍历一样压栈，不同的是，先序遍历为了先出栈左子树（根左右）而先压栈右子树，这里要先压栈左子树。第一个栈的出栈元素直接压入第二个栈。执行 next 时，直接从第二个栈出栈即可。\n\n```Rust\nstruct TreeIter<'tree> {\n    order: Order,\n    stack: Vec<&'tree Tree>,\n}\n\nimpl<'tree> TreeIter<'tree> {\n    pub fn new(tree: &Tree) -> TreeIter {\n            let mut iter = TreeIter {\n                stack: vec![],\n                order,\n            };\n            let mut stack = vec![tree];\n            while !stack.is_empty() {\n                let node = stack.pop().unwrap();\n                iter.stack.push(node);\n                if node.left.is_some() {\n                    stack.push(node.left.as_ref().unwrap());\n                }\n                if node.right.is_some() {\n                    stack.push(node.right.as_ref().unwrap());\n                }\n            }\n            iter\n    }\n}\n\nimpl<'tree> Iterator for TreeIter<'tree> {\n    type Item = String;\n    fn next(&mut self) -> Option<Self::Item> {\n        if self.stack.is_empty() {\n            return None;\n        }\n\n        let item = self.stack.pop().unwrap();\n        Some(item.value.to_owned())\n    }\n}\n```\n\n按层遍历，就是把每一层的节点按层压入栈\n\n```Rust\nstruct LevelIter<'tree> {\n    stack: Vec<Vec<&'tree Tree>>,\n}\nimpl<'tree> LevelIter<'tree> {\n    pub fn new(tree: &'tree Tree) -> LevelIter {\n        let mut iter = LevelIter {\n            stack: vec![vec![tree]],\n        };\n\n        loop {\n            let last_row = iter.stack.last().unwrap();\n            let mut row: Vec<&'tree Tree> = vec![];\n            last_row.iter().for_each(|&node| {\n                if node.left.is_some() {\n                    row.push(node.left.as_ref().unwrap());\n                }\n\n                if node.right.is_some() {\n                    row.push(node.right.as_ref().unwrap());\n                }\n            });\n\n            if row.is_empty() {\n                break;\n            }\n\n            iter.stack.push(row);\n        }\n\n        iter.stack.reverse();\n\n        iter\n    }\n}\n\nimpl<'tree> Iterator for LevelIter<'tree> {\n    type Item = Vec<String>;\n    fn next(&mut self) -> Option<Self::Item> {\n        self.stack\n            .pop()\n            .map(|row| row.iter().map(|&tree| tree.value.to_owned()).collect())\n    }\n}\n```\n\n所有的迭代器语法里面都有个类似于泛型的`<'tree>`，这里就是 Rust 的生命周期，每一个迭代器都有一个自身的生命周期和对应的二叉树的生命周期，这里需要向编译器指明这个对象有两个生命周期，以及哪些变量的生命周期不同。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["algorithm","Rust"]}},{"id":"2022/09/08/kmp.md","slug":"2022/09/08/kmp","body":"\n# KMP 匹配算法\n\n要从一个字符串 ababcabcacbababcac 中查中一个片段如 abcac 可以使用 KMP 算法。\n\nKMP 算法，简单来说就是先从要匹配的字符串中找到重复的字缀，并将这些字缀标记跳过的字数以做到匹配时剪掉不许匹配的次数。\n\n- a，首位和末尾没有重复即为 0\n- ab，首位和末尾没有重复即为 0\n- abc，首位和末尾没有重复即为 0\n- abca，首位和末尾有一位重复 a，记为 1\n- abcac，首位和末尾没有重复即为 0\n\n```js\nvar next = ArrayList(usize).init(allocator);\ndefer next.deinit();\n\nfor (word) |_, inext| {\n     if (inext == 0) {\n         try next.append(0);\n         continue;\n    }\n\n     var imatched = next.items[inext - 1];\n     while (imatched > 0 and word[imatched] != word[inext]) {\n            imatched = next.items[imatched - 1];\n     }\n\n     if (word[imatched] == word[inext]) {\n        try next.append(imatched + 1);\n     } else {\n         try next.append(imatched);\n     }\n}\n```\n\n得到匹配列表为 00010，这里的数字对应每个字母的序号 01234，假设匹配长字符串的时候刚好匹配到 abcac 的时候（第五位）没有匹配上，就看`c`前面的字符`a`对应的匹配值，这里是 1，指的可以从字符串中序号为 1 的字符，这里是`b`，继续匹配。\n\n```js\n    var iword: usize = 0;\n    for (str) |c, istr| {\n        while (c != word[iword] and iword > 0) {\n            iword = next.items[iword - 1];\n        }\n\n        if (c == word[iword]) {\n            iword += 1;\n        }\n\n        if (iword == word.len) {\n            try res.append(istr - iword + 1);\n            iword = next.items[iword - 1];\n        }\n    }\n```\n","collection":"blog","data":{"type":"post","category":"tech","tag":["algorithm","zig"]}},{"id":"2022/09/09/OpenGL.md","slug":"2022/09/09/opengl","body":"\n# OpenGL 画个三角\n\n这是上个月打算看的教程[learnopengl-cn.github.io](https://learnopengl-cn.github.io/)，真的是非常良心，完全搬运的话感觉没意义，这里做一下笔记好了。\n\n三个主要的对象\n\n- 顶点数组对象 VAO\n- 顶点缓冲对象 VBO\n- 元素缓冲对象 EBO\n\n这三个对象都是用来描述显存的，每一个 VAO 对应一个图形，VBO 是这个图形的点的数组，因为图形按照三角形拼接的，如果只使用 VBO 会多出许多重复的点，EBO 就是为这些重复的点做索引。\n\n```C++\n// ..:: 初始化代码 :: ..\n// 1. 绑定顶点数组对象\nglBindVertexArray(VAO);\n// 2. 把我们的顶点数组复制到一个顶点缓冲中，供OpenGL使用\nglBindBuffer(GL_ARRAY_BUFFER, VBO);\nglBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);\n// 3. 复制我们的索引数组到一个索引缓冲中，供OpenGL使用\nglBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);\nglBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);\n// 4. 设定顶点属性指针\nglVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);\nglEnableVertexAttribArray(0);\n\n[...]\n\n// ..:: 绘制代码（渲染循环中） :: ..\nglUseProgram(shaderProgram);\nglBindVertexArray(VAO);\nglDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);\nglBindVertexArray(0);\n```\n","collection":"blog","data":{"type":"post","category":"tech","tag":["OpenGL"]}},{"id":"2023/01/09/Install-Clash-On-Mi-Route.md","slug":"2023/01/09/install-clash-on-mi-route","body":"\n# Install Clash on RedMi AX5\n\nI got a Quest 2 this year, that means my router needs to connect Facebook. By following [this URL](https://qust.me/post/hong-mi-ax5xiao-mi-ax1800-jie-suo-sshoran-zhuang-shi-yong-shellclash-jiao-cheng/).\n\n- First, downgrade to v1.0.26, and stop updating.\n- get ssh permission\n- install clash\n","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2023/02/27/WSA-on-Win10.md","slug":"2023/02/27/wsa-on-win10","body":"\n# WSA on win10\n\nWith the help of [WSAPatch](https://github.com/cinit/WSAPatch), I can install android apps on windows 10. But it still needs 8 physical RAMs.","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2023/03/09/RiftCat-a-cardboard-VR-headset.md","slug":"2023/03/09/riftcat-a-cardboard-vr-headset","body":"# RiftCat: a cardboard VR headset\n\nI used to have a cardboard VR headset. It is always a cheap and fun way to experience VR. I think there should one solution to use it to experience steam VR. By using RiftCat, you can use your phone to experience steam VR. But only for 5min. However, enough for commercial VR experience","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2023/04/10/13th-week-grid-layout.md","slug":"2023/04/10/13th-week-grid-layout","body":"\n# 13th Week: Grid Layout\n\nI finally fineshed the js coding questions in BFE.com. The question about grid-auto-flow is tricky.\n\nThis week I will get a new GPU. A robit dial which is a cheap alternative for surface dial. I guess it is made following [DIY Surface Dial](https://github.com/jfedor2/radial-controller).\n","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2023/05/03/reactive-in-GUIs.md","slug":"2023/05/03/reactive-in-guis","body":"\n# Reactive in GUIs\n\n[Jetpack Compose](https://developer.android.com/jetpack/compose/documentation)\n\n```kotlin\nval mutableStateOf = remember { mutableStateOf(default) }\nvar value by remember { mutableStateOf(default) }\nval (value, setValue) = remember { mutableStateOf(default) }\n```\n\nCan use Kotlin's [Flow](https://developer.android.com/kotlin/flow) to build reactive UI.\n\nBTW, there is a [material theme builder](https://m3.material.io/theme-builder#/custom) to build UI theme.\n\n[Flutter](https://docs.flutter.dev/)\n\n```dart\n// in a widget\nclass Home extends StatefulWidget {\n    @override\n    State<Home> createState() => _HomeState();\n}\nclass _HomeState extends State<Home> {\n    int _counter = 0;\n    @override\n    Widget build(BuildContext context) {\n        return Button(\n            onPressed: () => setState(() => _counter++),\n            child: Text('$_counter'),\n    }\n}\n```\n\n```dart\n// communication between widgets\nvoid main() {\n  runApp(\n    ChangeNotifierProvider( // Provider\n      create: (context) => CartModel(),\n      child: const MyApp(),\n    ),\n  );\n}\n\nclass CartModel extends ChangeNotifier {\n  var current = WordPair.random();\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n  @override\n  Widget build(BuildContext context) {\n    var appState = context.watch<CartModel>(); // Consumer\n\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: const Text('Provider demo')),\n        body: const MyCart(),\n      ),\n    );\n  }\n}\n\nreturn Consumer<CartModel>( // Consumer\n  builder: (context, cart, child) {\n    return Text('Total price: ${cart.totalPrice}');\n  },\n);\n```\n\n[SwiftUI](https://developer.apple.com/documentation/swiftui)\n\n```swift\n@State private var username = \"\"\n```\n\nshare data between views\n\n```swift\n// Our observable object class\nclass GameSettings: ObservableObject {\n    @Published var score = 0\n}\n\n// A view that expects to find a GameSettings object\n// in the environment, and shows its score.\nstruct ScoreView: View {\n    @EnvironmentObject var settings: GameSettings\n\n    var body: some View {\n        Text(\"Score: \\(settings.score)\")\n    }\n}\n\n// A view that creates the GameSettings object,\n// and places it into the environment for the\n// navigation stack.\nstruct ContentView: View {\n    @StateObject var settings = GameSettings()\n\n    var body: some View {\n        NavigationStack {\n            VStack {\n                // A button that writes to the environment settings\n                Button(\"Increase Score\") {\n                    settings.score += 1\n                }\n\n                NavigationLink {\n                    ScoreView()\n                } label: {\n                    Text(\"Show Detail View\")\n                }\n            }\n            .frame(height: 200)\n        }\n        .environmentObject(settings)\n    }\n}\n```\n\n```swift\n@ObservedObject var user: User\n```\n\n[Blazor](https://learn.microsoft.com/en-us/aspnet/core/blazor/?view=aspnetcore-7.0)\n\nusing Blazor in MAUI is available now, though it is not stable yet.\n\n```shell\ndotnet new install BlazorBindings.Maui.Templates\n```\n\n```razor\n@page \"/bind\"\n\n<p>\n    <input @bind=\"inputValue\" />\n</p>\n\n<p>\n    <input @bind=\"InputValue\" />\n</p>\n\n<ul>\n    <li><code>inputValue</code>: @inputValue</li>\n    <li><code>InputValue</code>: @InputValue</li>\n</ul>\n\n@code {\n    private string? inputValue;\n\n    private string? InputValue { get; set; }\n}\n```\n\nSince it is not stable yet, I did not dig into it.\n","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2023/05/05/use-stablediffusion-to-paint-with-specific-face.md","slug":"2023/05/05/use-stablediffusion-to-paint-with-specific-face","body":"\n# use statblediffusion to paint with specific face\n\ninstall python 3.10(not 3.11). clone the project;\n\n```bash\ngit clone https://github.com/AUTOMATIC1111/stable-diffusion-webui.git\n\n./webui.bat --enable-insecure-extension-access\n```\n\ninstall dreambooth extension and use some pictures to train the mode. use [Birme](https://www.birme.net/) to cut image in batch.\n","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2023/05/09/AImoji.md","slug":"2023/05/09/aimoji","body":"\n# AImoji\n\nyou can download the model of [AImoji](https://civitai.com/models/23111/aimoji-memoji-model), put in stable diffusion's model folder. Using `memoji of xxx` as prompt to generate a memoji.\n\nBut I want to use it generating my photo, I need to merge my old model with it. That means I have to use extra 4GB for the new model. But I can make a Lora. Using [Kohya's GUI](https://github.com/bmaltais/kohya_ss), with the AImoji model, I can simply make one Lora, then put it to the statble diffusion's Lora folder.\n\nusing Lora prompt, now I can combine two model without retraining.\n","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2023/05/17/MRTK-on-quest.md","slug":"2023/05/17/mrtk-on-quest","body":"# MRTK on quest\n\n1. create a 3D project on Unity Editor\n\n2. switch platform in build settings\n\n3. import XR plugin management from package manager\n\n4. import MRTK example and MRTK foundation from MixedRealityFeatureTool(downloaded from Microsoft)\n\n5. choose scene in MRTK example, change the profile into quest\n\n6. build and run\n\ncheck [this](https://www.youtube.com/watch?v=wSPXTRYxq9A&list=PLQMQNmwN3FvzWQ1Hyb4XRnVncvCmcU8YY&ab_channel=DilmerValecillos) and [this](https://www.youtube.com/watch?v=rb5GZVDREdk&ab_channel=DilmerValecillos) videos for details","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2023/06/09/thought-about-wear-os.md","slug":"2023/06/09/thought-about-wear-os","body":"# Thought about Wear OS\n\nRecently I watched [a Youtube video](https://www.youtube.com/watch?v=BUWZJuIqC2I&t=67s) about making a training tracker using Edge Impulse. Surprisingly an ESP32 can do so many ML things. That made me think why not implement it on Wear OS?\n\nI used to wear pebble in 2015, Gz it's been almost 10 years. After pebble ended its service, I stried serveral Chinese smart watches, no app stores. I like round watch, like moto 360. But it was too expensive. Three years ago, I bought it in only 200 yuan. Tried to develop flutter on it. Sadly I the power button was broken, so it's been useless for a long time.\n\nToday, I tried to wake it and using adb to trigger power button, it works!\n\n```shell\nadb shell input keyevent 4\n```\n\nI installed [Hankmi Appstore](https://hankmi.com/), found an APP to use float button as physical power button. Now I can develope a Wear APP on Android 7. Hooray!\n\nSome sad thoughts, Google didn't drop the wearOS support in China. A Chinese company is maintaining. And it is horrible. Most developer are middle school students, and they earn money by donations.\n\nSince I'm using an iPhone, an Apple Watch is the first choice. But I still want a round watch. Like Samsung Galaxy Watch 5. Luckily I have a Samsung tablet. What if I want to connect iPhone to my watch? Maybe adb can help, ha, a great idea!","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2023/11/05/growgen-rebuild-todos.md","slug":"2023/11/05/growgen-rebuild-todos","body":"\n# GrowGen.xyz Rebuild Todos\n\n- Home Page Profile\n- Home Page Octopus Menu\n- Home Page Tags background\n- Header\n- Footer\n- Blog Page Profile\n- Blog Page List\n- Blog Page Selector\n","collection":"blog","data":{"type":"post","category":"tech"}}]}