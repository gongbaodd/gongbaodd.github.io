{"posts":[{"id":"2023/06/04/22nd-week-use-an-utra-wide-screen.md","slug":"2023/06/04/22nd-week-use-an-utra-wide-screen","body":"# 22nd Week: Use an ultra wide screen\n\nI added web sync on qwerty-learner, it's now available on [this site](https://qwerty-ochre.vercel.app/).\n\nThis week I bought a lot fans to nake sure my devices can survive the summer. I occasionaly found out that with an ultra wide screen can pick up my efficency. I always wanted to split the terminal window from vscode, with an wide screen, that's not a problem any more. So I found [CRU - custom resolution utility](https://www.monitortests.com/forum/Thread-Custom-Resolution-Utility-CRU). It adds new resolution to the graphic settings, like 2880x900.\n\nRarbg was down this week, guess I can not watch many movies for some time.","collection":"blog","data":{"type":"post","category":"plan"}},{"id":"2023/06/11/23rd-week-book-computer-deep-dive.md","slug":"2023/06/11/23rd-week-book-computer-deep-dive","body":"\n# 23rd Week: Book computer deep dive\n\nI read 计算机底层的秘密, it's literally a book like CSAPP, but has more technology and less caculations.\n\nDifferences between processed, threads, coroutins.\n\nCISC and RISC， how CISI using hyper-threading to defeat RISC. That it is actually a RISC with multiple assembly lines in the chip.\n\nHow to use memory especially in multiple cores.\n\nSaturday, I tried to wake up my old moto 360 watch.\n\nSunday, I learnt some swift language grammar from swift 100 days. I also tried kotlin, I doubt that some one can remember so manny language sugars.\n","collection":"blog","data":{"type":"post","category":"plan"}},{"id":"2023/06/19/24th-week-vscode.md","slug":"2023/06/19/24th-week-vscode","body":"# 24th week vscode\n\n## Wheel settings\n\nThis week I tried to make my RabbitDial, a cheap alternative to Surface Dial, work with Visual Studio Code. I learnt a lot about how to make a VScode extension. But it turns out I can just simply add some keyboard bindings on the wheel settings. This [link](https://learn.microsoft.com/en-us/windows/apps/design/input/windows-wheel-interactions) is about these settings. And this [link](https://learn.microsoft.com/en-us/uwp/api/Windows.UI.Input.RadialController?view=winrt-22621) talks about develop an C# APP.\n\n[These](https://github.com/microsoft/vscode-extension-samples) are the samples about making a VSCode extension.\n\nAnd there are some cool surface dial compatible open-source projects. [X-Knob](https://github.com/SmallPond/X-Knob). The [code](https://github.com/SmallPond/X-Knob) about sending Dial BLE signals might be useful.\n\n## TODOs on Rust\n\nThis week I bumped to an idea about graphql over FFI. I found some one published a [post](https://zhuanlan.zhihu.com/p/611516673) on ZhiHu.\n\nFound a document about how to use Rust on Android, [Link](https://google.github.io/comprehensive-rust/android.html).\n\n## Three.js or Babylon.js\n\nI checked a new [tutorial](https://sbcode.net/react-three-fiber/) about R3F. R3F has a component project called [drei](https://github.com/pmndrs/drei). But still, I think babylon.js has more build tools. And more [features](https://doc.babylonjs.com/features).\n\nI has been following a [guide project](https://doc.babylonjs.com/guidedLearning/createAGame\n), it's pretty old. I want to use react to refactor it.\n\nFound a [blog](http://louardongames.blogspot.com/search/label/Lessons%20from%20Suzy%20Cube) about game develop.\n\n## SwiftUI and RN\n\nAfter WWDC, I think it's time to learn some SwiftUI. I watched a [playlist](https://www.youtube.com/watch?v=OvLxxV7X1Is&list=PLuoeXyslFTubw4NtepDCis5tTqK37zT3Q&ab_channel=PaulHudson) from Paul Hudson. Swift is an interesting language, I will dig further.\n\nAlso I checked out a tutorial about [React Native](https://www.youtube.com/watch?v=ur6I5m2nTvk&list=PL4cUxeGkcC9ixPU-QkScoRBVxtPPzVjrQ&pp=iAQB), pretty simple.\n\n## The LAN does not work on Mac\n\nI found my LAN driver can not work on Mac OS.\n\n## ssh login WSL2\n\nThis is a [link](https://jmmv.dev/2022/02/wsl-ssh-access.html) about how to remotely login WSL2.\n","collection":"blog","data":{"type":"post","category":"plan"}},{"id":"2023/06/24/25th-week-babylonjs.md","slug":"2023/06/24/25th-week-babylonjs","body":"\n# 25th week - BabylonJS\n\nThis week is all about BabylonJS. I was trying to refactor [Summer Festival](https://github.com/BabylonJS/SummerFestival) using [react-babylonjs](https://github.com/brianzinn/react-babylonjs) and [@preact/signals-react](https://www.npmjs.com/package/@preact/signals-react).\n\nGame developing is little different with UI developing. Since the canvas repaints in every frame. I don't need to care too much about the reactive system. In every frame, there is a pre-render function to pull state from the store.\n\nUnity can be used to export BabylonJS App. Using [Scene exporter](https://doc.babylonjs.com/communityExtensions/Unity/Exporter), it is a paid tool, can find a free alpha version on github. After using it, I found it can export gltf file, the code part is not helpful. Same situation in [needle engine](https://engine.needle.tools/docs/getting-started). (BTW, needle engine only works on node v16)\n\n[cannon](https://schteppe.github.io/cannon.js/) is deprecated now, it's been rewritten to [cannon.es](https://github.com/pmndrs/cannon-es). I strongly suggest to read these [code](https://github.com/brianzinn/react-babylonjs/blob/master/packages/static/content/examples/physics/BouncySphere.tsx\nhttp://grideasy.github.io/tutorials/Using_The_Physics_Engine\n) to use a physical engine in react-babylonjs.\n\n## Custom Resolution on Mac\n\n[betterdisplay](https://github.com/waydabber/BetterDisplay) is a paid extension to make dummy screens on Mac OS with a 7 days free trail.\n\n## WebXR\n\nThere are some CSS specs like `transform-style: detached;` is used in MR environment. [DOM-overlays](https://github.com/immersive-web/dom-overlays), I am not sure if it can show DOM in dual screen. If it can't, maybe using [html2canvas](https://github.com/niklasvh/html2canvas) can help? Then canvas UI framework like Flutter can have better performance, I guess.\n\nIn react-babylonjs, attach an HTML element to a mesh is simple, just use `Html` tag.\n\n## Faas\n\nI was thinking about run serverless functions on a local machine. I found [knative](https://cloud.google.com/knative/) and [openfaas](https://docs.openfaas.com/cli/build/ ). I didn't dig further.\n\n## FydeOS\n\nThis Friday, I tried FydeOS on my Cube tablet. rotation not working, camera was off. The camera can not work on Ubuntu either. It's an Intel AV Camera 2500, I found a surface [repository](https://github.com/linux-surface/linux-surface) trying to crack it. I think I will try Ubuntu on my machines this weekend, running Windows is too hot in this summer.\n","collection":"blog","data":{"type":"post","category":"plan"}}]}