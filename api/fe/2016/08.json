{"posts":[{"id":"2016/08/11/MochiUI.md","slug":"2016/08/11/mochiui","body":"\nhttps://mp.weixin.qq.com/s?__biz=MzI4MzM5ODM1Nw==&mid=2247483658&idx=1&sn=33c68d3f615fab291c57213d1ee9712f&scene=1&srcid=08114XgM7exmkysfZ3vzfcvE&pass_ticket=YH0FqjfQPOhb325pmlOXJmvmdpwmYignZi4BGS8fvn4VZ0TwllTJ6QHqKJsJMAnY#rd\n","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2016/08/12/MochiUI-Button.md","slug":"2016/08/12/mochiui-button","body":"\n# FRAMEWORK WIDGET-Mochi\n\n## BUTTONS\n\n### DATE:2012/09/26\n\n---\n\n#### 按钮\n\n**_文字内容_**\n\n- 字号 14pt\n- 字体 PreludeWGL\n- 粗体 斜体\n- 颜色 #4b4b4b\n\n**_圆括号_**\n\n- 字号 30pt\n- 字体 PreludeWGL Bold\n- 颜色 #4b4b4b\n\n**_垂直间隔_**\n\n文字在圆括号中间居中。\n圆括号的行高要比文字低 5 点。\n文字的上下间距是 8 像素。\n\n**_水平间隔_**\n\n文字在圆括号中间。\n第一个括号后没有字符间隔，文字后有一个字符间隔。\n两边的间隔为 8 像素。\n\n![](https://mmbiz.qlogo.cn/mmbiz/aEj0pBet08t8XWyBXodZAYbVyVuyq5OktnQEwveBUqRV9ia4MGzZPoTbWNJGOmLick5G0PGBiaOeO16XZwYiavphqQ/0?wx_fmt=png)\n\n---\n\n#### 下拉按钮\n\nlist-arrow.png 8x8 像素。\n相对于按钮垂直居中。\n\n**_点击时_**\n\n圆括号要对应伸缩\n\n![](https://mmbiz.qlogo.cn/mmbiz/aEj0pBet08t8XWyBXodZAYbVyVuyq5OkJ4zUVPUoP6Ill5YBszmkQdv7tNibS4icXf5TS0oMPOZyhjxgWQ20Em5w/0?wx_fmt=png)\n\n---\n\n#### 禁用按钮&警告按钮\n\n![](https://mmbiz.qlogo.cn/mmbiz/aEj0pBet08t8XWyBXodZAYbVyVuyq5OkZRuJblZg1jKe2yRyicn2RxrP26NHQPLNBYyX9udVuMEAzG4O8Qeo8cQ/0?wx_fmt=png)\n\n---\n\n#### 按钮间隔\n\n最小水平间距 2 单元（16 像素）\n\n![](https://mmbiz.qlogo.cn/mmbiz/aEj0pBet08t8XWyBXodZAYbVyVuyq5OkufrzdI7bqOaKIT7tIGNFQ3VibXL6hjIyQxVqTSAmcb527KHDwfV0wyA/0?wx_fmt=png)\n","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2016/08/17/KarmaTest.md","slug":"2016/08/17/karmatest","body":"\n# 跑一下前端的单元测试\n\n## 什么是单元测试\n\n指对软件中的最小可测试单元进行检查和验证。\n\n<center><img alt=\"举个栗子\" src=\"http://i0.hdslb.com/video/05/050dcbac6717c4e1c99c6f0c0a61c4b9.jpg\"/></center>\n\n**_老代码_**\n\n```javascript\n// getProtocol.js\ngetProtocol: function() {\n    // 这里列举出了所有的scheme，导致缺失了扩展性。\n     var e = [\"scheme1\",\"scheme2\",\"scheme3\"];\n     // 获取userAgent\n     var t = navigator.userAgent;\n     for (var n = 0; n < e.length; n++) {\n         if (t.indexOf(e[n]) !== -1)\n             return e[n].toLowerCase()\n     }\n     return \"http\";\n }\n```\n\n**_新代码_**\n\n```javascript\n// getProtocol.js\ngetProtocol: function() {\n     var e = (function() {\n         var res = navigator.userAgent.toLowerCase().match(/(^|\\s)(scheme[^\\/]+)\\/([\\d\\.]+)/),\n    scheme = res && res[2],\n    version = res && res[3];\n        return [scheme];\n     })();\n     // 获取userAgent\n     var t = navigator.userAgent;\n     for (var n = 0; n < e.length; n++) {\n         if (t.indexOf(e[n]) !== -1)\n             return e[n].toLowerCase()\n     }\n     return \"http\";\n }\n```\n\n这里需要对**_输入(navigator.userAgent)_**\n进行处理来查看函数的\n**_输出(scheme1,scheme2,scheme3,schemeXX,http)_**\n是否发生改变\n\n## 什么工程要单元测试\n\n1. 存在大量调用的工程\n   **_(√)_**\n2. 代码量少的工程（每次修改后自测都能完全覆盖用例）\n   **_(X)_**\n\n> 代码可以加 jshint\n\n```javascript\n// .jshintrc\n{\n  \"undef\": true, \"unused\": true, \"curly\": true, \"freeze\": true, \"funcscope\": true, \"nocomma\": true, \"notypeof\": true, \"shadow\": true, \"debug\": true, \"indent\": true,\n  \"predef\": [\n      \"require\", \"document\", \"window\", \"QApp\", \"module\", \"setTimeout\", \"setInterval\", \"encodeURI\", \"encodeURIComponent\", \"clearTimeout\", \"clearInterval\", \"navigator\", \"describe\", \"beforeEach\", \"it\", \"jasmine\", \"____MODULES\", \"spyOn\", \"expect\"\n   ]\n}\n\n```\n\n## 什么代码可以测试\n\n不是所有代码都可以单元测试，需要测试的代码需要给 runner 留有接口。\n\n但是，因为 js 没有真的对象（多年从事找对象工作的笔者哭晕在厕所），所以大家实现私有函数的方法真是天花乱坠。\n\n可是宝宝要单测的代码都是私有方法啊！！！！！！\n\n<center><img alt=\"哭\" src=\"http://img2.imgtn.bdimg.com/it/u=2304895309,1301584123&fm=21&gp=0.jpg\" /></center>\n\n### case A\n\n```javascript\nvar _utils = function() {\n  /*do something*/\n};\n_utils.prototype.add = function(a, b) {\n  return a + b;\n};\nmodule.exports = _utils;\n```\n\n```javascript\ndescribe(\"utils\", () => {\n  it(\"add\", () => {\n    var a = new (require(\"utils.js\"))();\n    expect(a.add(1, 1)).toBe(2);\n  });\n});\n```\n\n### case B\n\n```javascript\nvar _add = function(a, b) {\n  return a + b;\n};\nmodule.exports = { add: _add };\n```\n\n```javascript\ndescribe(\"utils\", () => {\n  it(\"add\", () => {\n    var a = require(\"utils.js\").add;\n    expect(a.add(1, 1)).toBe(2);\n  });\n});\n```\n\n### case D\n\n```javascript\nvar _add = function(a, b) {\n  return a + b;\n};\nmodule.exports = function() {\n  return _add(1, 1);\n};\n```\n\n只能把用例写到代码里面了。。。\n\n所以当我们写代码的时候要留好单元测试的接口，不管你写的代码多牛逼，\n如果你的代码不可测试，那宝宝就认为你的代码是不可读的。\n\n<center><img alt=\"白眼\" src=\"http://www.people.com.cn/mediafile/pic/20150203/21/15475877261822907269.jpg\" /></center>\n\n## 拿什么测试\n\nfekit 自带测试功能，在 test 文件夹下面执行`fekit test`就可以运行，用例语法遵循 mocha.js，可惜运行时是当前的 node 环境。\n\nangular 的测试 runner 时 karma，可以拿来跑用例，并且可以指定环境，所以使用 karma 跑用例还不错。\n\n那么，用例拿什么写呢？\n\n- QUnit\n- mocha.js\n- jasmine\n- ava\n- tape\n\n实际上 ava 和 tape 是我强推的，可惜这俩 node 环境还不错，到了 browser 还是用老牌的好一点。\n\n## 怎么配置 karma\n\n需要安装的 npm modules 在下面的 devDependencies 里面\n\n```javascript\n{\n \"scripts\": {\n    \"test\": \"karma start\"\n  },\n  \"devDependencies\": {\n    \"bower\": \"^1.7.9\",\n    \"jasmine-core\": \"^2.4.1\",\n    \"karma\": \"^1.1.2\",\n    \"karma-chrome-launcher\": \"^1.0.1\",\n    \"karma-jasmine\": \"^1.0.2\"\n  }\n}\n```\n\n执行\n\n```shell\nnpm i\n```\n\n下面的代码会自动生成 karma 的配置文件\n\n```shell\nkarma init\n```\n\n工程根目录里面会多一个 karma.conf.js 文件\n\n```javascript\n// Karma configuration\n// Generated on Mon Aug 08 2016 17:25:40 GMT+0800 (CST)\n\nmodule.exports = function(config) {\n  config.set({\n    // base path that will be used to resolve all patterns (eg. files, exclude)\n    basePath: \"\",\n\n    // frameworks to use\n    // available frameworks: https://npmjs.org/browse/keyword/karma-adapter\n    frameworks: [\"jasmine\"],\n\n    hostname: \"localhost\",\n\n    // list of files / patterns to load in the browser\n    files: [\n      \"bower_components/jquery/dist/jquery.js\",\n      \"bower_components/jasmine-jquery/lib/jasmine-jquery.js\",\n      \"bower_components/jasmine-ajax/lib/mock-ajax.js\",\n    ],\n\n    // list of files to exclude\n    exclude: [],\n\n    // preprocess matching files before serving them to the browser\n    // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor\n    preprocessors: {},\n\n    // test results reporter to use\n    // possible values: 'dots', 'progress'\n    // available reporters: https://npmjs.org/browse/keyword/karma-reporter\n    reporters: [\"progress\"],\n\n    // web server port\n    port: 9876,\n\n    // enable / disable colors in the output (reporters and logs)\n    colors: true,\n\n    // level of logging\n    // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\n    logLevel: config.LOG_INFO,\n\n    // enable / disable watching file and executing tests whenever any file changes\n    autoWatch: true,\n\n    // start these browsers\n    // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher\n    browsers: [\"Chrome\", \"Chrome_without_security\"],\n    customLaunchers: {\n      Chrome_without_security: {\n        base: \"Chrome\",\n        flags: [\"--disable-web-security\", \"--args\"],\n      },\n    },\n\n    // Continuous Integration mode\n    // if true, Karma captures browsers, runs the tests and exits\n    singleRun: false,\n\n    // Concurrency level\n    // how many browser should be started simultaneous\n    concurrency: Infinity,\n  });\n};\n```\n\n可以看到 files 里面我又加上了一些文件，那些还不是测试用例，因为要测试一些 dom 以及 ajax 的情况，加了一些代码。\n\n```javascript\n// bower.json\n{\n  \"dependencies\": {\n    \"jquery\": \"^3.1.0\",\n    \"jasmine-ajax\": \"^3.2.0\",\n    \"jasmine-jquery\": \"^2.1.1\"\n  }\n}\n```\n\n## 说说这些 karma 的原理吧\n\n用过 QUnit 和 mocha 的人都知道，如果写测试用例要把 js 和用例放在一个 html 环境下，再引进来 QUnit.js 和 mocha.js 就行了，\n其实 Karma 差不多，只不过把手工的部分换成机器了，这样你不用新建一个 html 文件，发布之前也不需要先删除测试代码了。\n\n## jasmine 的语法\n\n懒得写了，可以看一下下面的文章\n\n> [JavaScript 单元测试框架——Jasmine 入门](http://ued.fanxing.com/javascriptdan-yuan-ce-shi-kuang-jia-jasmine/)<br/> >[jasmine-ajax - Faking Ajax responses in your Jasmine suite.](https://github.com/jasmine/jasmine-ajax/blob/master/README.markdown)<br/> >[jasmine-jquery](https://github.com/velesin/jasmine-jquery/blob/master/README.md)\n\n<center>![举个栗子](http://i0.hdslb.com/video/05/050dcbac6717c4e1c99c6f0c0a61c4b9.jpg)</center>\n\n如果你有一个 Dialog 对象，你想看看它的 show 函数执行后页面是否有类名`.dialog`的 dom 节点。\n\n```JavaScript\ndescribe('Dialog', ()=>{\n    var _d = new Dialog();\n    it('show', ()=>{\n        _d.show();\n        expect($('.dialog')[0]).toBeInDOM();\n    });\n})\n```\n\n再如，Dialog 有一个 sendVcode 函数，执行的时候会发起 Ajax 请求，你要 Mock 一个 Ajax 请求\n\n```JavaScript\ndescribe('Mock AJAX', ()=>{\n    var mock = JSON.stringify({\n        status: 200,\n        data: {\n            message: \"blahblah\"\n        }\n    }),_d = new Dialog(),request;\n\n    beforeEach(()=>{\n        jasmine.Ajax.install();\n        _d.sendVcode();\n        request = jasmine.Ajax.requests.mostRecent();\n        request.respondWith({ status: 200, responseText: mock});\n    });\n\n    it('sendVcode', ()=>{\n        expect(request.url).toBe(\"xxx.htm\");\n        expect(request.method).toBe(\"POST\");\n        expect(request.data()).toEqual({\"source\":\"xxxx\"});\n    });\n});\n```\n\n另外，Dialog 执行 sendVcode 的时候，会执行`Dialog.timer`的 start 函数\n\n```javascript\ndescribe(\"Timer\", () => {\n  var _d = new Dialog();\n\n  beforeEach(() => {\n    spyOn(_d.timer, \"start\");\n    _d.sendVcode();\n  });\n\n  it(\"timer.start\", () => {\n    expect(_d.timer).toHaveBeenCalled();\n  });\n});\n```\n\n如果说要做接口测试\n\n```javascript\ndescribe(\"interface\", () => {\n  var _d = new Dialog(),\n    onSuccess,\n    onFailure;\n\n  beforeEach(() => {\n    jasmine.Ajax.install();\n    (onSuccess = jasmine.createSpy(\"onSuccess\")),\n      (onFailure = jasmine.createSpy(\"onFailure\"));\n    _d.init({\n      success: res => {\n        onSuccess(res);\n      },\n      error: () => {\n        onFailure(res);\n      },\n    });\n    request = jasmine.Ajax.requests.mostRecent();\n  });\n\n  it(\"init\", () => {\n    expect(onSuccess).toHaveBeenCalledWith(\"{xxxx}\");\n  });\n});\n```\n\n说下 Cookie 和 UA 的 hack，用[karma-phantomjs-launcher](https://github.com/karma-runner/karma-phantomjs-launcher/blob/master/README.md)可以改配置\n\n```javascript\ndocument.__defineGetter__(\"cookie\", function() {\n  return \"BlahBlah\";\n});\n\nnavigator.__defineGetter__(\"userAgent\", function() {\n  return \"Schema1\";\n});\n```\n\nCSS 的测试\n\n```javascript\ndescribe(\"addStyle:\", function() {\n  it(\"body{background:red;}\", function() {\n    main.addStyle(\"body{background:red;}\");\n    expect(window.getComputedStyle(document.body).backgroundColor).toEqual(\n      \"rgb(255, 0, 0)\"\n    );\n  });\n});\n```\n\n最后说一下，如果 karma 要支持 commonJS 需要加入 preCompiler，如 webpack 或者 browserfy，否则不支持 require。\n好在 fekit 是在 window 下注入\\_\\_\\_\\_MODULES 解决模块化，所以只需要知道模块的 md5 值就好。\n如刚才的 Dialog 的引入\n\n```javascript\nvar Dialog = ____MODULES[\"babf80335465996414cd682baf25de10\"];\n```\n\n## 关于自动生成测试用例\n\n写安卓的时候，AS 会自动生成用例，所以想让 Atom 也支持这一功能，找了一下 plugin，基本上没有。。。<br/>\n如果我写一个的话。。。我得估一下它的必要性。。。\n\n<center><img alt=\"来打我呀\" src=\"http://img2.imgtn.bdimg.com/it/u=3823151670,1751373648&fm=21&gp=0.jpg\" /></center>\n","collection":"blog","data":{"type":"post","category":"fe"}}]}