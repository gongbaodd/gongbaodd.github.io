{"posts":[{"id":"2015/12/25/esprima-js.md","slug":"2015/12/25/esprima-js","body":"\n# esprima 分析 js 代码\n\n```javascript\nvar fs = require(\"fs\"),\n  esprima = require(\"esprima\"),\n  estraverse = require(\"estraverse\"),\n  escodegen = require(\"escodegen\"),\n  escope = require(\"escope\");\n\nvar funcStats = {},\n  API = [\"tag\", \"tag2\", \"mount\", \"update\", \"Tag\", \"observable\", \"Router\"];\n\nfunction addStats(name) {\n  if (!funcStats[name]) {\n    funcStats[name] = { calls: [], declarations: [], func: \"\", calling: [] };\n  }\n}\n\nvar a = {};\n\nfunction analyze(code) {\n  var ast = esprima.parse(code);\n  // var scopeMan = escope.analyze(ast);\n\n  estraverse.traverse(ast, {\n    enter: function(node, parent) {\n      if (node.type === \"FunctionDeclaration\") {\n        var name = node.id.name;\n        addStats(name);\n        funcStats[name].declarations.push(node);\n        funcStats[name].func = escodegen.generate(node);\n        recurBody(node);\n\n        function recurBody(node) {\n          if (node.body) {\n            node.body.body &&\n              node.body.body.forEach(function(n) {\n                recurBody(n);\n              });\n            if (node.type === \"WhileStatement\") {\n              node.test && recurBody(node.test);\n            }\n          } else {\n            switch (node.type) {\n              case \"CallExpression\":\n                var _name = \"\",\n                  calling = funcStats[name].calling,\n                  count = 0;\n                if (node.callee.type === \"Identifier\") {\n                  _name = node.callee.name;\n                } else if (node.callee.type === \"MemberExpression\") {\n                  _name = node.callee.property.name;\n                }\n\n                calling.forEach(function(call) {\n                  if (call === _name) {\n                    count++;\n                  }\n                });\n\n                if (count === 0) {\n                  calling.push(_name);\n                }\n\n                node.arguments.forEach(function(n) {\n                  recurBody(n);\n                });\n                break;\n              case \"IfStatement\":\n                node.test && recurBody(node.test);\n                node.consequent && recurBody(node.consequent);\n                node.alternate && recurBody(node.alternate);\n                break;\n              case \"LogicalExpression\":\n                node.left && recurBody(node.left);\n                node.right && recurBody(node.right);\n                break;\n              case \"UnaryExpression\":\n                node.argument && recurBody(node.argument);\n                break;\n              case \"AssignmentExpression\":\n                node.right && recurBody(node.right);\n                break;\n              case \"VariableDeclaration\":\n                node.declarations.forEach(function(n) {\n                  recurBody(n);\n                });\n                break;\n              case \"VariableDeclarator\":\n                node.init && recurBody(node.init);\n                break;\n              case \"ExpressionStatement\":\n                node.expression && recurBody(node.expression);\n                break;\n              case \"ReturnStatement\":\n                node.argument && recurBody(node.argument);\n                break;\n            }\n          }\n        }\n      } else if (\n        node.type === \"CallExpression\" &&\n        node.callee.type === \"Identifier\"\n      ) {\n        addStats(node.callee.name);\n        funcStats[node.callee.name].calls.push(parent);\n      } else if (\n        node.type === \"CallExpression\" &&\n        node.callee.type === \"MemberExpression\"\n      ) {\n        addStats(node.callee.property.name);\n        funcStats[node.callee.property.name].calls.push(parent);\n      }\n    },\n  });\n\n  var data = {},\n    statistic = {\n      count: 0,\n      nodes: [],\n      links: [],\n    },\n    list = [];\n\n  Object.keys(funcStats).forEach(function(key) {\n    statistic.count++;\n    data[key] = {\n      calls: funcStats[key].calls.length,\n      declarations: funcStats[key].declarations.length,\n      func: funcStats[key].func,\n      calling: [],\n      weight: 0,\n      category: 0, //0=>normal 1=>API\n    };\n\n    API.forEach(function(a) {\n      if (a === key) {\n        data[key].category = 1;\n      }\n    });\n\n    funcStats[key].calling.forEach(function(c) {\n      funcStats[c] && data[key].calling.push(c);\n    });\n\n    data[key].weight = data[key].calling.length;\n\n    statistic.nodes.push({\n      category: data[key].category,\n      value: data[key].weight,\n      name: key,\n    });\n  });\n\n  statistic.nodes.forEach(function(node, source) {\n    data[node.name].calling.forEach(function(call) {\n      statistic.nodes.forEach(function(n, t) {\n        if (n.name === call) {\n          statistic.links.push({\n            source: source,\n            target: t + 1,\n            weight: 1,\n          });\n        }\n      });\n    });\n  });\n  Object.keys(funcStats).forEach(function(key) {\n    var d = data[key],\n      w = d.weight;\n    d.name = key;\n    if (list.length) {\n      var inserted = 0;\n      list.forEach(function(item, index) {\n        if (inserted) return;\n        if (item.weight < w) {\n          list = list.slice(0, index).concat([d], list.slice(index));\n          inserted++;\n        }\n      });\n    } else {\n      list.push(d);\n    }\n  });\n  fs.writeFileSync(\"ast.json\", JSON.stringify(list));\n}\n\nif (process.argv.length < 3) {\n  throw new Error(\"Usage: index.js file.js\");\n}\n\nvar filename = process.argv[2];\nconsole.log(\"[READ]\\t\" + filename);\nvar code = fs.readFileSync(filename);\nanalyze(code);\nconsole.log(\"[DONE]\");\n```\n","collection":"blog","data":{"type":"post","category":"fe"}}]}