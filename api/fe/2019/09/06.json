{"posts":[{"id":"2019/09/06/CSP.md","slug":"2019/09/06/csp","body":"Web UI Security matters\nRead 51 penetration test and Front-End-Checklist first.\n\n1. Reverse tab nabbing\nCRITICALITY:\n\nAn attacker might use this technique to silently load other pages on the parent tab which can be used for malicious operations such as phishing attacks.\n\nSUGGESTED FIX:\n\nPlease ensure that user-controlled (anchor tag with target=\"_blank\") links have the following attribute set: \n\nCopy\nrel=\"noopener noreferrer\"\nMore about the fix: https://cheatsheetseries.owasp.org/cheatsheets/HTML5_Security_Cheat_Sheet.html#tabnabbing﻿\n\n\n2. Content security policy\nCRITICALITY:\nAn attacker may inject scripts into the HTML files to steal user's information, such as Cookie, JWT token. If the CSP header is not offered, the browser will use same-origin policy standard, attackers can do XSS attack by injecting <img/> tags or <script/> tags.\n\nSUGGESTED FIX:\nCurrently we have two kinds of projects:\n\nS3 bucket project: The CI uploads webpack compiled static files to AWS S3 bucket,  the server is served by AWS cloud front.\nNode project: The project has one node server to serve itself.\nFor S3 bucket project\nMost of the CSP directives can be added using <meta/> tags.\n\ninstall csp-html-webpack-plugin into the projectyarn add -D csp-html-webpack-plugin\n\nyou can use the configuration in admin.aftership.com, including reCAPTCHA, Newrelic Browser & google-analytics.\n\nSome directives such as frame-ancestors can not be added by <meta/> tag. A response header is needed to add to the website.\n\nYou cannot add frame-ancestors directive using <meta/>\n\nadd  frame-ancestor _and _X-Frame-Options _in AWS cloudfront _to avoid click jacking attack.\n\nValidations\n\nYou can check your CSP content in [CSP Evaluator](https://csp-evaluator.withgoogle.com/).\n\n3. Subresource Integrity\n#\nCRITICALITY\nAttackers can inject arbitrary malicious content info files on the CDN.\n\nSUGGESTED FIX\nFor files from CDN add integrity & crossorigin field in script and link  tags, you can calculate the hash by using SRI Hash Generator.\n\nCopy\n<script src=\"https://example.com/example-framework.js\"\n        integrity=\"sha384-oqVuAfXRKap7fdgcCY5uykM6+R9GqQ8K/uxy9rx7HNQlGYl1kPzQho1wx4JwY8wC\"\n        crossorigin=\"anonymous\"></script>\n<link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css\" \n        rel=\"stylesheet\" \n        integrity=\"sha256-MfvZlkHCEqatNoGiOXveE8FIwMzZg4W85qfrfIFBfYc= sha512-dTfge/zgoMYpP7QbHy4gWMEGsbsdZeCXz7irItjcC3sPUFtf0kuFbDz/ixG7ArTxmDjLXDmezHubeNikyKGVyQ==\" \n        crossorigin=\"anonymous\"/>\n﻿\n\nIf the project is a S3 bucket project, the following webpack plugin can add integrity for the compiled statics.\n\n﻿\n\nwebpack-subresource-integrity\n﻿\n\nYou need to set output.crossOriginLoading to anonymous in webpack.config.js.\n\n不推荐用SRI，因为integrity会加上用户的UA","collection":"blog","data":{"type":"post","category":"fe"}}]}