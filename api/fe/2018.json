{"posts":[{"id":"2018/01/03/typescript-AST.md","slug":"2018/01/03/typescript-ast","body":"# TypeScript编译抽象语法树\n\n[代码地址](http://gongbushang.com:3000/gongbushang/typescript_compiler)\n\n两年前我曾写了一个篇\n[Esprima静态分析js代码](http://gongbaodd.github.io/fe/2015/12/25/esprima%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90js%E4%BB%A3%E7%A0%81.html),\n当时的目的是为了检查一个js文件对某些函数的调用数计数来确定这个函数是不是可删的.\n\n自从用了typescript,\n这种方法自然就不需要使用了,\n但是如果我想获取 typescript 的 AST 怎么办?\n\n很简单, 因为 Ts 本身就是开源项目, 官方已经有解决方案.\n\n假设我想看一下 \"const a:number = 11;\" 的 AST 树, 代码如下.\n\n```typescript\nimport ts = require(\"typescript\");\nconst source = \"const a:number = 11;\";\n\nfunction printChildren(node: ts.Node, depth = 0) {\n    console.log(new Array(depth + 1).join(\"---\"), ts.SyntaxKind[node.kind], node.pos, node.end);\n    depth++;\n    node.getChildren().forEach(c => printChildren(c, depth));\n}\n\nconst sourceFile = ts.createSourceFile(\"a.ts\", source, ts.ScriptTarget.ES2016, true);\nprintChildren(sourceFile);\n```\n\n结果\n\n```shell\n SourceFile 0 20\n--- SyntaxList 0 20\n------ VariableStatement 0 20\n--------- VariableDeclarationList 0 19\n------------ ConstKeyword 0 5\n------------ SyntaxList 5 19\n--------------- VariableDeclaration 5 19\n------------------ Identifier 5 7\n------------------ ColonToken 7 8\n------------------ NumberKeyword 8 14\n------------------ FirstAssignment 14 16\n------------------ FirstLiteralToken 16 19\n--------- SemicolonToken 19 20\n--- EndOfFileToken 20 20\n```\n\n一个空对象的抽象语法树.\n\n```typescript\nclass a {}\n```\n\n```shell\n SourceFile 0 10\n--- SyntaxList 0 10\n------ ClassDeclaration 0 10\n--------- ClassKeyword 0 5\n--------- Identifier 5 7\n--------- FirstPunctuation 7 9\n--------- SyntaxList 9 9\n--------- CloseBraceToken 9 10\n--- EndOfFileToken 10 10\n```\n\n那么复杂点的对象\n\n```typescript\nclass a {\n    public num: number = 11;\n    public getNumber() {\n        return this.num;\n    }\n}\n```\n\n```shell\n SourceFile 0 96\n--- SyntaxList 0 96\n------ ClassDeclaration 0 96\n--------- ClassKeyword 0 5\n--------- Identifier 5 7\n--------- FirstPunctuation 7 9\n--------- SyntaxList 9 94\n------------ PropertyDeclaration 9 38\n--------------- SyntaxList 9 20\n------------------ PublicKeyword 9 20\n--------------- Identifier 20 24\n--------------- ColonToken 24 25\n--------------- NumberKeyword 25 32\n--------------- FirstAssignment 32 34\n--------------- FirstLiteralToken 34 37\n--------------- SemicolonToken 37 38\n------------ MethodDeclaration 38 94\n--------------- SyntaxList 38 49\n------------------ PublicKeyword 38 49\n--------------- Identifier 49 59\n--------------- OpenParenToken 59 60\n--------------- SyntaxList 60 60\n--------------- CloseParenToken 60 61\n--------------- Block 61 94\n------------------ FirstPunctuation 61 63\n------------------ SyntaxList 63 88\n--------------------- ReturnStatement 63 88\n------------------------ ReturnKeyword 63 78\n------------------------ PropertyAccessExpression 78 87\n--------------------------- ThisKeyword 78 83\n--------------------------- DotToken 83 84\n--------------------------- Identifier 84 87\n------------------------ SemicolonToken 87 88\n------------------ CloseBraceToken 88 94\n--------- CloseBraceToken 94 96\n--- EndOfFileToken 96 96\n```\n\n那么看看应用, 之前我写过 [plantUML的使用](http://gongbaodd.github.io/fe/2017/12/20/plantUML.html),\n正好可以试一下看看能不能自动生成类图.\n\n```typescript\nimport { readFileSync } from \"fs\";\nimport * as ts from \"typescript\";\n\nexport function uml(src: ts.SourceFile) {\n    const classMap = {};\n    analyseNode(src);\n    console.log(draw());\n\n    function analyseNode(node: ts.Node) {\n        if (node.kind === ts.SyntaxKind.ClassDeclaration) {\n            const cls = {};\n            node.forEachChild(n => {\n                if (n.kind === ts.SyntaxKind.Identifier) {\n                    classMap[n.getText()] = cls;\n                }\n                if (n.kind === ts.SyntaxKind.PropertyDeclaration) {\n                    n.forEachChild(i => {\n                        if (i.kind === ts.SyntaxKind.Identifier) {\n                            cls[i.getText()] = \"var\";\n                        }\n                    });\n                }\n                if (n.kind === ts.SyntaxKind.MethodDeclaration) {\n                    n.forEachChild(i => {\n                        if (i.kind === ts.SyntaxKind.Identifier) {\n                            cls[i.getText()] = \"function\";\n                        }\n                    })\n                }\n            });\n        }\n        node.forEachChild(analyseNode);\n    }\n\n    function draw() {\n        const tpl = `\n@startuml\n#\n@enduml\n        `.trim();\n        let str = \"\";\n\n        Object.keys(classMap).forEach(className => {\n            const classItems = classMap[className];\n            str += `class ${className} {\\n`;\n            Object.keys(classItems).forEach(i => {\n                str += `${classItems[i]} ${i}\\n`;\n            });\n            str += \"}\\n\";\n        });\n\n        return tpl.replace(\"#\", str);\n    }\n}\n\n\nconst file = process.argv.slice(2);\nfile.forEach(f => {\n    const src = ts.createSourceFile(f, readFileSync(f).toString(), ts.ScriptTarget.ES2016, true);\n    uml(src);\n})\n\n```\n\n\n```plantuml\n@startuml\nclass A {\nvar num\nfunction getNumber\n}\n\n@enduml\n```","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/01/24/30-kotlin.md","slug":"2018/01/24/30-kotlin","body":"# 完成了30个kotlin安卓挑战\n\n去年逛IT邦看到了关于Kotlin的铁人赛，30个安卓demo．毕竟不是我的原创，这里贴上原地址\n\nhttps://ithelp.ithome.com.tw/users/20107329/ironman/1286\n\n再贴上我的代码地址\n\nhttp://gongbushang.com:3000/gongbushang/kotlinPlayground\n\n## 我的测试机\n\n说来我的测试机，可是我当年拿实习工资买的魅蓝，后来跑步摔碎了，现在打开更新下居然还能用，也是奇迹了．\n\n![](https://wx2.sinaimg.cn/mw690/89d0a2e1ly1fnt8xpefslj20qo0zkwin.jpg)\n\n## 01TapCounter\n\n最简单的计数器\n\nKotlin 的 lamda 表达式的使用,\n使用 kotlin 的一个好处，\n获取 button 或者 textEdit 之类的组件不需要使用 findViewById 了\n\n```kotlin\nthis.tapButton.setOnClickListener {\n    currentNumber += 1\n    numberTextView.text = currentNumber.toString()\n}\n```\n\n## 02seekBarPercentage\n\nprogressBar 的使用\n\n## 03ImgePicker\n\n获取相机\n\n```kotlin\nval intent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)\n\nstartActivityForResult(intent, ACTION_CAMERA_REQUEST_CODE)\n```\n\n获取相册\n\n```kotlin\nval intent = Intent(Intent.ACTION_PICK)\nintent.type = \"image/*\"\nstartActivityForResult(intent, ACTION_ALBUM_REQUEST_CODE)\n```\n\n## 04ScalableImageView\n\n自定义一个 ImageView\n\n## 05WebSearch\n\nwebView\n\n```kotlin\nwebview.webViewClient = webViewClient\nwebview.loadUrl(\"https://www.bing.com\")\n```\n\n## 06ImageList\n\nfragment 的高度要固定\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.constraint.ConstraintLayout\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"260dp\">\n</android.support.constraint.ConstraintLayout>\n```\n\n## 07MyLocation\n\n没法用谷歌地图, 改用高德地图, 主要还是要很多权限\n\n```xml\n\n    <!--允许程序打开网络套接字-->\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n    <!--允许程序设置内置sd卡的写权限-->\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n    <!--允许程序获取网络状态-->\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n    <!--允许程序访问WiFi网络信息-->\n    <uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" />\n    <!--允许程序读写手机状态和身份-->\n    <uses-permission android:name=\"android.permission.READ_PHONE_STATE\" />\n    <!--允许程序访问CellID或WiFi热点来获取粗略的位置-->\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\"/>\n```\n\n## 08BottomNavigation\n\n没啥意思就是底部导航栏\n\n## 09ImageSlider\n\nImageSlider的使用\n\n## 10ProgressControl\n\n控制 progressBar\n\n## 11ActivitySchedule\n\n日期弹框\n\n```kotlin\n  DatePickerDialog(\n                    this,\n                    DatePickerDialog.OnDateSetListener { _, year, month, date ->\n                        cal.set(Calendar.YEAR, year)\n                        cal.set(Calendar.MONTH, month)\n                        cal.set(Calendar.DATE, date)\n\n                        val time = SimpleDateFormat(\"yyyy-MM-dd\", Locale.CHINA)\n                        dateTextView.text = time.format(cal.time)\n                    },\n                    cal.get(Calendar.YEAR),\n                    cal.get(Calendar.MONTH),\n                    cal.get(Calendar.DATE)\n            ).show()\n```\n\n时间弹框\n\n```kotlin\nTimePickerDialog(\n                    this,\n                    TimePickerDialog.OnTimeSetListener { _, hour, minute ->\n                        cal.set(Calendar.HOUR_OF_DAY, hour)\n                        cal.set(Calendar.MINUTE, minute)\n\n                        val time = SimpleDateFormat(\"HH:mm\", Locale.CHINA)\n                        timeTextView.text = time.format(cal.time)\n                    },\n                    cal.get(Calendar.HOUR_OF_DAY),\n                    cal.get(Calendar.MINUTE),\n                    true\n            ).show()\n```\n\n## 12GitHubStars\n\nOkHttpClient\n\n```kotlin\nval client = OkHttpClient()\n            val request = Request.Builder()\n                    .url(\"https://api.github.com/users/$username/starred\")\n                    .build()\n\n            client.newCall(request).enqueue(object: Callback {\n                override fun onFailure(call: Call?, e: IOException?) {\n                    Toast.makeText(this@MainActivity, \"get data failed\", Toast.LENGTH_SHORT).show()\n                }\n\n                override fun onResponse(call: Call?, response: Response?) {}\n            })\n```\n\n## 13LocalStorage\n\n存\n\n```kotlin\nval preference = PreferenceManager.getDefaultSharedPreferences(this)\n            val editor = preference.edit()\n            editor.putString(\"login_name\", name)\n            editor.apply()\n\n```\n\n取\n\n```kotlin\nval preference = PreferenceManager.getDefaultSharedPreferences(this)\n            val name = preference.getString(\"login_name\", \"\")\n            if (name.isEmpty()) {\n                Toast.makeText(this, \"name is empty\", Toast.LENGTH_SHORT).show()\n            }\n            nameTextView.text = name\n```\n\n## 14Ball\n\n```kotlin\nanimator = ObjectAnimator.ofFloat(imageView4, \"translationX\", 0f, 600f, 0f)\nanimator.duration = 1500\nanimator.interpolator = AccelerateInterpolator()\nanimator.start()\n```\n\n## 15Notification\n\n其实大部分API魅族都给砍了,所以加title啥的就没有必要了\n\n```kotlin\nval notify = NotificationCompat.Builder(this, \"channel id test\")\n                    .setSmallIcon(R.drawable.img)\n                    .setLargeIcon(BitmapFactory.decodeResource(resources, R.drawable.img))\n                    .setContentTitle(\"Notification\")\n                    .setContentText(\"It's time\")\n                    .setVibrate(longArrayOf(300, 600, 300, 600))\n                    .setLights(Color.RED, 1000, 1000)\n                    .build()\n            val noticeManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n            noticeManager.notify(1, notify)\n```\n\n## 16PushMessaging\n\n```kotlin\nval intent = Intent(\"gongMsg\")\nintent.putExtra(\"message\", text)\nbroadcast.sendBroadcast(intent)\n```\n\n## 17PullToRequest\n\nfragment记得加高度\n\n## 18SideMenu\n\n安卓常见的左滑目录\n\n## 19Sound\n\n音乐播放器,还是用默认的style吧,换一个卡得不行\n\n## 20ActivityTransition\n\nActivity转场动画\n\n## 21LayoutSwitcher\n\nGrid布局变化\n\n## 22LocalDatabase\n\n本地的SQL\n\n## 23speech\n\nTTS, 魅族居然不支持\n\n## 24Painter\n\nCanvas\n\n## 25Face\n\n人脸检测, 但是并没检测出来我\n\n## 26ActionRecieve - ActionSend\n\n```kotlin\nval intent = Intent()\nintent.action = Intent.ACTION_SEND\nintent.putExtra(Intent.EXTRA_TEXT, textEdit.text.toString())\nintent.type = \"text/plain\"\nstartActivity(intent)\n```\n\n接受的时候 intentfilter 需要加入\n\n```kotlin\n<action android:name=\"android.intent.action.SEND\" />\n<category android:name=\"android.intent.category.DEFAULT\" />\n<data android:mimeType=\"text/plain\" />\n```\n\n## 27ShakeIt\n\n摇一摇\n\n## 28Tabs\n\n顶部 tab\n\n## 29Floats\n\n自定义悬浮框 和 右下角悬浮按键\n\n## 30Video\n\n和播放器其实类似\n","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/02/03/webpack-nestjs.md","slug":"2018/02/03/webpack-nestjs","body":"# Webpack + NestJS 全栈自动刷新\n\n> 本来想写热启动, 算了, 其实就是刷新了, 实事求是点好.\n\n去年我单位所有项目进入前后端同构的状态, 主要的工具是 NestJS 和 React,\n但还没有做过热启动, 反正开始重写主页了, 顺带着做一下.\n\n## NestJS 自动刷新\n\nNestJS 本身就利用 Nodemon 实现了文件修改后自动重启.\n\n```javascript\n{\n    \"watch\": [\n        \"src\"\n    ],\n    \"ext\": \"ts\",\n    \"ignore\": [\n        \"src/**/*.spec.ts\"\n    ],\n    \"exec\": \"node ./dev/index\"\n}\n```\n\n利用 ts-node 开发速度也比编译后再开发快很多\n\n## NestJS 无缝使用 Express\n\nNestJS 虽然基于 Express, 但是语法和 Express 区别很大, 好在可以直接把 Express 的实例作为子类使用\n\n```typescript\nasync function bootstrap() {\n    const instance = express();\n    instance.use(morgan(\"short\")); // 一个日志中间件\n    const app = await NestFactory.create(\n        ApplicationModule,\n        instance,\n    );\n    await app.listen(8080);\n}\n```\n\n## Webpack 自动刷新\n\nwebpack 自动更新, 简单地说就是用 webpackDevMiddleware 代替 express.static.\n\n先给js里面加上webpack-hot-middleware/client, 这里偷下懒, 每次 index.tsx 更新后页面都会重启.\n\n```javascript\n// webpack.config.js\nmodule.exports = {\n    entry: [\n        \"./src/public/index.tsx\",\n        \"./node_modules/webpack-hot-middleware/client.js?reload=true\"\n    ],\n    output: {\n        path: path.resolve(__dirname, \"./dist/public/\"),\n        filename: \"index.js\",\n        publicPath: \"/public\"\n    },\n}\n```\n\nserver 部分, 要把 express.static 注释掉\n\n```typescript\nconst webpackConfig: webpack.Configuration = webpackRawConfig as any;\nconst webpackCompiler = webpack(webpackConfig);\nconst webpackDevConfig: webpackDevMiddleware.Options = {\n    publicPath: webpackConfig.output.publicPath,\n};\n\ninstance.use(webpackDevMiddleware(webpackCompiler, webpackDevConfig));\ninstance.use(webpackHotMiddleware(webpackCompiler));\n```\n\n***nodemon 别加 tsx, 编译起来真的很慢***","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/02/06/TexturePacker.md","slug":"2018/02/06/texturepacker","body":"# 用 TexturePacker 做雪碧图\n\n在 setting 里面选择格式, 如 PixiJS, 然后点击 Publish Sprite Sheet 会生成对应的 png 和 json","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/02/07/Webpack.md","slug":"2018/02/07/webpack","body":"# webpack 前端热更新\n\nWebpack仅仅实现前端热更新要比前后端同构简单得多, sourceMap 是必须加的, 用来判断哪些文件更新.\n\n```typescript\n// webpack.config.ts\nimport * as webpack from \"webpack\";\nimport * as path from \"path\";\n\nconst config: webpack.Configuration = {\n    entry: [\n        \"./src/index.tsx\",\n    ],\n    output: {\n        path: path.resolve(__dirname, \"./public\"),\n        filename: \"index.js\",\n        publicPath: \"/public/\",\n    },\n    module: {\n        loaders: [\n            {\n                test: /\\.tsx?$/,\n                loader: \"ts-loader\",\n                exclude: /node_modules/\n            }\n        ]\n    },\n    devtool: \"source-map\",\n    devServer: {\n        hot: true,\n    },\n    plugins: [\n        new webpack.NamedModulesPlugin(),\n        new webpack.HotModuleReplacementPlugin(),\n    ]\n}\n\nexport default config;\n```","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/02/08/PreactCSSTransation.md","slug":"2018/02/08/preactcsstransation","body":"# PreactCSSTransation 的使用\n\n项目地址 http://gongbushang.com:3000/gongbushang/animateCSSplayground\n\n## 结合 animate.css\n\n## 结合 preact-router\n","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/02/10/FontAwesome-5.md","slug":"2018/02/10/fontawesome-5","body":"# FontAwesome出5啦\n\nQunar的很多图片都是用iconfont实现的,\n我们有一套类似于fontawesome网站的[yicon](https://yicon.ymfe.org),\n\n然而当初构建的时候,对于使用iconfont还是svg是很受争议的.\n其结果自然iconfont胜出,而那时我见识到了svg对于制作模块化图标,\n甚至是动画图标的潜力(SMIL,很遗憾后来为了CSS3,这一功能基本上无人问津了)\n,这些对于svg唯一的缺点就是兼容性了.\n\n看到FontAwesome的第5个版本推荐使用svg, 马上拿过来试试.\n\n[参考代码](http://gongbushang.com:3000/gongbushang/fontAweSome5Playground)\n\n## 官方的React组件\n\n当然也有Vue的, 安装 @fortawesome/fontawesome @fortawesome/fontawesome-free-solid @fortawesome/react-fontawesome \n(0.1.0-3以上有d.ts说明)\n\n利用 create-react-app 快速建立工程\n\n```shell\nnpx create-react-app awesome --scripts-version=react-scripts-ts\n```\n\n```JSX\n<FontAwesomeIcon icon={faCoffee}/>\n```\n\n直接使用,非常简单\n\n## 新功能:变形\n\n比如放大(grow)或者缩小(shrink),\n后面的数字的单位是 1/16em.\n\n```JSX\n<FontAwesomeIcon\n    {...{\n        icon: faCoffee,\n        border: true,\n        fixedWidth: true,\n        transform: \"shrink-8\",\n    }}\n/>\n```\n\n上(up) 下(down) 左(left) 右(right)\n垂直翻转(flip-v) 水平翻转(flip-h) \n旋转(rotate) \n\n## 新功能:遮罩\n\n```JSX\n<Font\n    {...{\n        icon: faCoffee,\n        border: true,\n        fixedWidth: true,\n        transform: \"shrink-8\",\n        mask: faSquare,\n    }}\n/>\n```\n\n## 新功能:图层\n\n两个图标层叠\n\n```JSX\n        <span className=\"fa-layers fa-fw fa-border\">\n          <Font\n            {...{\n              icon: faCircle,\n            }}\n          />\n          <Font\n            {...{\n              icon: faCoffee,\n              transform: \"shrink-7\",\n              style: {\n                color: \"#fff\"\n              }\n            }}\n          />\n        </span>\n```\n\n图标添加数字角标,默认右上(指定位置: fa-layers-${bottom|top}-${left|right}).\n\n```JSX\n        <span className=\"fa-layers fa-fw\">\n          <Font\n            {...{\n              icon: faAlignJustify,\n            }}\n          />\n          <span className=\"fa-layers-counter\">1111</span>\n        </span>\n```\n\n叠加文字\n\n```JSX\n        <span className=\"fa-layers fa-fw\">\n          <Font\n            {...{\n              icon: faSquare,\n            }}\n          />\n          <span\n            {...{\n              className: \"fa-layers-text\",\n              style: {\n                color: \"#fff\"\n              }\n            }}\n          >\n          e\n          </span>\n        </span>\n```\n\n## 总结\n\nFontAwesome 总的来看,不考虑兼容性的话的确可以使用,\n而且随着emoji的推广, Material Design等各种设计模式的诞生,\n彩色的可模块化的图标方案会逐渐替代现有的单色图标.\n","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/02/14/Valentine's-Day-for-you-some-color-to-see.md","slug":"2018/02/14/valentines-day-for-you-some-color-to-see","body":"# 情人节给你点颜色看看\n\n![示例代码](http://gongbushang.com:3000/gongbushang/pixijsPlayground/src/master/src/12-hsl_hsv.ts)\n\nCMYK用于打印, RGB用于显示屏, 然而二者都不能直观的展示颜色, 于是有了 HSL 和 HSV 坐标系.\n\n## 简介\n\n今天看看HSL和HSV转化RGB, [维基地址](https://zh.wikipedia.org/wiki/HSL%E5%92%8CHSV%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4).\n\n![HSL与HSV](https://upload.wikimedia.org/wikipedia/commons/thumb/b/b6/HSL_HSV_cylinder_color_solid_comparison.png/800px-HSL_HSV_cylinder_color_solid_comparison.png)\n\n* H 指的是 hue 色相 [0-360]\n* S 指的是 saturation 饱和度 [0-1]\n* V 指的是 value 明度 [0-1]\n* L 指的是 light 亮度 [0-1]\n\n## HSV转换RGB\n\nHSL转换RGB有点烦(我认为是这样的), 维基里面有详细的解释, HSV到比较简单\n\n```typescript\n/**\n * hsv2rgb\n * @param {number} h hue 色相 [0, 360]\n * @param {number} s saturation 饱和度 [0, 1]\n * @param {number} v value 明度 [0, 1]\n * @returns [r, g, b] 分别取值 [0, 255]\n */\nfunction hsv2rgb(\n    h: number,\n    s: number,\n    v: number,\n) {\n    // 色相\n    while(h < 0) {\n        h += 360;\n    }\n    h = h % 360;\n    // 饱和度\n    s = s < 0? 0: s > 1? 1: s;\n    // 明度\n    v = (v < 0? 0: v > 1? 1: v)*255;\n\n    let hi = (h/60|0)%6;\n    let f = h/60 - hi;\n    let p = v*(1-s) | 0;\n    let q = v*(1-f*s) | 0;\n    let t = v*(1-(1-f)*s) | 0;\n    v |= 0;\n    switch (hi) {\n        case 0: return [v, t, p];\n        case 1: return [q, v, p];\n        case 2: return [p, v, t];\n        case 3: return [p, q, v];\n        case 4: return [t, p, v];\n        case 5: return [v, p, q];\n    }\n}\n```\n\n","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/02/19/PixiJS.md","slug":"2018/02/19/pixijs","body":"# 春节的PixiJS试炼\n\n[代码地址](http://gongbushang.com:3000/gongbushang/pixijsPlayground)\n\n1. 展示雪碧图\n\n2. 容器 Container\n\n3. 图形 Graphics\n\n4. 遮罩 Mask\n\n5. 动画 Ticker\n\n6. 文字\n\n7. 动态图\n\n8. 交互\n\n9. 自适应\n\n10. datGUI\n\n11. 上色\n\n12. HSV、HSL色彩空间\n\n13. 混合模式 blend\n\n14. 材质 texture\n\n15. 滤镜 filter\n\n16. 骨骼 snake\n\n17. 骨骼 goblin\n\n18. 粒子 particles\n\n19. 实例一 滚动的圆\n\n20. 实例二 万花筒\n\n另外还想做两个 [万花尺](https://ithelp.ithome.com.tw/articles/10195023)、[印章](https://ithelp.ithome.com.tw/articles/10195375) ，\n感觉和试炼关系不大以后补充。","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/03/20/I-am-bored.md","slug":"2018/03/20/i-am-bored","body":"# 好无聊\n\n最近工作很忙、还要雅思考试、还感冒了，真是心力俱疲。\n\n![lena](http://ww1.sinaimg.cn/large/89d0a2e1ly1fpjg5b5wc7j20e80e812x.jpg)\n\n但是这些都是打不到我的！！！！\n","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/04/09/GraphQL.md","slug":"2018/04/09/graphql","body":"# GraphQL的使用\n\n> you can find the code in http://gongbushang.com:3000/gongbushang/graphql_starter","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/04/10/Archlinux-VScode.md","slug":"2018/04/10/archlinux-vscode","body":"# ArchLinux 修改 VScode 可监视文件大小\n\nhttps://github.com/guard/listen/wiki/Increasing-the-amount-of-inotify-watchers\n\n```shell\necho fs.inotify.max_user_watches=524288 | sudo tee /etc/sysctl.d/40-max-user-watches.conf && sudo sysctl --system\n```\n","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/04/16/lego.md","slug":"2018/04/16/lego","body":"# lego系统一岁啦\n\n![logo](http://ww1.sinaimg.cn/large/89d0a2e1ly1fqer3a0s0pj20sg0bk0wr.jpg)\n\n大概看了下去年的博客，我大概在五月初，对lego的第一次上线做了总结，那么现在大概就是lego的一周岁生日了。\n\n## lego 的定义\n\n![lego云图](http://ww1.sinaimg.cn/large/89d0a2e1ly1fqemomvxyqj20sg0lcdo4.jpg)\n\n支付lego平台是一个支持多维度线上配置的web组件化前后端同构渲染平台，覆盖从服务端到web前端再到数据监控的整体解决方案，目前服务于去哪儿网会员的【我的钱包】【我的银行卡】【绑卡服务】【实名认证】等服务。\n\n## lego 搭建背景\n\n![ykit](http://ww1.sinaimg.cn/large/89d0a2e1ly1fqem7mt787j20jc0fit9k.jpg)\n\n* 公司内部正在要求使用 ykit 代替 fekit 打包前端代码，对 fe/member-mobile 来说这种改动相当于全项目重构。\n\n```shell\nbusiTypeId=WLHotelHD&\ncouponAmount=300& bannerLink=http%3A%2F%2Fwww.qunar.com%2F& HMAC=362b0da8eb2f95cb33608cf4584c7700&\nagreement=&\ndid=865630020132708&\npid=10010&\nextraJson=&\ncardType=ALL& \nversion=20140808& title=%E7%BB%91%E5%8D%A1%E9%A2%86%E7%BA%A2%E5%8C%85&\nisObtainCoupon=1& \ncouponSource=pay_test& \nuserId=1444548113& \nsuccessURL=http%3A%2F%2Ftcbeta2.qunar.com%2Factivity%2Fspringgift%3Ftpl%3Dredirect%26couponId%3Dundefined& \ngid=8438932D-5548-D769-1AF7-22274CDE88E4&\nbindCardRule=%5B%22%E9%A6%96%E6%AC%A1%E7%BB%91%E5%8D%A1%E6%88%90%E5%8A%9F%EF%BC%8C%E4%B8%94%E8%AF%A5%E9%93%B6%E8%A1%8C%E5%8D%A1%E6%9C%AA%E5%9C%A8%E5%8E%BB%E5%93%AA%E5%84%BF%E7%BD%91%E7%BB%91%E5%AE%9A%E8%BF%87%E7%9A%84%E7%94%A8%E6%88%B7%EF%BC%8C%E5%8D%B3%E5%8F%AF%E8%8E%B7%E5%BE%97%E4%BC%9A%E5%91%98%E7%BA%A2%E5%8C%85%E3%80%82%22%2C%22%E6%AF%8F%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%AA%E5%8F%AF%E7%BB%91%E5%8D%A1%E9%A2%86%E5%8F%96%E4%B8%80%E6%AC%A1%E4%BC%9A%E5%91%98%E7%BA%A2%E5%8C%85%E3%80%82%22%2C%22%E6%B4%BB%E5%8A%A8%E4%B8%AD%EF%BC%8C%E5%A6%82%E6%9E%9C%E5%87%BA%E7%8E%B0%E4%BD%9C%E5%BC%8A%E8%A1%8C%E4%B8%BA%EF%BC%88%E5%A6%82%E6%89%B9%E9%87%8F%E6%B3%A8%E5%86%8C%E3%80%81%E6%81%B6%E6%84%8F%E8%B4%AD%E4%B9%B0%E3%80%81%E8%99%9A%E5%81%87%E4%BA%A4%E6%98%93%E7%AD%89%EF%BC%89%EF%BC%8C%E5%8E%BB%E5%93%AA%E5%84%BF%E7%BD%91%E5%B0%86%E8%87%AA%E5%8A%A8%E5%8F%96%E6%B6%88%E6%82%A8%E6%9C%AC%E6%AC%A1%E6%B4%BB%E5%8A%A8%E8%AE%A2%E5%8D%95%EF%BC%8C%E5%B9%B6%E6%9C%89%E6%9D%83%E5%86%BB%E7%BB%93%E8%B4%A6%E5%8F%B7%E5%B9%B6%E5%8F%96%E6%B6%88%E6%82%A8%E5%90%8E%E7%BB%AD%E5%8F%82%E4%B8%8E%E5%8E%BB%E5%93%AA%E5%84%BF%E7%BD%91%E4%BB%BB%E6%84%8F%E6%B4%BB%E5%8A%A8%E7%9A%84%E6%9D%83%E5%88%A9%EF%BC%8C%E5%BF%85%E8%A6%81%E6%97%B6%E8%BF%BD%E7%A9%B6%E6%B3%95%E5%BE%8B%E8%B4%A3%E4%BB%BB%E3%80%82%22%5D& \nvid=60001092&\nmerchantCode=WLHotelHDJK001&\nreturnURL=https%3A%2F%2Fmembermobilebetak.qunar.com%2Fm%2Fmember%2Fasset%2Fcoupon%2Fdetail.html& bindCardSource=coupon_bind& banner=https%3A%2F%2Fsource.qunarzz.com%2Fsite%2Fimages%2Fzhuanti%2Fhuodong%2Fflight_free_banner.jpg\n```\n\n* member-mobile 内部已经有根据传递参数配置页面展示的方法，但是很多参数相对于来源是静态的，同时如果需要增加新参数或者新来源的时候需要前后端介入开发，大概会需要 2~3pd。\n\n![使用的工具](http://ww1.sinaimg.cn/large/89d0a2e1ly1fqeqvbrmjvj20sg0lc77v.jpg)\n\n* 前端以及node的一系列框架工具逐渐成熟，足以制作类似于lego的渲染系统。\n\n* 公司的 QConfig 支持 JSON 类型的配置文件，并且已经可以在 node 端使用。\n\n## 编程语言的选择\n\n![Typescript](http://ww1.sinaimg.cn/large/89d0a2e1ly1fqeowo5o6jj20gx0gxwf6.jpg)\n\nmember-mobile 为了保证浏览器兼容性用的是 ES5，然而更多的代码库使用的是 ES6 编写，使用的时候再编译成 ES5。但是，无论 ES5 还是 ES6 都是动态类型 JS，无法对代码进行类型检查。\n\n至于关于 typescript 的好处，我不在此多余阐述，可以参考我过去的记次分享 \n\n[typescript干货](http://gongbaodd.github.io/fe/2017/05/04/1TypeScript%E5%B9%B2%E8%B4%A7.html) \n\n[Typescript sucks but long live the types\n](http://gongbaodd.github.io/fe/2017/09/18/Typescript-sucks-but-long-live-the-types.html) 。\n\n[TypeScript编译抽象语法树](http://gongbaodd.github.io/fe/2018/01/03/typescript%E7%BC%96%E8%AF%91AST%E8%AE%AD%E7%BB%83.html)\n\n## 架构设计\n\n![架构设计](http://ww1.sinaimg.cn/large/89d0a2e1ly1fqeqvsivq4j20sg0lcaee.jpg)\n\nlego 参考了公司内普遍使用的增加一层 node 层作为渲染层的方案，然而工程上利用 webpack 可以分别打包以及 js 可以在双端运行的特性，实现了前后端同构方案，这样再开放上无需在 node 层增加开发人员，具体的实现请参考[【erʌpt】一个前后端同构的设计思想](http://gongbaodd.github.io/fe/2017/08/15/Er%CA%8Cpt-%E4%B8%80%E4%B8%AA%E5%89%8D%E5%90%8E%E7%AB%AF%E5%90%8C%E6%9E%84%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3.html)。\n\n### Qxf 作为 node 服务框架\n\nQxf 是 Qunar 的 node 服务框架，基于 Express，Express 也是目前被最广泛使用的框架。\n\n* q-version QZZ版本管理\n* q-logger 日志系统\n* q-exception 异常捕获\n* q-monitor 监控系统\n* q-healthcheck 响应Ngix请求\n\nQxf 包含的模块使得 lego 在搭建初期不需要重建轮子，节省了很多时间。同时因为其基于 Express,　更有利于搭建　restfull 接口。\n\n### Preact 作为同构渲染框架\n\n![Preact logo](https://opencollective-production.s3-us-west-1.amazonaws.com/3fd44c50-b42b-11e6-8e7e-5955bbcb143d.png)\n\nlego 使用 preact 作为前后端的渲染框架，preact 的包大小是 react 的 1/20，同时 preact 对 typescript 的支持是目前除 angular 外最好的框架。\n\n### 统一路由地址\n\nlego 在 node 端使用　preact-router 渲染路由路径，而在客户端结合　HashHistory 使得客户端无需刷新页面更新路由。\n\n```shell\n# node\n\n/bindCard/default/index\n\n# client\n\n/bindCard/defaut/index#/index/auth\n```\n\n### HTTP 连接\n\n起初 lego 使用的是 fetch 作为前后端接口交互框架，然而实际使用后我们全部改用了 Axios，主要原因有下。\n\n* Axios 双端完全兼容，只有部分参数不同。\n* Axios 支持超时，超时后可以 abort 不多于占用 socket。\n* Axios 可以配置中间件用来处理登录情况。\n\n## QConfig 配置\n\n在 QConfig 中，每一个项目都有自己的配置文件（JSON类型）\n\n![QConfig配置](http://ww1.sinaimg.cn/large/89d0a2e1ly1fqer9g1ivej20lg0y0gnu.jpg)\n\n每个 JSON 文件都有一个 solutions 字段，里面是按照来源存放的配置文件，每次使用的时候配置文件会和 default 混合一次确保配置的完整性。\n\n![JSON](http://ww1.sinaimg.cn/large/89d0a2e1ly1fqerbb3zwqj20ia0d6dgr.jpg)\n\n## Hybrid 桥\n\n用于 Qunar 端的 HYSDK 并没有完全适配公司的客户端，我们开发了 PayDevice 来补足短板\n\n```typescript\nclass PayDevice {\n    static readonly NAME_IOS_FIX: string;\n    static readonly NAME_IPX_FIX: string;\n    static readonly QUNAR_IPHONE: string;\n    static readonly QUNAR_APHONE: string;\n    static readonly GONGLUE: string;\n    static readonly FIX_NAV_IOS_HEIGHT: number;\n    static readonly FIX_NAV_IPX_HEIGHT: number;\n    static readonly FIX_STATUS_IOS_HEIGHT: number;\n    static readonly FIX_STATUS_IPX_HEIGHT: number;\n    static readonly FIX_BOTTOM_IPX_PAD: number;\n    private static readonly regularExp;\n    private static getLowerUA;\n    private static getMatchArray;\n    static getAppProtocol: typeof getAppProtocol;\n    static sniff: typeof sniff;\n    static isIPad: typeof isIPad;\n    static isIPod: typeof isIPod;\n    static isIPhone: typeof isIPhone;\n    static isCtripApp: typeof isCtripApp;\n    static isApp: typeof isApp;\n    static isAppIPhoneX: typeof isAppIPhoneX;\n    static isCtripAppIPhoneX: typeof isCtripAppIPhoneX;\n    static trim: typeof trim;\n    static getCookie: typeof getCookie;\n    static getQN270: typeof getQN270;\n    static getBodyFixClass: typeof getBodyFixClass;\n    static sniffmiddleware: typeof sniffmiddleware;\n}\n```\n\n## 监控系统\n\n我们修改了 Qxf 的 logger 和 monitor 以适配支付中心的鹰眼系统，更新　member-mobile 的 payGa 以接收前端埋点。\n\n## 支付组件库\n\n### PayUI\n\n我们经过和 UE 协调，利用 Yo 制作了一套 PayUI.css，可以直接作为支付中心样式使用。\n\n![PayUI](http://ww1.sinaimg.cn/large/89d0a2e1ly1fqesxkdjt7j20c80a074u.jpg)\n\n### TS PAY COMS\n\n利用 payUI 制作的组件库，使用 rollup commonJS 打包，提供工厂方法构建。\n\n![TS PAY COMS](http://ww1.sinaimg.cn/large/89d0a2e1ly1fqet3rrs2yj217c0uwwjt.jpg)\n\n```javascript\nexport const FormID = Factory.input(\n    Component, h, { CheckUtil, PayInput, PayList, MemICO },\n);\n\nexport const FormIDTlist = Factory.list(\n    Component, h, { FormID, CheckItem, PayPopup, PayList },\n);\n```\n\n## 打包系统优化\n\n![打包系统](http://ww1.sinaimg.cn/large/89d0a2e1ly1fqes6t5852j21k60uy1kx.jpg)\n\n### typescript编译优化\n\n使用 HappyPack 分别使用３个线程处理前后端编译，利用 ForkTsCheckerWebpackPlugin 使用一个线程做类型检查，使用 cache-loder 缓存已编译的内容，减少重复编译时间。\n\n经过优化，ts 的编译时间减少到原来的 1/2。\n\n### CSS的优化\n\n#### 使用 PostCSS 逐步代替 Yo\n\nYo 的缺点\n\n* 使用 SASS 逐文件单线程编译，效率慢\n\n* 使用的是 SASS 语法，不是原生 CSS 语法，并只会对使用 Yo 语法的地方做浏览器兼容处理,没有编辑器支持\n\n```CSS\n/*** Yo 源代码 ***/\n.foo {\n    @include yoflex();\n}\n\n.bar {\n    display: flex;\n}\n```\n\n```CSS\n/*** 生成代码 ***/\n.foo {\n    display: -moz-flex;\n    display: -webkit-flex;\n    display: flex;\n}\n\n.bar {\n    display: flex;\n}\n```\n\n#### 使用 CSS-modules 避免全局类名覆盖\n\nCSS 一直存在很严重的类名覆盖问题，由于 CSS 的类名都存在于一个全局域中，当两个组件中存在重名类名，其中一个会被覆盖。\n\n```CSS\n/**a-button.css**/\n.button {\n    background: red;\n    background: blue;\n}\n/**b-button.css**/\n.button {\n    background: blue;\n}\n```\n\n使用 CSS-modules 后，编译好的 CSS 文件会处理掉重名类名。\n\n```CSS\n.button-a {\n    background: red;\n}\n.button-b {\n    background: blue;\n}\n```\n\n### 发布使用 node_cache_share 缓存 node_modules\n\n### 异步处理生成文件\n\n使用了以上优化，我们最终将编译速度由初期的五分钟优化到现在的26秒。\n\n## 过去一年遇到的问题\n\n* 大部分开发人员的水平仍然停留在13年左右，知道的优化方案相对过时，对于“枚举”、“泛型”、“私有成员”等定义都比较模糊。\n* 公司内部前端解决方案不统一，平台部门的解决方案往往在重复造轮子，到我们这里必须要修改后才能使用。\n* 很多人抵触学习新技术，往往是需要用的时候再去学习，当然对应的前端发展速度也前所未有的快。\n* 因为lego放弃了最初微服务的方案，杂糅很多业务逻辑后，现在功能比较臃肿，新功能的推广只能循序渐进。\n* 每次修改需要等待编译，开发起来比较慢。\n* restful API只是一个思想，还没有所谓的最佳实践，推广至开发人员后，一个接口的定义会跟开发人员的能力而显得参差不齐。\n\n## 解决方案\n\n* 【开发能力】增加技术分享，补足技术瓶颈\n* 【重复造轮子】我们建立了qtalk群，互相分享各部门的使用经验\n* 【强制代码规范】修改编译配置项阻止不规范的代码上线\n* 【减少冗余业务】和产品讨论，把没必要的业务逻辑删除\n* 【加快编译速度】打开多线程、缓存，使用 webpack-server 和 nodemon 处理本地开发环境\n* 【考虑新的传输协议】考虑使用 object-validator 或者 apollo + graphQL 实现。\n","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/04/19/CSS-3D.md","slug":"2018/04/19/css-3d","body":"# 用CSS制作3D动画\n\n![](http://ww1.sinaimg.cn/large/89d0a2e1ly1fqi1sjijteg20np0dce82.gif)\n\n直到前几天，我需要做一个简单的3D动画时候，我才意识到其实我还没有用CSS做过3D动画。\n\n很多人其实认为只要写下\n\n```CSS\n.3d-Object {\n    transform: rotateY(180deg);\n}\n```\n\n但最终效果并不是三维的旋转，原因是它的父元素必须是一个有深度的盒子。\n\n```CSS\n.box {\n    perspective: 800px;\n}\n\n.box .3d-Object {\n    transform: rotateY(180deg);\n}\n```\n\n如果是希望旋转180度后不展示背面可以添加 backface-visibility。\n\n```CSS\n.box .3d-Object {\n    transform: rotateY(180deg);\n    backface-visibility: hidden;\n}\n```\n","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/05/28/inkscape.md","slug":"2018/05/28/inkscape","body":"# Inkscape 简单使用\n\n## 改变画布为横版\n\nFile - Document Properties - LandScape\n\n## 旋转对象\n\n慢速度点击两次\n\n## 多选\n\n使用 shift 和 鼠标左键\n\n## 小试牛刀\n\n![](http://ww1.sinaimg.cn/mw690/89d0a2e1ly1frr2us5d6kj21uw1dyaft.jpg)","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/06/22/Meteor-ToDoAPP.md","slug":"2018/06/22/meteor-todoapp","body":"# 使用 Meteor 快速搭建TODO APP\n\n代码在 https://github.com/gongbaodd/MeteorTodoAPP 这里做一下简单记录。\n\n## 把冰箱门打开\n\n```shell\nmeteor create app\n```\n\n打开 app 文件夹，可以看到 meteor 项目了，官网有各个文件夹的说明， 在此不赘述。\n\n```shell\nmeteor\n```\n\n可以在 localhost:3000 看到初始项目了。\n\n到```.meteor/package```下删除autopublish 和 insecure，添加 apollo 和 accounts-passwd\n\n## 把大象放进去\n\n下面记录一下踩到的坑。\n\n### CSS\n\ncss很尴尬，我想用postcss，但貌似meteor的postcss包并不是很给力。自带的css的打包功能貌似不能用（起码我没整出来）。好在 ecmascript 包可以引用 css。\n\n项目直接使用了bulmaCSS， 很方便。\n\n### Apollo增加用户token\n\n要用到Apollolink，在请求头里面添加meteor-login-token，在后面的 resolver 里面的 context 对象里面就有 userId 这个值了。\n\n```JavaScript\nconst apolloLink = new ApolloLink(\n    (operation, forward) => {\n        const token = Accounts._storedLoginToken();\n        operation.setContext(\n            _ => ({\n                headers: {\n                    'meteor-login-token': token,\n                }\n            })\n        );\n        return forward(operation);\n    }\n);\n```\n\n### Graphql\n\ngraphql文件修改了并不能触发重启，而且有的时候甚至一直读缓存而不在乎文件有修改，要把 makeExecutableSchema 参数做修改之后才能正常运行。\n\n## 总结\n\n用 Meteor 做项目的确是目前我知道的最快速了，主要是不用考虑数据库的种种，要知道，即使是黑盒，对于前端工程师来说，数据库还是很少触碰的。\n\nGraphql，最大的优势就是给接口做了个强制定义，以后不必去维护什么v1、v2的接口了。\n","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/07/07/GulpV4-Task.md","slug":"2018/07/07/gulpv4-task","body":"\n# Gulp v4 之后 task 必须传函数\n\nhttps://fettblog.eu/gulp-4-parallel-and-series/\n\n如链接所说，为实现并行操作，原来的\n\n```javascript\ngulp.task(\"default\", [\"css\", \"html\", \"js\"]);\n```\n\n已经改为\n\n```javascript\ngulp.task(\"default\", gulp.parallel([\"css\", \"html\", \"js\"]));\n```\n\n而如果想串行执行的话可以用`gulp.series`\n","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/07/10/Apollo-Meteor.md","slug":"2018/07/10/apollo-meteor","body":"\n# 没有手动配置过 Apollo 都不知道 Meteor 帮你做了多少事\n\n## Server 端\n\n```ts\nexport class AppModule implements NestModule {\n  graphiql(customer: MiddlewareConsumer) {\n    if (!isDev) return;\n    customer\n      .apply(graphiqlExpress({ endpointURL: graphql }))\n      .forRoutes(graphiql);\n  }\n  graphql(customer: MiddlewareConsumer) {\n    customer\n      .apply(graphqlExpress(req => ({ schema, rootValue: req })))\n      .forRoutes(graphql);\n  }\n  configure(customer: MiddlewareConsumer) {\n    this.graphiql(customer);\n    this.graphql(customer);\n  }\n}\n```\n\n## client\n\n```typescript\n@Component({\n  components: {\n    MeCard,\n    Links\n  },\n  apollo: {\n    hello: {\n      query: gql`\n        {\n          hi\n        }\n      `,\n      update(data) {\n        return data.hi;\n      }\n    }\n  }\n})\nexport default class IndexPage extends Vue {\n  data() {\n    return {\n      hello: \"\"\n    };\n  }\n}\n```\n\n同时要在 nuxt 配置中增加 apollo 的配置项\n\n```typescript\n[\n  \"@nuxtjs/apollo\",\n  {\n    clientConfigs: {\n      default: {\n        httpEndpoint:\n          process.env.HTTP_ENDPOINT || \"http://localhost:3000/graphql\"\n      }\n    }\n  }\n];\n```\n","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/07/27/pixiJS-L.md","slug":"2018/07/27/pixijs-l","body":"# pixiJS 的 l-system 实现\n\n![](https://i0.hdslb.com/bfs/archive/a0a9d5e73809d1a5b41a45cb848575b9af54c865.jpg@320w_200h_100Q_1c.webp)\n\n[pixiJS 的 l-system 实现](https://www.bilibili.com/video/av28166320)","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/08/05/CSS Grid Layout.md","slug":"2018/08/05/css-grid-layout","body":"# CSS Grid Layout 使用总结\n\n最近被猎头催的实在不行了（真的，感觉他们更担心我找不到工作），于是我写了份简历给他们。当然了，既然最后要的是PDF，这种机会不试试新的CSS布局还真说不过去。\n\n##　实现圣杯布局\n\n提到CSS布局，自然想到了圣杯，一行header，中间是sidebar和content，底下是footer。\n\n```css\n.grid {\n    display: grid;\n    grid-template-area: \"header header  header\"\n                        \"left   content right\"\n                        \"footer footer  footer\";\n}\n\n.item1 {\n    grid-area: header;\n}\n\n.item2 {\n    grid-area: left;\n}\n\n.item3 {\n    grid-area: content;\n}\n\n.item4 {\n    grid-area: right;\n}\n\n.item5 {\n    grid-area: footer;\n}\n```\n\n很简单，使用 Grid Layout 的最大好处是页面布局由CSS全部接管，意味着想把```.item5```改成header只需要修改```grid-area```即可，```grid-template-area```结合 media query　可以实现适配不同设备，如打印机布局相比于屏幕来说界面比较窄。\n\n```CSS\n@media print {\n    .grid {\n        grid-template-area: \"header\"\n                            \"left\"\n                            \"content\"\n                            \"right\"\n                            \"footer\";\n    }\n}\n```\n\n## 实现无大小限制瀑布流\n\n前端瀑布流在网格布局之下，结合``` grid-auto-flow: row dense;```可以实现大小不一的网格元素按照最合理的形式行填充。\n\n```css\n.grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, 100px);\n    grid-template-rows: 100px;\n}\n\n.size-1 {\n    grid-column: span 1;\n    grid-row: span 1;\n}\n\n.size-2 {\n    grid-column: span 2;\n    grid-row: span 2;\n}\n\n.size-3 {\n    grid-column: span 3;\n    grid-row: span 3;\n}\n\n```\n\n## 兼容性\n\n并没有测试IE11，从caniuse可以看到，主流浏览器除了IE11都是不需要家前缀的，IE11需要加-ms前缀（道听途说autoprefixer不会补grid，所以最好手改）。\n\n国产浏览器兼容性就不理想了，除了UC，百度、QQ浏览器都不支持，汗啊，看来浏览器这行业真的是不挣钱了，所以如果要支持这些浏览器还需要再等等。\n","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/08/07/React16.md","slug":"2018/08/07/react16","body":"# React16 模拟输入框输入事件\n\n照往常，我会新建一个input事件然后dispatch一下，今天在instagram上面试验失败了。原因是React16 内部定义了descriptor拦截了value.\n\n```javascript\nlet input = $0;\nlet value = 'new value';\n\nlet event = new Event('input', { bubble: true });\nevent.simulated = true;\n\nlet tracker = input._valueTracker;\ntracker && tracker.setValue(value);\n\ninput.value = value;\ninput.dispatchEvent(event);\n```\n","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/08/14/AframeJS.md","slug":"2018/08/14/aframejs","body":"# AframeJS 学习笔记\n\n## 创建项目\n\n使用 [npm/angle](https://www.npmjs.com/package/angle)\n\n## ECS(Entity-Component-System)\n\n不懂百度。\n\n## 组件库\n\nhttps://aframe.io/aframe-registry/\n\n## 博客\n\nhttps://aframe.io/blog/\n\n","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/08/22/mock-fs-io.md","slug":"2018/08/22/mock-fs-io","body":"# 单元测试时使用mock-fs模拟IO返回值\n\n最近换工作到了一家对测试要求比较高的公司，相比以前仅仅完成Appnium完全匹配不同，这里要求使用jest自动化测试覆盖率达到80%+，[此处应有jest cheat sheet](https://devhints.io/jest)。\n\n工作过程中有很多需要读配置文件的地方，做法是在本地对应位置放上文件，然后配置ignore掉这个文件进行测试，然而这并不是个很优雅的方式（尤其是当代码中有判断此配置是否存在时，需要手动移动文件），此时即可利用mock-fs。\n\n## 简单使用\n\n```javascript\nconst mock = require('mock-fs');\n\nmock({\n  'path/to/fake/dir': {\n    'some-file.txt': 'file content here',\n    'empty-dir': {/** empty directory */}\n  },\n  'path/to/some.png': Buffer.from([8, 6, 7, 5, 3, 0, 9]),\n  'some/other/path': {/** another empty directory */}\n});\n```\n\n指定的文件夹地址是默认相对于process.cwd()的，当然也可以配置其它地址。执行mock之后，所有有关IO的部分就都被修改了。\n\n## 需要注意的地方\n\n* 因为强制修改了IO，你会发现require也不好用了所以一般放在require之后\n* 记得要在每个用例执行之后回收mock状态\n\n```javascript\ndecribe('# test', () => {\n    const mockfs = require('mock-fs');\n    beforeEach(() => jest.resetModule());\n    afterEach(() => mockfs.restore());\n    it('should do ...', () => {\n        const foo = require('foo.js');\n        mockfs({...});\n        expect(foo)...\n    });\n})\n```","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/08/23/prettier-eslint.md","slug":"2018/08/23/prettier-eslint","body":"# 如果prettier和eslint冲突了怎么办\n\n最近工作发现小伙伴都不喜欢用prettier，原因是格式化后的代码其实和之前约定的eslint有出入。\n\n其实安装prettier-eslint之后，你的prettier就不会将代码改成违反eslint规则的样子，在vscode配置中，打开prettier.eslintIntegration。这样自动保存也会避开eslint。\n\n另外prettier文档中也有如何解决二者冲突的方法 https://prettier.io/docs/en/integrating-with-linters.html。","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/08/24/eslint-plugin-typelint-jsdoc-linting.md","slug":"2018/08/24/eslint-plugin-typelint-jsdoc-linting","body":"# eslint-plugin-typelint借助jsdoc实现无编译linting级别的类型检查工具","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/08/28/Functional Reactive Programming-baconjs.md","slug":"2018/08/28/functional-reactive-programming-baconjs","body":"# Functional Reactive Programming 框架 baconjs","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/08/29/OpenAPI-swagger.md","slug":"2018/08/29/openapi-swagger","body":"","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/09/23/ibus.md","slug":"2018/09/23/ibus","body":"# 记一个关于 iBus 的教训\n\n大概今年开始，chrome在linux里面就没办法正常看输入框，到了8月更惨，vscode和atom都完蛋了，完全看不到输入法的面板（也许我得考虑英文输入了）。\n\n其实是个hidpi的问题，chromium对输入光标的位置处理和linux处理不同，导致输入法都跪了，没错，不只是fcitx。这次我就以为这是fcitx的bug，换了ibus，结果ibus其实也很多坑。\n\n## 安装和配置ibus\n\nlinux 的profile其实比较混乱， 有.bashrc/.bash_profile/.profile/.xprofile/.environments等等，而且这些点文件在/etc中都有全局备份，所以要检查GTK_IM_CONFIG就要挨个文件找。\n\n记得安装ibus-table，现在gnome和ibus的整合比fcitx好，装好之后可以在setting里面切换输入法。\n\n但是！注意，装了ibus就没有搜狗拼音了，而且并不能解决hidpi问题。无奈我又把fcitx装回来了。\n\n## 不过并不是没有好消息\n\n在KDE环境下面跑的vscode还是能显示的，开心\n","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/10/13/node.md","slug":"2018/10/13/node","body":"# 阿里深圳node地下铁\n\n## 渲染服务化，egg.js北斗\n\n最早同机部署，利用热更新，减少node发布频率。\n\n使用node做页面渲染，渲染好的html给java层，最终分发还是给java。\n\n资源争抢，linux [cgroup](https://wiki.archlinux.org/index.php/Cgroups)，但是没实现。\n\n静态资源分发系统，使用推送的方式（其实我没听懂那面拉取说的是啥。。。），基于阿里的[DragonFly](https://alibaba.github.io/Dragonfly)。\n\n## node devops\n\n[sandbox](https://github.com/midwayjs/sandbox)\n\n代码治理，哎呀就是linting啊typechecking啊。\n\n包治理，到底是大厂，包有问题还能查出来。居然还知道那些应用用过哪些包。\n\n数据治理，错误日志分析。\n\n链路分析\n\n远程调试，可以在办公区调试服务机器。\n\n故障演练，内部平台不给人看啊。[QCon](http://www.infoq.com/cn/presentations/ali-electricity-supplier-fault-management-and-fault-drills-practice) 找到了视频，有机会看下。\n\n另外可以看下[pandora.js](https://github.com/midwayjs/pandora)\n\n## Node-FFI\n\n牛逼你深圳，上哪儿听js的分享能谈到IoT啊。\n\n应用背景是想要用JS去调用C的动态链接库。毕竟JS写起来容易些。\n\n原来多语言交互，通过共享内存、RPC调用或者外部函数调用（FFI）。\n\n[mJS](https://github.com/cesanta/mjs)比较感兴趣，是[mongoose os](https://mongoose-os.com/)的js运行语言。\n\n## Tarsjs\n\n[tars](http://tars.tencent.com/base/tars_index/en/index.html)听起来巨牛逼，没听懂。。。\n\n话说阿里的投屏系统是什么，还带录屏功能，貌似我在mac上没用过投屏系统啊。\n\ntarjs提供了一套高性能的RPC协议，可以用 @tar/stream 获取。\n\n太多了，听不懂啊。\n\n进程管理，进程重启，无损重启，数据监控。\n\n### node监控指标：\n\nmemUsage、 cpuUsage、 eventLoopLag：队列延迟， libuv\n\n### LongStackTrace组件的实现\n\n[问题背景](https://www.ctolib.com/topics-134009.html)\n\n[具体代码](https://github.com/medns/longstack)\n\n","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/10/16/Get.md","slug":"2018/10/16/get","body":"# 世纪话题Get参数传数组\n\n哎呀，这个话题，其实挺简单的，但是仔细想起来，URL的请求参数如下，如果要写数组怎么办？\n\n```\na=1&b=2&c=3\n```\n\n其实无非是解析这个字符串，但是由于没有标准方案，所以大家的处理方法五花八门。我遇到过的方式如下\n\n## 数组标识\n\n```\na[1]=1&a[2]=2\n```\n\n或者\n\n```\na[]=1&a[]=2\n```\n\n这种做法，jquery时代很多，可以很简单分辨出数组，但是取到数据的时候要单独处理key，因为直接取到的值是`a[]`\n\n## 序列化\n\n```\na=%5B1%2C2%5D\n```\n\n少说废话，直接stringify，然后发现URL里面要转义的东西太多了，然后后端取到值还要parse下，因为传来个字符串\n\n## 分隔符分割\n\n```\na=1%2C2\n```\n\n莫不如加个`,`处理下？缺点，找错分隔符的话还是要处理转义，后端还是要单独split下\n\n## 其实有标准的\n\n根据[URLSearchParam](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams)\n\n```\na=1&a=2\n```\n\n如此生成的URLSearchParam对象（类似于Map对象），直接调用```get('a')```方法只会取到一个值，但是执行```getAll('a')```可以获取到数组\n\n既然是标准，koa的koa-qs也是这么处理数组的。\n\n另外URLSearchParam还有一定容错能力，所以即使url被浏览器截断（其实不太会，因为此时报错414）也不会有太大问题。\n","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/10/22/moment.md","slug":"2018/10/22/moment","body":"\n# moment 获取跨越一段时间的月和周\n\n这个实现是同步实现，其实最好改成异步实现。\n\n另外关于```time.startOf('month')```竟然传递的是引用，简单说```time```改变之后这个值还会变，所以要```clone```一下。\n\n```javascript\n/**\n * @param {moment.Moment} _startTime\n * @param {moment.Moment} _endTime\n * @returns {moment.Moment[]}\n */\nfunction getMonths(_startTime, _endTime) {\n\tconst startTime = _startTime.clone();\n\tconst endTime = _endTime.clone();\n\tconst times = [];\n\twhile (\n\t\tendTime > startTime ||\n\t\tstartTime.format('YYYYMM') === endTime.format('YYYYMM')\n\t) {\n\t\tconst month = startTime.startOf('month').clone();\n\t\ttimes.push(month);\n\t\tstartTime.add(1, 'month');\n\t}\n\treturn times;\n}\n\n/**\n * @param {moment.Moment} _startTime\n * @param {moment.Moment} _endTime\n * @returns {moment.Moment[]}\n */\nfunction getDays(_startTime, _endTime) {\n\tconst startTime = _startTime.clone();\n\tconst endTime = _endTime.clone();\n\tconst times = [];\n\twhile (\n\t\tendTime > startTime ||\n\t\tstartTime.format('YYYYMMDD') === endTime.format('YYYYMMDD')\n\t) {\n\t\tconst day = startTime.startOf('day').clone();\n\t\ttimes.push(day);\n\t\tstartTime.add(1, 'day');\n\t}\n\treturn times;\n}\n\n/**\n * @param {moment.Moment} startTime\n * @param {moment.Moment} endTime\n * @returns {moment.Moment[]}\n */\nfunction getWeeks(_startTime, _endTime) {\n\tconst startTime = _startTime.clone();\n\tconst endTime = _endTime.clone();\n\tconst times = [];\n\twhile (\n\t\tendTime > startTime ||\n\t\tstartTime.endOf('week').format('YYYYMMDD') ===\n\t\t\tendTime.endOf('week').format('YYYYMMDD')\n\t) {\n\t\tconst week = startTime.startOf('week').clone();\n\t\ttimes.push(week);\n\t\tstartTime.add(1, 'week');\n\t}\n\n\treturn times;\n}\n```\n\n另外， 用```moment```获取到的```unix```时间戳是秒级别的，而默认js处理```Date.now()```取到的是毫秒级别的，需要单独处理。\n","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/11/16/A-magical-printing-character.md","slug":"2018/11/16/a-magical-printing-character","body":"# 神奇的打印字符\n\n","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/12/16/postman-prescript.md","slug":"2018/12/16/postman-prescript","body":"# postman的prescript对异步代码支持不足\n\n用过postman做集成测试的话，有个prescript功能很不错，就是在执行发送请求之前要执行的脚本。\n\n我曾经以为这个prescript是直接运行的一个js脚本，执行完之后发送请求。但是貌似postman里面处理异步逻辑与v8有所不同。如果你想先发送一个POST请求，然后执行postman的PATCH请求，中间在加一个大概1s的delay，如下代码竟然能实现！\n\n```javascript\n// prescript\npm.sendRequest({...});\nsetTimeout(() => {}, 1000);\n```\n\n这个prescript其实是会对异步代码进行超时处理。无论是多层callback还是promise还是async，但唯独对setTimeout无效。\n\n```javascript\n// callbacks\npm.sendRequest({}, () => {\n    pm.sendRequest({}, () => { ... }); // 这一步回调可能会超时中断\n})；\n```\n\n```javascript\n// promise\nconst req = () => new Promise(res => {\n    pm.sendRequest({}, () => res());\n});\n\nPromise.resolve()\n    .then(req({ ... }))\n    .then(req({ ... }));// 这一步可能会超时中断\n```\n\n```javascript\n// async - await\nconst req = () => new Promise(res => {\n    pm.sendRequest({}, () => res());\n});\n~ async function() {\n    await req({ ... });\n    await req({ ... });// 这一步可能会超时中断\n} ();\n```\n\n因为只要setTimeout的timer不释放prescript就不会被超时中断，可以借助这一点防止prescript超时。\n\n```javascript\nconst TIME_OUT = 200;\nfunction stop() {\n    if (stop.done) {\n        return clearTimeout(stop.timer);\n    }\n    stop.timer = setTimeout(arguments.callee, TIME_OUT);\n}\nstop.done = false;\nstop.timer = setTimeout(stop, TIME_OUT);\n```\n\n想要停止代码的话，只需把stop.done设置为true就可以了。\n","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/12/25/CSS.md","slug":"2018/12/25/css","body":"# 两个学习CSS布局的小游戏\n\n## Grid Layout\n\n[CSS Grid Garden](http://cssgridgarden.com)\n\n![CSS Grid Garden](http://ww1.sinaimg.cn/mw690/89d0a2e1gy1fyirzvparkj21mw0vkn3d.jpg)\n\n## Flexbox Layout\n\n[CSS Flexbox Froggy](https://flexboxfroggy.com/)\n\n![CSS Flexbox Froggy](http://ww1.sinaimg.cn/mw690/89d0a2e1gy1fyis1ajl89j21n20qcafs.jpg)","collection":"blog","data":{"type":"post","category":"fe"}}]}