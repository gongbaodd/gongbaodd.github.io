{"posts":[{"id":"2015/02/08/jQuery.md","slug":"2015/02/08/jquery","body":"\n#jQuery.fn.init()\n>   接收三个参数，selector,context,rootjQuery\n\n默认的$()传的值实际上考虑了很多种情况，下面是返回值\n\n1. false,undefined,null\n    \n        return this;\n2. node节点\n        \n        this.context = this[0] = selector;\n        this.length = 1;\n        return this;\n        \n3. \"body\"\n\n        this.context = document;\n        this[0] = document.body;\n        this.selector = selector;\n        this.length = 1;\n        return this;\n        \n4. 字符串，单独标签&lt;tag&gt;&lt;/tag&gt;\n\n        document.createElement;\n        return jQuery.merge(this,selector)\n        \n5. 字符串，复杂的HTML代码&lt;span class=\"a\" &gt;\n\n        jQuery.buildFragment;\n        return jQuery.merge(this,selector)\n        \n6. 字符串，#id\n        \n        document.getElementById;\n        this.context = document;\n        this.selector = selector;\n        return this;\n        \n7. 字符串，选择器\n\n        return jQuery.find(selector);\n        \n8. 字符串，选择器，context传值为$(...)\n\n        return context.find(selector);\n        \n9. 字符串，选择器，context传值为非jquery对象\n\n        return this.constructor(context).find(selector);\n    \n    > 7、8、9可以写成\n        return (context || rootjQuery).find(selector);\n        \n10. 函数\n    \n        return rootjQuery.ready(selector);\n        \n11. jquery对象//深拷贝\n\n        this.selector = selector.selector;\n        this.context = selector.context;\n        \n12. 其它\n\n        return jQuery.makeArray(selector,this);\n\n        \n        ","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2015/03/14/LearningInThreeJS-1.md","slug":"2015/03/14/learninginthreejs-1","body":"\n# LearningInThreeJS\n## （一）基本之基本\n\n> 这些是嚼the Packt book \"Learning Threejs\"出来的一些干货，捡了些觉得可学的代码放到我的myExpirements下面的learning-in-threejs分支里面了。\n\n### 1. 简单实现(basic.html)\n\nhttps://github.com/gongbaodd/myExperinments/blob/learning-threejs/01-basic.html\n\n* 必须要有的\n\n        var scene = new THREE.Scene();\n        var camera = new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,0.1,1000);\n        var renderer = new THREE.WebGLRenderer();\n        document.getElementById(\"WebGL-output\").appendChild(renderer.domElement);\n        \n* 坐标帮助\n\n        var axes = new THREE.AxisHelper(20);\n        scenne.add(axes);\n        \n* initStates\n\n        ()=>\n            var stats = new Stats();\n\n                stats.setMode(0);\n\n                stats.domElement.style.position = 'absolute';\n                stats.domElement.style.left = '0px';\n                stats.domElement.style.top = '0px';\n\n                document.getElementById(\"Stats-output\").appendChild(stats.domElement);\n\n                return stats;\n                \n* onResize()\n\n        window.addEventListener('resize',onResize,false);\n        \n* controller\n\n            var controls = new function () {\n                this.rotationSpeed = 0.02;\n                this.bouncingSpeed = 0.03;\n            };\n\n            var gui = new dat.GUI();\n            gui.add(controls,'rotationSpeed',0,0.5);\n            gui.add(controls,'bouncingSpeed',0,0.5);\n\n### 2. 场景Scene\nhttps://github.com/gongbaodd/myExperinments/blob/learning-threejs/02-scene.html\n    \n        var scene = new THREE.Scene();\n            scene.fog = new THREE.Fog(0xffffff,0.015,100);\n            scene.overrideMaterial = new THREE.MeshLambertMaterial({color:0xffffff});\n            \n### 3. 内置几何图形 \nhttps://github.com/gongbaodd/myExperinments/blob/learning-threejs/03-geometery.html\n\n### 4. 拼装几何图形\nhttps://github.com/gongbaodd/myExperinments/blob/learning-threejs/04-basic-geometry.html\n\n### 5. 网格操作\nhttps://github.com/gongbaodd/myExperinments/blob/learning-threejs/05-mesh.html\n\n### 6. 摄像头操作\nhttps://github.com/gongbaodd/myExperinments/blob/learning-threejs/06-camera.html","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2015/03/15/THREE.JS.md","slug":"2015/03/15/threejs","body":"\n#THREE.JS参数记录\n## Renderer\n\n    var renderer = new THREE.WebGLRenderer({\n        canvas:document.getElementById('WebGL-output')\n    });\n    \n    //or\n    \n    document.getElementById('WebGL-output').appendChild(renderer.domElement);\n    \n### setClearColor\n\n    renderer.setClearColor(new THREE.Color(0x000000,1.0));\n    \n### Others\n\n    renderer.shadowMapEnabled = true;\n    renderer.setSize(w,h);\n    \n***\n\n## Scene\n\n    scene.add(mesh);\n        \n    scene.fog = new THREE.Fog(0xffffff,near,far);\n        \n***\n\n## Camera\n\n    THREE.OrthgraphicCamera(left,right,top,bottom,near,far);\n    \n    THREE.PerspectiveCamera(fov,//45\n                            width/height,\n                            near,\n                            far);\n                            \n***\n\n## Geometry\n\n* Cube\n\n        THREE.CubeGeometry(width, height, depth, widthSegments, heightSegments, depthSegments)\n    \n* Plane\n\n        THREE.PlaneGeometry(width, height, widthSegments, heightSegments)\n        \n* Sphere\n\n        THREE.SphereGeometry(radius, segmentsWidth, segmentsHeight, phiStart, phiLength, thetaStart, thetaLength)\n\n        ","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2015/05/04/ionic.md","slug":"2015/05/04/ionic","body":"\n#ionic的安装配置的坑\n>前一阵子react-native很火，甚是嫉妒啊，目前只支持iOS。。。T_T<br>\n不必要一直追求native，（虽然我还是试验了nativescript），在安卓上面还是可以尝试写写hybrid应用。\n\n---\n1. 安装ionic，安装android-sdk-r22（可以用hx.gy:1080代理）\n\n        npm install -g cordova ionic\n        \n2. 创建一个空/标签/侧边栏工程\n\n        ionic start myApp blank/tabs/sidemenu\n        \n3. 运行\n\n        cd myApp\n        chmod 777 * -R\n        ionic platform add android\n        ionic build android\n        ionic run android\n        \n4. 用浏览器测试\n\n        ionic serve","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2015/05/04/nativescript.md","slug":"2015/05/04/nativescript","body":"\n#nativescript试探报告\n>上一周得流感，再加上react-native只支持iOS，头脑一热，除了研究了ionic，还看了nativescript。感觉吧，nativescript比起QML之类的语言，最大的优点就是不必再去学习一门新的语言，因为它不是js的超集，而是完全的js，并且支持双向绑定，完全迎合现在的web开发。<br>\n用完nativescript有这么几个感受：<br>\n1. 用telerik platform ide感觉还是不错的，在安卓安装app可以同步更新软件，可惜这个ide只能使用30day。\n2. 官方给的文档经过证实已经部分过期。。。我只能拿现成的project当例子。\n3. css使能够用的，但是和react-native一样，都是真正的css的子集。\n4. 安卓上的性能不比hybrid好，等更新吧～\n5. 不用像QML一样，的确是mvvm，顶多需要学学安卓里面的xml就好了。\n6. cli需要<font color=red>翻墙！！！</font>\n\n***\n1. 安装nativescript,安卓需要r17\n\n        npm install -g nativescript\n        \n2. 创建工程\n\n        tns create app\n        \n3. 添加安卓支持\n\n        tns platform add android\n        \n4. 编译及调试\n\n        tns build android\n        tns run android","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2015/05/09/ionic-Todo guide.md","slug":"2015/05/09/ionic-todo-guide","body":"\n#ionic官方Todo Guide\n>代码在<br>https://github.com/gongbaodd/myExperinments/tree/ionic_todo\n一直想写一个app，但是懒得设计，看到ionic官方有个guide而且没有中文版，所以写一个。\n\n---\n1. 在head中添加对应的css和js\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"initial-scale=1, maximum-scale=1, user-scalable=no, width=device-width\">\n        <title></title>\n        <link href=\"lib/ionic/css/ionic.css\" rel=\"stylesheet\">\n        <link href=\"css/style.css\" rel=\"stylesheet\">\n        <script src=\"lib/ionic/js/ionic.bundle.js\"></script>\n        <script src=\"cordova.js\"></script>\n        <script src=\"js/app.js\"></script>\n        \n2. body添加controller\n        <body ng-app=\"todo\" ng-controller=\"TodoCtrl\">\n        \n3. Todo的界面，分别是左边栏（负责分配todo的类型——projects）和主界面（负责分配每一个todo项——tasks）\n        <ion-side-menus>\n            <ion-side-menu-content>...</ion-side-menu-content>\n            <ion-side-menu side=\"left\">...</ion-side-menu>\n        </ion-side-menus>\n      \n4. Todo的行为\n        angular.module('todo',['ionic'])\n        .factory('Projects',function() {\n            ...\n        }）\n        .controller('TodoCtrl',function($scope,$timeout,$ionicModal,Projects,$ionicSideMenuDelegate) {\n            ...\n        })\n\n5. 左边栏结构\n        <ion-header-bar class=\"bar-dark\">\n            <h1 class=\"title\">Projects</h1>\n            <button class=\"button button-icon ion-plus\" ng-click=\"newProject()\"></button>\n        </ion-header-bar>\n        <ion-content scroll=\"false\">\n            <ion-list>\n                <ion-item ng-repeat=\"project in projects\" ng-click=\"selectProject(project,$index)\" ng-class=\"{active:activeProject == project}\">\n                    {{project.title}}\n                </ion-item>\n            </ion-list>\n        </ion-content>\n        \n6. 左边栏行为\n        .factory('Projects',function() {\n        return {\n            all:function(){\n                var projectString = window.localStorage['projects'];\n                if(projectString){\n                    return angular.fromJson(projectString);\n                }\n                return [];\n            },\n            save:function(projects){\n                window.localStorage['projects'] = angular.toJson(projects);\n            },\n            newProject:function(projectTitle){\n                return {\n                    title:projectTitle,\n                    tasks:[]\n                };\n            },\n            getLastActiveIndex:function(){\n                return parseInt(window.localStorage['lastActiveProject'])||0;\n            },\n            setLastActiveIndex:function(index){\n                window.localStorage['lastActiveProject'] = index;\n            }\n        }\n        })\n        \n7. 主界面结构\n        <ion-header-bar class=\"bar-dark\">\n            <h1 class=\"title\">Todo</h1>\n            <!--                New Task button-->\n            <button class=\"button button-icon\" ng-click=\"newTask()\">\n                <i class=\"icon ion-compose\"></i>\n            </button>\n        </ion-header-bar>\n        <ion-content scroll=\"false\">\n        <!--                our list and list items-->\n            <ion-list>\n               <ion-item ng-repeat=\"task in activeProject.tasks\">\n                   {{task.title}}\n               </ion-item>\n            </ion-list>\n        </ion-content>\n        \n8. 主界面行为\n        .controller('TodoCtrl',function($scope,$timeout,$ionicModal,Projects,$ionicSideMenuDelegate) {\n    \n        var createProject = function(projectTitle){\n            var newProject = Projects.newProject(projectTitle);\n            $scope.projects.push(newProject);\n            Projects.save($scope.projects);\n            $scope.selectProject(newProject,$scope.projects.length-1);\n        }\n    \n        $scope.projects = Projects.all();\n    \n        $scope.activeProject = $scope.projects[Projects.getLastActiveIndex()];\n    \n        $scope.newProject = function() {\n            var projectTitle = prompt(\"Project name\");\n            if(projectTitle){\n                createProject(projectTitle);\n            }\n        };\n    \n        $scope.selectProject = function(project,index){\n            $scope.activeProject = project;\n            Projects.setLastActiveIndex(index);\n            $ionicSideMenuDelegate.toggleLeft(false);\n        };\n    \n        $ionicModal.fromTemplateUrl('new-task.html',function(modal) {\n            $scope.taskModal = modal;\n        },{\n            scope:$scope,\n            animation:'slide-in-up'\n        });\n    \n        $scope.createTask = function(task) {\n\n            if(!$scope.activeProject||!task){\n                return ;\n            }\n            $scope.activeProject.tasks.push({\n                title:task.title\n            });\n            $scope.taskModal.hide();\n        \n            Projects.save($scope.projects);\n        \n            task.title = \"\";\n        };\n    \n        $scope.newTask = function() {\n            $scope.taskModal.show();\n        };\n        $scope.closeNewTask = function() {\n            $scope.taskModal.hide();\n        };\n        $scope.toggleProjects = function() {\n            $ioncSideMenuDelegate.toggleLeft();\n        };\n    \n        $timeout(function() {\n            if($scope.projects.length == 0){\n                while(true){\n                    var projectTitle = prompt('Your first project title');\n                    if(projectTitle){\n                        createProject(projectTitle);\n                        break;\n                    }\n                }\n            }\n        })\n        });\n        \n9. 新建项目的模态对话框\n        <script id=\"new-task\" class=\"html\" type=\"text/ng-template\">\n            <div class=\"modal\">\n            <!--        Modal header bar-->\n                <ion-header-bar class=\"bar-secndary\">\n                    <h1 class=\"title\">New Task</h1>\n                    <button class=\"button button-clear button-positive\" ng-click=\"closeNewTask()\">Cancel</button>\n                </ion-header-bar>\n                <!--        Modal content area-->\n                <ion-content>\n                    <form action=\"\" ng-submit=\"createTask(task)\">\n                        <div class=\"list\">\n                        <label for=\"\" class=\"item item-input\">\n                            <input type=\"text\" placeholder=\"What do you need to do?\" ng-model=\"task.title\">\n                        </label>\n                        </div>\n                        <div class=\"padding\">\n                            <button type=\"submit\" class=\"button button-block button-positive\">Create Task</button>\n                        </div>\n                    </form>\n                </ion-content>\n            </div>\n        </script>","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2015/08/25/fekit extension.md","slug":"2015/08/25/fekit-extension","body":"\n> 这几天公司里面的 QA 资源紧张，手上压了 4 个分支还没有发布，\n> 干脆腾出时间研究研究 fekit 的 extension，最好能贡献点代码。\n\n> Fekit 是去哪儿网的前端部署及开发工具，相比于 gulp、grunt 等工具\n> ，Fekit 需要用户的学习成本较低，上手比较快。\n\n> [Fekit 的 github 地址](https://github.com/rinh/fekit)<br> >[FekitExtension 的模板地址](https://github.com/rinh/fekit-extension-template)<br> >[FekitExtension 的一个示例](https://github.com/rinh/fekit-extension-hf)\n\n# 谈谈需求\n\n我想写一个工具，在运行 fekit server 之前把项目中的每个 js 加入一个 DOM 的插入供作，\n插入一个显示编译 ip 地址的 div，在 server 结束之后将这句 js 删掉。\n\n# 怎么写？\n\n单独按照 Extension 模板里面写，没办法调试啊！！！怎么办？我干脆在\n`/usr/local/lib/node_modules/fekit/lib/commands/`\n下面开刀，在里面新建一个 msg.js,它大概是这个样子的\n\n    (function(){\n        exports.usage = \"在js里面插一个插入DOM的脚本\";\n        exports.set_options = function(optimist) {\n            optimist.alias('p','pack');\n            optimist.describe('p','插入');\n            optimist.alias('u','unpack');\n            optimist.describe('u','删除');\n            return optimist;\n        }\n        exports.run = function(options) {\n\n        }\n    }).call(this);\n\n可以运行`fekit msg`试试了\n\n# 都是些什么玩意儿\n\n## optimist\n\n看了许多现成的示例，optimist 就是给命令添加参数\n\n## options\n\n    {\n         _: [ 'msg' ],\n         '$0': 'fekit',\n         p:true,\n         cwd: '~'\n     }\n\n## module\n\n> 全局对象\n\n    {\n        id: '/usr/local/lib/node_modules/fekit/lib/commands/msg.js',\n        exports:{\n            usage: '在js里面插一个插入DOM的脚本',\n            set_options: [Function],\n            run: [Function]\n            },\n            parent:{\n                id: '/usr/local/lib/node_modules/fekit/lib/cli.js',\n                exports: {\n                     help: [Function],\n                     run: [Function]\n            },\n            parent:{\n                 id: '.',\n                 exports: {},\n                 parent: null,\n                 filename: '/usr/local/lib/node_modules/fekit/bin/fekit',\n                 loaded: false,\n                 children: [Object],\n                 paths: [Object] },\n                 filename: '/usr/local/lib/node_modules/fekit/lib/cli.js',\n                 loaded: true,\n                 children: [ [Object], [Object], [Object], [Circular] ],\n                 paths:[\n                  '/usr/local/lib/node_modules/fekit/lib/node_modules',\n                  '/usr/local/lib/node_modules/fekit/node_modules',\n                  '/usr/local/lib/node_modules',\n                  '/usr/local/node_modules',\n                  '/usr/node_modules',\n                  '/node_modules'\n                  ]\n            },\n            filename: '/usr/local/lib/node_modules/fekit/lib/commands/msg.js',\n            loaded: true,\n            children: [],\n            paths:[\n             '/usr/local/lib/node_modules/fekit/lib/commands/node_modules',\n             '/usr/local/lib/node_modules/fekit/lib/node_modules',\n             '/usr/local/lib/node_modules/fekit/node_modules',\n             '/usr/local/lib/node_modules',\n             '/usr/local/node_modules',\n             '/usr/node_modules',\n             '/node_modules'\n             ]\n        }\n\n# 开始大干一场吧\n\n通过判断 options 里面是否有 p 和 u 来判断是否打包，读 option 得 cwd 判断项目根目录，这样就能读取\nfekit.config 了，将 fekit.config 里面的每个 js 插一段脚本，在 u 里面将这段脚本删除，大功告成。\n","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2015/12/25/esprima-js.md","slug":"2015/12/25/esprima-js","body":"\n# esprima 分析 js 代码\n\n```javascript\nvar fs = require(\"fs\"),\n  esprima = require(\"esprima\"),\n  estraverse = require(\"estraverse\"),\n  escodegen = require(\"escodegen\"),\n  escope = require(\"escope\");\n\nvar funcStats = {},\n  API = [\"tag\", \"tag2\", \"mount\", \"update\", \"Tag\", \"observable\", \"Router\"];\n\nfunction addStats(name) {\n  if (!funcStats[name]) {\n    funcStats[name] = { calls: [], declarations: [], func: \"\", calling: [] };\n  }\n}\n\nvar a = {};\n\nfunction analyze(code) {\n  var ast = esprima.parse(code);\n  // var scopeMan = escope.analyze(ast);\n\n  estraverse.traverse(ast, {\n    enter: function(node, parent) {\n      if (node.type === \"FunctionDeclaration\") {\n        var name = node.id.name;\n        addStats(name);\n        funcStats[name].declarations.push(node);\n        funcStats[name].func = escodegen.generate(node);\n        recurBody(node);\n\n        function recurBody(node) {\n          if (node.body) {\n            node.body.body &&\n              node.body.body.forEach(function(n) {\n                recurBody(n);\n              });\n            if (node.type === \"WhileStatement\") {\n              node.test && recurBody(node.test);\n            }\n          } else {\n            switch (node.type) {\n              case \"CallExpression\":\n                var _name = \"\",\n                  calling = funcStats[name].calling,\n                  count = 0;\n                if (node.callee.type === \"Identifier\") {\n                  _name = node.callee.name;\n                } else if (node.callee.type === \"MemberExpression\") {\n                  _name = node.callee.property.name;\n                }\n\n                calling.forEach(function(call) {\n                  if (call === _name) {\n                    count++;\n                  }\n                });\n\n                if (count === 0) {\n                  calling.push(_name);\n                }\n\n                node.arguments.forEach(function(n) {\n                  recurBody(n);\n                });\n                break;\n              case \"IfStatement\":\n                node.test && recurBody(node.test);\n                node.consequent && recurBody(node.consequent);\n                node.alternate && recurBody(node.alternate);\n                break;\n              case \"LogicalExpression\":\n                node.left && recurBody(node.left);\n                node.right && recurBody(node.right);\n                break;\n              case \"UnaryExpression\":\n                node.argument && recurBody(node.argument);\n                break;\n              case \"AssignmentExpression\":\n                node.right && recurBody(node.right);\n                break;\n              case \"VariableDeclaration\":\n                node.declarations.forEach(function(n) {\n                  recurBody(n);\n                });\n                break;\n              case \"VariableDeclarator\":\n                node.init && recurBody(node.init);\n                break;\n              case \"ExpressionStatement\":\n                node.expression && recurBody(node.expression);\n                break;\n              case \"ReturnStatement\":\n                node.argument && recurBody(node.argument);\n                break;\n            }\n          }\n        }\n      } else if (\n        node.type === \"CallExpression\" &&\n        node.callee.type === \"Identifier\"\n      ) {\n        addStats(node.callee.name);\n        funcStats[node.callee.name].calls.push(parent);\n      } else if (\n        node.type === \"CallExpression\" &&\n        node.callee.type === \"MemberExpression\"\n      ) {\n        addStats(node.callee.property.name);\n        funcStats[node.callee.property.name].calls.push(parent);\n      }\n    },\n  });\n\n  var data = {},\n    statistic = {\n      count: 0,\n      nodes: [],\n      links: [],\n    },\n    list = [];\n\n  Object.keys(funcStats).forEach(function(key) {\n    statistic.count++;\n    data[key] = {\n      calls: funcStats[key].calls.length,\n      declarations: funcStats[key].declarations.length,\n      func: funcStats[key].func,\n      calling: [],\n      weight: 0,\n      category: 0, //0=>normal 1=>API\n    };\n\n    API.forEach(function(a) {\n      if (a === key) {\n        data[key].category = 1;\n      }\n    });\n\n    funcStats[key].calling.forEach(function(c) {\n      funcStats[c] && data[key].calling.push(c);\n    });\n\n    data[key].weight = data[key].calling.length;\n\n    statistic.nodes.push({\n      category: data[key].category,\n      value: data[key].weight,\n      name: key,\n    });\n  });\n\n  statistic.nodes.forEach(function(node, source) {\n    data[node.name].calling.forEach(function(call) {\n      statistic.nodes.forEach(function(n, t) {\n        if (n.name === call) {\n          statistic.links.push({\n            source: source,\n            target: t + 1,\n            weight: 1,\n          });\n        }\n      });\n    });\n  });\n  Object.keys(funcStats).forEach(function(key) {\n    var d = data[key],\n      w = d.weight;\n    d.name = key;\n    if (list.length) {\n      var inserted = 0;\n      list.forEach(function(item, index) {\n        if (inserted) return;\n        if (item.weight < w) {\n          list = list.slice(0, index).concat([d], list.slice(index));\n          inserted++;\n        }\n      });\n    } else {\n      list.push(d);\n    }\n  });\n  fs.writeFileSync(\"ast.json\", JSON.stringify(list));\n}\n\nif (process.argv.length < 3) {\n  throw new Error(\"Usage: index.js file.js\");\n}\n\nvar filename = process.argv[2];\nconsole.log(\"[READ]\\t\" + filename);\nvar code = fs.readFileSync(filename);\nanalyze(code);\nconsole.log(\"[DONE]\");\n```\n","collection":"blog","data":{"type":"post","category":"fe"}}]}