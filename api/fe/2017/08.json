{"posts":[{"id":"2017/08/01/archifactory.md","slug":"2017/08/01/archifactory","body":"# Achifactory私有源的坑\n\n公司的私有源从CNPM改成AchiFactory了，为的是更好的管理docker、maven、PyPI和npm，结果我在迁移的时候出现了问题。\n\nnpm install的时候一直报 module achifactory not found\n\n结果是公司的私有库没有完全同步，我的一个私有包404了，但是报achifactory not found还真是。。。","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2017/08/15/Er-pt.md","slug":"2017/08/15/er-pt","body":"# 【Erʌpt】一个前后端同构的设计思想\n\n<img src=\"http://ww1.sinaimg.cn/large/89d0a2e1ly1fikrpw68t9j208c08cdfx.jpg\" alt=\"logo\" width=\"150px\">\n\n> 最近一直没有更新博客，其实脑子里面已经装了很多东西了，略微分享一下。\n\n[精美PPT~（花了十多分钟呢](http://gongbushang.com/ng/ERUPT/)\n\n## 前提\n\n2017年前端看起来是风平浪静的，其实不然，今年WASM终于定稿了，那意味着用任何语言编译web应用得到了官方支持。由于采纳的是Mozilla的asm.js方案，兼容性上面要好得多。很多人关注的是性能上的提升，而我觉得最先活起来的应该是前后端同构。因为大批的后端程序员可以避开javascript的各种坑去使用自己的开发语言开发前端应用了。\n\n### 最近出现了很多诸如RustWeb和Golymer的框架\n\n<table>\n<tr>\n<td>\n<img src=\"http://ww1.sinaimg.cn/mw690/89d0a2e1ly1fir7gp7j3ej20r40k6abz.jpg\"/>\n</td>\n<td>\n<img src=\"http://ww1.sinaimg.cn/mw690/89d0a2e1ly1fir7nz5t8qj21040qcabg.jpg\"/>\n</td>\n</tr>\n</table>\n\n### CS架构解决的问题\n\n![现有的CS架构](http://ww1.sinaimg.cn/thumbnail/89d0a2e1ly1fir7ta8jaij20a90a9437.jpg)\n\n* 我是谁\n* 我从哪里来\n* 要到哪里去\n\n### 照以前前后端分离的方案\n\n| server | client |\n|--------|--------|\n| 返回html | 发出请求 |\n| 空闲  | 获取css、js等资源 |\n| 空闲  | 发出ajax请求 |\n| 返回数据 | 空闲 |\n| 空闲 | 渲染数据 |\n\n### 前后端同构的做法\n\n| server | client |\n|--------|--------|\n| 返回html头部 | 发出请求 |\n| 返回html碎片 | 获取css、js |\n| 返回html碎片 | 渲染碎片 |\n| 返回end | 结束页面渲染 |\n\n### 小结一\n\n前后端同构是在“我是谁？”这一部分做了优化。\n\n### 前后端同构的优势\n\n1. SEO，不多说了；\n2. 减少http请求数；\n3. 减少用户初次访问页面的白页时间；\n4. 减少因前后端分离造成的技术障碍。\n\n### 前后端同构的策略\n\n1. 精确渲染\n2. 结构渲染\n3. 模板渲染\n\n#### 精确渲染\n\n把页面首屏的内容都渲染出来。\n\n![精确渲染](http://ww1.sinaimg.cn/mw690/89d0a2e1ly1fiylzsf71jj20hs0b4mxf.jpg)\n\n#### 精确渲染的评价\n\n优点\n\n* 渲染出来的页面就是用户看到的\n\n缺点\n\n* 部分后端请求会阻塞页面的渲染\n\n#### 结构渲染\n\n把初始状态的首屏渲染出来然后在同一请求中把应该展示的状态展示出来。\n\n![结构渲染](http://ww1.sinaimg.cn/mw690/89d0a2e1ly1fiym4385dfj20hs0b4jro.jpg)\n\n#### 框架渲染的评价\n\n优点\n\n* 解决了精确渲染会阻塞的问题\n\n缺点\n\n* 对于新闻类型的页面，框架渲染不利于SEO\n\n#### 模板渲染\n\n把模板直接作为html传到客户端。\n\n![模板渲染](http://ww1.sinaimg.cn/mw690/89d0a2e1ly1fiynhe7jenj20hs0b43ys.jpg)\n\n#### 模板渲染的评价\n\n优点\n\n* 字符串渲染，计算开销最小\n\n缺点\n\n* 用户会看到未渲染的模板变量\n\n### 小结二\n\n应该结合精确渲染和框架渲染\n\n## 介绍Erʌpt\n\n| | Erʌpt |  |\n|--|---|---|\n| E | Express | 这都不知道？退下吧  |\n| R | React | 这也不知道？别看了 |\n| ʌ | Values | 基于Redux的异步数据管理 |\n| P | Pipe | HTML渲染器 |\n| T | Tunnel | 同步数据管理 |\n\n## Values异步数据管理\n\n### 单向数据流\n\nreact的render函数是会不断轮询页面上绑定的数据来进行页面更新的。\n\n| value===\"bud\" | value===\"bloom\" |\n|--|--|\n|![](http://ww1.sinaimg.cn/mw690/89d0a2e1ly1fiyoot1ss4j20m80gojsi.jpg)|![](http://ww1.sinaimg.cn/mw690/89d0a2e1ly1fiyotbnajvj20m80godgz.jpg)|\n\n### Values的写法\n\n```typescript\nclass TestValues extends Values {\n    public getReducer() {\n        return combineReducers({\n            flower: TestValues.FlowerValue(),\n        });\n    }\n    public static FlowerValue = () => {\n        return ( value = \"bud\", action ) => {\n            if ( action.type === \"开花\" ) return \"bloom\";\n            if ( action.type === \"被狗踩了\" ) return \"baiduLogo\";\n            return value;\n        }\n    }\n}\n```\n\n### 怎么使用Values\n\n```typescript\nconst v = new TestValues();\nconst store = createStore(v.getReducer());\nstore.getState(); // { flower: \"bud\" }\n```\n\n### Pipe HTML渲染器\n\n用于利用React renderToString 生成HTML。\n\n### Pipe的写法\n\n```typescript\nclass TestPipe extends Pipe<Request, Response> {\n    constructor(request, response) {\n        super( request, response, minifyParams);\n    }\n    public renderPage(tunnel) {\n        this.html(`\n        <!doctype html>\n        <html>\n            <body>\n            ${this.JSX2HTML(\n                <Provider store={store}>\n                    <Page></Page>\n                </Provider>\n            )}\n            </body>\n        </html>\n        `);\n        this.response.end();\n    }\n}\n```\n\n### Tunnel同步数据管理\n\n#### Tunnel的设计\n\n前后端同构的意思是要在后端完成一部分工作，当前端getState的时候，获取的是后端生成并注入到前端作用域的state，也就是说这个对象在后端完成set工作，而在前端完成get工作。\n\n![Tunnel设计](http://ww1.sinaimg.cn/mw690/89d0a2e1ly1fiypthxr4jj20m80goq4f.jpg)\n\n#### Tunnel的使用\n\nServer\n\n```typescript\nconst t = new Tunnel(\"QNR_GLOBAL\", {}, value);\nPipe.renderPage(t)\n```\n\nClient\n\n```typescript\nconst t = new Tunnel();\nt.$state // { flower: \"bud\" }\nwindow.QNR_GLOBAL // { $state: { flower: \"bud\" } }\n```\n\n## 结论\n\nErvpt是VPT在react+express上面的实现，能够很好地实现前后端同构中的精确渲染和结构渲染，基于这套思想我相信它能带来一场新的前后端分离的革命，也就是前端能够主导全部的页面逻辑，后端专注于接口的优化。","collection":"blog","data":{"type":"post","category":"fe"}}]}