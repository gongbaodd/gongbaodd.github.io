{"posts":[{"id":"2018/10/22/moment.md","slug":"2018/10/22/moment","body":"\n# moment 获取跨越一段时间的月和周\n\n这个实现是同步实现，其实最好改成异步实现。\n\n另外关于```time.startOf('month')```竟然传递的是引用，简单说```time```改变之后这个值还会变，所以要```clone```一下。\n\n```javascript\n/**\n * @param {moment.Moment} _startTime\n * @param {moment.Moment} _endTime\n * @returns {moment.Moment[]}\n */\nfunction getMonths(_startTime, _endTime) {\n\tconst startTime = _startTime.clone();\n\tconst endTime = _endTime.clone();\n\tconst times = [];\n\twhile (\n\t\tendTime > startTime ||\n\t\tstartTime.format('YYYYMM') === endTime.format('YYYYMM')\n\t) {\n\t\tconst month = startTime.startOf('month').clone();\n\t\ttimes.push(month);\n\t\tstartTime.add(1, 'month');\n\t}\n\treturn times;\n}\n\n/**\n * @param {moment.Moment} _startTime\n * @param {moment.Moment} _endTime\n * @returns {moment.Moment[]}\n */\nfunction getDays(_startTime, _endTime) {\n\tconst startTime = _startTime.clone();\n\tconst endTime = _endTime.clone();\n\tconst times = [];\n\twhile (\n\t\tendTime > startTime ||\n\t\tstartTime.format('YYYYMMDD') === endTime.format('YYYYMMDD')\n\t) {\n\t\tconst day = startTime.startOf('day').clone();\n\t\ttimes.push(day);\n\t\tstartTime.add(1, 'day');\n\t}\n\treturn times;\n}\n\n/**\n * @param {moment.Moment} startTime\n * @param {moment.Moment} endTime\n * @returns {moment.Moment[]}\n */\nfunction getWeeks(_startTime, _endTime) {\n\tconst startTime = _startTime.clone();\n\tconst endTime = _endTime.clone();\n\tconst times = [];\n\twhile (\n\t\tendTime > startTime ||\n\t\tstartTime.endOf('week').format('YYYYMMDD') ===\n\t\t\tendTime.endOf('week').format('YYYYMMDD')\n\t) {\n\t\tconst week = startTime.startOf('week').clone();\n\t\ttimes.push(week);\n\t\tstartTime.add(1, 'week');\n\t}\n\n\treturn times;\n}\n```\n\n另外， 用```moment```获取到的```unix```时间戳是秒级别的，而默认js处理```Date.now()```取到的是毫秒级别的，需要单独处理。\n","collection":"blog","data":{"type":"post","category":"fe"}}]}