{"posts":[{"id":"2018/02/03/webpack-nestjs.md","slug":"2018/02/03/webpack-nestjs","body":"# Webpack + NestJS 全栈自动刷新\n\n> 本来想写热启动, 算了, 其实就是刷新了, 实事求是点好.\n\n去年我单位所有项目进入前后端同构的状态, 主要的工具是 NestJS 和 React,\n但还没有做过热启动, 反正开始重写主页了, 顺带着做一下.\n\n## NestJS 自动刷新\n\nNestJS 本身就利用 Nodemon 实现了文件修改后自动重启.\n\n```javascript\n{\n    \"watch\": [\n        \"src\"\n    ],\n    \"ext\": \"ts\",\n    \"ignore\": [\n        \"src/**/*.spec.ts\"\n    ],\n    \"exec\": \"node ./dev/index\"\n}\n```\n\n利用 ts-node 开发速度也比编译后再开发快很多\n\n## NestJS 无缝使用 Express\n\nNestJS 虽然基于 Express, 但是语法和 Express 区别很大, 好在可以直接把 Express 的实例作为子类使用\n\n```typescript\nasync function bootstrap() {\n    const instance = express();\n    instance.use(morgan(\"short\")); // 一个日志中间件\n    const app = await NestFactory.create(\n        ApplicationModule,\n        instance,\n    );\n    await app.listen(8080);\n}\n```\n\n## Webpack 自动刷新\n\nwebpack 自动更新, 简单地说就是用 webpackDevMiddleware 代替 express.static.\n\n先给js里面加上webpack-hot-middleware/client, 这里偷下懒, 每次 index.tsx 更新后页面都会重启.\n\n```javascript\n// webpack.config.js\nmodule.exports = {\n    entry: [\n        \"./src/public/index.tsx\",\n        \"./node_modules/webpack-hot-middleware/client.js?reload=true\"\n    ],\n    output: {\n        path: path.resolve(__dirname, \"./dist/public/\"),\n        filename: \"index.js\",\n        publicPath: \"/public\"\n    },\n}\n```\n\nserver 部分, 要把 express.static 注释掉\n\n```typescript\nconst webpackConfig: webpack.Configuration = webpackRawConfig as any;\nconst webpackCompiler = webpack(webpackConfig);\nconst webpackDevConfig: webpackDevMiddleware.Options = {\n    publicPath: webpackConfig.output.publicPath,\n};\n\ninstance.use(webpackDevMiddleware(webpackCompiler, webpackDevConfig));\ninstance.use(webpackHotMiddleware(webpackCompiler));\n```\n\n***nodemon 别加 tsx, 编译起来真的很慢***","collection":"blog","data":{"type":"post","category":"fe"}}]}