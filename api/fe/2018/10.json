{"posts":[{"id":"2018/10/13/node.md","slug":"2018/10/13/node","body":"# 阿里深圳node地下铁\n\n## 渲染服务化，egg.js北斗\n\n最早同机部署，利用热更新，减少node发布频率。\n\n使用node做页面渲染，渲染好的html给java层，最终分发还是给java。\n\n资源争抢，linux [cgroup](https://wiki.archlinux.org/index.php/Cgroups)，但是没实现。\n\n静态资源分发系统，使用推送的方式（其实我没听懂那面拉取说的是啥。。。），基于阿里的[DragonFly](https://alibaba.github.io/Dragonfly)。\n\n## node devops\n\n[sandbox](https://github.com/midwayjs/sandbox)\n\n代码治理，哎呀就是linting啊typechecking啊。\n\n包治理，到底是大厂，包有问题还能查出来。居然还知道那些应用用过哪些包。\n\n数据治理，错误日志分析。\n\n链路分析\n\n远程调试，可以在办公区调试服务机器。\n\n故障演练，内部平台不给人看啊。[QCon](http://www.infoq.com/cn/presentations/ali-electricity-supplier-fault-management-and-fault-drills-practice) 找到了视频，有机会看下。\n\n另外可以看下[pandora.js](https://github.com/midwayjs/pandora)\n\n## Node-FFI\n\n牛逼你深圳，上哪儿听js的分享能谈到IoT啊。\n\n应用背景是想要用JS去调用C的动态链接库。毕竟JS写起来容易些。\n\n原来多语言交互，通过共享内存、RPC调用或者外部函数调用（FFI）。\n\n[mJS](https://github.com/cesanta/mjs)比较感兴趣，是[mongoose os](https://mongoose-os.com/)的js运行语言。\n\n## Tarsjs\n\n[tars](http://tars.tencent.com/base/tars_index/en/index.html)听起来巨牛逼，没听懂。。。\n\n话说阿里的投屏系统是什么，还带录屏功能，貌似我在mac上没用过投屏系统啊。\n\ntarjs提供了一套高性能的RPC协议，可以用 @tar/stream 获取。\n\n太多了，听不懂啊。\n\n进程管理，进程重启，无损重启，数据监控。\n\n### node监控指标：\n\nmemUsage、 cpuUsage、 eventLoopLag：队列延迟， libuv\n\n### LongStackTrace组件的实现\n\n[问题背景](https://www.ctolib.com/topics-134009.html)\n\n[具体代码](https://github.com/medns/longstack)\n\n","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/10/16/Get.md","slug":"2018/10/16/get","body":"# 世纪话题Get参数传数组\n\n哎呀，这个话题，其实挺简单的，但是仔细想起来，URL的请求参数如下，如果要写数组怎么办？\n\n```\na=1&b=2&c=3\n```\n\n其实无非是解析这个字符串，但是由于没有标准方案，所以大家的处理方法五花八门。我遇到过的方式如下\n\n## 数组标识\n\n```\na[1]=1&a[2]=2\n```\n\n或者\n\n```\na[]=1&a[]=2\n```\n\n这种做法，jquery时代很多，可以很简单分辨出数组，但是取到数据的时候要单独处理key，因为直接取到的值是`a[]`\n\n## 序列化\n\n```\na=%5B1%2C2%5D\n```\n\n少说废话，直接stringify，然后发现URL里面要转义的东西太多了，然后后端取到值还要parse下，因为传来个字符串\n\n## 分隔符分割\n\n```\na=1%2C2\n```\n\n莫不如加个`,`处理下？缺点，找错分隔符的话还是要处理转义，后端还是要单独split下\n\n## 其实有标准的\n\n根据[URLSearchParam](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams)\n\n```\na=1&a=2\n```\n\n如此生成的URLSearchParam对象（类似于Map对象），直接调用```get('a')```方法只会取到一个值，但是执行```getAll('a')```可以获取到数组\n\n既然是标准，koa的koa-qs也是这么处理数组的。\n\n另外URLSearchParam还有一定容错能力，所以即使url被浏览器截断（其实不太会，因为此时报错414）也不会有太大问题。\n","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/10/22/moment.md","slug":"2018/10/22/moment","body":"\n# moment 获取跨越一段时间的月和周\n\n这个实现是同步实现，其实最好改成异步实现。\n\n另外关于```time.startOf('month')```竟然传递的是引用，简单说```time```改变之后这个值还会变，所以要```clone```一下。\n\n```javascript\n/**\n * @param {moment.Moment} _startTime\n * @param {moment.Moment} _endTime\n * @returns {moment.Moment[]}\n */\nfunction getMonths(_startTime, _endTime) {\n\tconst startTime = _startTime.clone();\n\tconst endTime = _endTime.clone();\n\tconst times = [];\n\twhile (\n\t\tendTime > startTime ||\n\t\tstartTime.format('YYYYMM') === endTime.format('YYYYMM')\n\t) {\n\t\tconst month = startTime.startOf('month').clone();\n\t\ttimes.push(month);\n\t\tstartTime.add(1, 'month');\n\t}\n\treturn times;\n}\n\n/**\n * @param {moment.Moment} _startTime\n * @param {moment.Moment} _endTime\n * @returns {moment.Moment[]}\n */\nfunction getDays(_startTime, _endTime) {\n\tconst startTime = _startTime.clone();\n\tconst endTime = _endTime.clone();\n\tconst times = [];\n\twhile (\n\t\tendTime > startTime ||\n\t\tstartTime.format('YYYYMMDD') === endTime.format('YYYYMMDD')\n\t) {\n\t\tconst day = startTime.startOf('day').clone();\n\t\ttimes.push(day);\n\t\tstartTime.add(1, 'day');\n\t}\n\treturn times;\n}\n\n/**\n * @param {moment.Moment} startTime\n * @param {moment.Moment} endTime\n * @returns {moment.Moment[]}\n */\nfunction getWeeks(_startTime, _endTime) {\n\tconst startTime = _startTime.clone();\n\tconst endTime = _endTime.clone();\n\tconst times = [];\n\twhile (\n\t\tendTime > startTime ||\n\t\tstartTime.endOf('week').format('YYYYMMDD') ===\n\t\t\tendTime.endOf('week').format('YYYYMMDD')\n\t) {\n\t\tconst week = startTime.startOf('week').clone();\n\t\ttimes.push(week);\n\t\tstartTime.add(1, 'week');\n\t}\n\n\treturn times;\n}\n```\n\n另外， 用```moment```获取到的```unix```时间戳是秒级别的，而默认js处理```Date.now()```取到的是毫秒级别的，需要单独处理。\n","collection":"blog","data":{"type":"post","category":"fe"}}]}