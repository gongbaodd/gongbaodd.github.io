{"posts":[{"id":"2018/02/03/webpack-nestjs.md","slug":"2018/02/03/webpack-nestjs","body":"# Webpack + NestJS 全栈自动刷新\n\n> 本来想写热启动, 算了, 其实就是刷新了, 实事求是点好.\n\n去年我单位所有项目进入前后端同构的状态, 主要的工具是 NestJS 和 React,\n但还没有做过热启动, 反正开始重写主页了, 顺带着做一下.\n\n## NestJS 自动刷新\n\nNestJS 本身就利用 Nodemon 实现了文件修改后自动重启.\n\n```javascript\n{\n    \"watch\": [\n        \"src\"\n    ],\n    \"ext\": \"ts\",\n    \"ignore\": [\n        \"src/**/*.spec.ts\"\n    ],\n    \"exec\": \"node ./dev/index\"\n}\n```\n\n利用 ts-node 开发速度也比编译后再开发快很多\n\n## NestJS 无缝使用 Express\n\nNestJS 虽然基于 Express, 但是语法和 Express 区别很大, 好在可以直接把 Express 的实例作为子类使用\n\n```typescript\nasync function bootstrap() {\n    const instance = express();\n    instance.use(morgan(\"short\")); // 一个日志中间件\n    const app = await NestFactory.create(\n        ApplicationModule,\n        instance,\n    );\n    await app.listen(8080);\n}\n```\n\n## Webpack 自动刷新\n\nwebpack 自动更新, 简单地说就是用 webpackDevMiddleware 代替 express.static.\n\n先给js里面加上webpack-hot-middleware/client, 这里偷下懒, 每次 index.tsx 更新后页面都会重启.\n\n```javascript\n// webpack.config.js\nmodule.exports = {\n    entry: [\n        \"./src/public/index.tsx\",\n        \"./node_modules/webpack-hot-middleware/client.js?reload=true\"\n    ],\n    output: {\n        path: path.resolve(__dirname, \"./dist/public/\"),\n        filename: \"index.js\",\n        publicPath: \"/public\"\n    },\n}\n```\n\nserver 部分, 要把 express.static 注释掉\n\n```typescript\nconst webpackConfig: webpack.Configuration = webpackRawConfig as any;\nconst webpackCompiler = webpack(webpackConfig);\nconst webpackDevConfig: webpackDevMiddleware.Options = {\n    publicPath: webpackConfig.output.publicPath,\n};\n\ninstance.use(webpackDevMiddleware(webpackCompiler, webpackDevConfig));\ninstance.use(webpackHotMiddleware(webpackCompiler));\n```\n\n***nodemon 别加 tsx, 编译起来真的很慢***","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/02/06/TexturePacker.md","slug":"2018/02/06/texturepacker","body":"# 用 TexturePacker 做雪碧图\n\n在 setting 里面选择格式, 如 PixiJS, 然后点击 Publish Sprite Sheet 会生成对应的 png 和 json","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/02/07/Webpack.md","slug":"2018/02/07/webpack","body":"# webpack 前端热更新\n\nWebpack仅仅实现前端热更新要比前后端同构简单得多, sourceMap 是必须加的, 用来判断哪些文件更新.\n\n```typescript\n// webpack.config.ts\nimport * as webpack from \"webpack\";\nimport * as path from \"path\";\n\nconst config: webpack.Configuration = {\n    entry: [\n        \"./src/index.tsx\",\n    ],\n    output: {\n        path: path.resolve(__dirname, \"./public\"),\n        filename: \"index.js\",\n        publicPath: \"/public/\",\n    },\n    module: {\n        loaders: [\n            {\n                test: /\\.tsx?$/,\n                loader: \"ts-loader\",\n                exclude: /node_modules/\n            }\n        ]\n    },\n    devtool: \"source-map\",\n    devServer: {\n        hot: true,\n    },\n    plugins: [\n        new webpack.NamedModulesPlugin(),\n        new webpack.HotModuleReplacementPlugin(),\n    ]\n}\n\nexport default config;\n```","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/02/08/PreactCSSTransation.md","slug":"2018/02/08/preactcsstransation","body":"# PreactCSSTransation 的使用\n\n项目地址 http://gongbushang.com:3000/gongbushang/animateCSSplayground\n\n## 结合 animate.css\n\n## 结合 preact-router\n","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/02/10/FontAwesome-5.md","slug":"2018/02/10/fontawesome-5","body":"# FontAwesome出5啦\n\nQunar的很多图片都是用iconfont实现的,\n我们有一套类似于fontawesome网站的[yicon](https://yicon.ymfe.org),\n\n然而当初构建的时候,对于使用iconfont还是svg是很受争议的.\n其结果自然iconfont胜出,而那时我见识到了svg对于制作模块化图标,\n甚至是动画图标的潜力(SMIL,很遗憾后来为了CSS3,这一功能基本上无人问津了)\n,这些对于svg唯一的缺点就是兼容性了.\n\n看到FontAwesome的第5个版本推荐使用svg, 马上拿过来试试.\n\n[参考代码](http://gongbushang.com:3000/gongbushang/fontAweSome5Playground)\n\n## 官方的React组件\n\n当然也有Vue的, 安装 @fortawesome/fontawesome @fortawesome/fontawesome-free-solid @fortawesome/react-fontawesome \n(0.1.0-3以上有d.ts说明)\n\n利用 create-react-app 快速建立工程\n\n```shell\nnpx create-react-app awesome --scripts-version=react-scripts-ts\n```\n\n```JSX\n<FontAwesomeIcon icon={faCoffee}/>\n```\n\n直接使用,非常简单\n\n## 新功能:变形\n\n比如放大(grow)或者缩小(shrink),\n后面的数字的单位是 1/16em.\n\n```JSX\n<FontAwesomeIcon\n    {...{\n        icon: faCoffee,\n        border: true,\n        fixedWidth: true,\n        transform: \"shrink-8\",\n    }}\n/>\n```\n\n上(up) 下(down) 左(left) 右(right)\n垂直翻转(flip-v) 水平翻转(flip-h) \n旋转(rotate) \n\n## 新功能:遮罩\n\n```JSX\n<Font\n    {...{\n        icon: faCoffee,\n        border: true,\n        fixedWidth: true,\n        transform: \"shrink-8\",\n        mask: faSquare,\n    }}\n/>\n```\n\n## 新功能:图层\n\n两个图标层叠\n\n```JSX\n        <span className=\"fa-layers fa-fw fa-border\">\n          <Font\n            {...{\n              icon: faCircle,\n            }}\n          />\n          <Font\n            {...{\n              icon: faCoffee,\n              transform: \"shrink-7\",\n              style: {\n                color: \"#fff\"\n              }\n            }}\n          />\n        </span>\n```\n\n图标添加数字角标,默认右上(指定位置: fa-layers-${bottom|top}-${left|right}).\n\n```JSX\n        <span className=\"fa-layers fa-fw\">\n          <Font\n            {...{\n              icon: faAlignJustify,\n            }}\n          />\n          <span className=\"fa-layers-counter\">1111</span>\n        </span>\n```\n\n叠加文字\n\n```JSX\n        <span className=\"fa-layers fa-fw\">\n          <Font\n            {...{\n              icon: faSquare,\n            }}\n          />\n          <span\n            {...{\n              className: \"fa-layers-text\",\n              style: {\n                color: \"#fff\"\n              }\n            }}\n          >\n          e\n          </span>\n        </span>\n```\n\n## 总结\n\nFontAwesome 总的来看,不考虑兼容性的话的确可以使用,\n而且随着emoji的推广, Material Design等各种设计模式的诞生,\n彩色的可模块化的图标方案会逐渐替代现有的单色图标.\n","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/02/14/Valentine's-Day-for-you-some-color-to-see.md","slug":"2018/02/14/valentines-day-for-you-some-color-to-see","body":"# 情人节给你点颜色看看\n\n![示例代码](http://gongbushang.com:3000/gongbushang/pixijsPlayground/src/master/src/12-hsl_hsv.ts)\n\nCMYK用于打印, RGB用于显示屏, 然而二者都不能直观的展示颜色, 于是有了 HSL 和 HSV 坐标系.\n\n## 简介\n\n今天看看HSL和HSV转化RGB, [维基地址](https://zh.wikipedia.org/wiki/HSL%E5%92%8CHSV%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4).\n\n![HSL与HSV](https://upload.wikimedia.org/wikipedia/commons/thumb/b/b6/HSL_HSV_cylinder_color_solid_comparison.png/800px-HSL_HSV_cylinder_color_solid_comparison.png)\n\n* H 指的是 hue 色相 [0-360]\n* S 指的是 saturation 饱和度 [0-1]\n* V 指的是 value 明度 [0-1]\n* L 指的是 light 亮度 [0-1]\n\n## HSV转换RGB\n\nHSL转换RGB有点烦(我认为是这样的), 维基里面有详细的解释, HSV到比较简单\n\n```typescript\n/**\n * hsv2rgb\n * @param {number} h hue 色相 [0, 360]\n * @param {number} s saturation 饱和度 [0, 1]\n * @param {number} v value 明度 [0, 1]\n * @returns [r, g, b] 分别取值 [0, 255]\n */\nfunction hsv2rgb(\n    h: number,\n    s: number,\n    v: number,\n) {\n    // 色相\n    while(h < 0) {\n        h += 360;\n    }\n    h = h % 360;\n    // 饱和度\n    s = s < 0? 0: s > 1? 1: s;\n    // 明度\n    v = (v < 0? 0: v > 1? 1: v)*255;\n\n    let hi = (h/60|0)%6;\n    let f = h/60 - hi;\n    let p = v*(1-s) | 0;\n    let q = v*(1-f*s) | 0;\n    let t = v*(1-(1-f)*s) | 0;\n    v |= 0;\n    switch (hi) {\n        case 0: return [v, t, p];\n        case 1: return [q, v, p];\n        case 2: return [p, v, t];\n        case 3: return [p, q, v];\n        case 4: return [t, p, v];\n        case 5: return [v, p, q];\n    }\n}\n```\n\n","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/02/19/PixiJS.md","slug":"2018/02/19/pixijs","body":"# 春节的PixiJS试炼\n\n[代码地址](http://gongbushang.com:3000/gongbushang/pixijsPlayground)\n\n1. 展示雪碧图\n\n2. 容器 Container\n\n3. 图形 Graphics\n\n4. 遮罩 Mask\n\n5. 动画 Ticker\n\n6. 文字\n\n7. 动态图\n\n8. 交互\n\n9. 自适应\n\n10. datGUI\n\n11. 上色\n\n12. HSV、HSL色彩空间\n\n13. 混合模式 blend\n\n14. 材质 texture\n\n15. 滤镜 filter\n\n16. 骨骼 snake\n\n17. 骨骼 goblin\n\n18. 粒子 particles\n\n19. 实例一 滚动的圆\n\n20. 实例二 万花筒\n\n另外还想做两个 [万花尺](https://ithelp.ithome.com.tw/articles/10195023)、[印章](https://ithelp.ithome.com.tw/articles/10195375) ，\n感觉和试炼关系不大以后补充。","collection":"blog","data":{"type":"post","category":"fe"}}]}