{"posts":[{"id":"2017/01/18/PyQt-QML.md","slug":"2017/01/18/pyqt-qml","body":"\n> 翻了翻以前保存的书签，发现了一个pyQt和QML的开发总结，代码跑起来还是有点错误，但是还是比官网的tutorial更简单直观一点。还能从里面找一点hybrid开发的idea（因为QML其实也是一种ECMAScript引擎实现）。\n\n# 在QML上下文插入变量\n\n在```view.setSource```之前将变量插入上下文之中。\n\n```python\nfrom PyQt4.QtDeclarative import QDeclarativeView\nfrom PyQt4.QtGui import QApplication\nfrom PyQt4.QtCore import QUrl\n\napp = QApplication([])\n\nview = QDeclarativeView()\n\nrootCtx = view.rootContext()\nrootCtx.setContextProperty(\"textData\", \"hi\")\n\nview.setSource(QUrl('ctxProp.qml'))\nview.show()\n\napp.exec_()\n```\n\n```qml\nimport Qt 4.7\n\nRectangle {\n    id: test\n\n    width: 1000; height: 300\n\n    Text {\n        \n        anchors.fill: parent;\n        text: textData\n    }\n}\n```\n\n# PyQt修改QML中变量\n\n这样可以先加载qml再修改内部的值，注意```property```后面是有类型的。\n\n```python\nfrom PyQt4.QtDeclarative import QDeclarativeView\nfrom PyQt4.QtGui import QApplication\nfrom PyQt4.QtCore import QUrl\n\napp = QApplication([])\n\nview = QDeclarativeView()\nview.setSource(QUrl('./ownProp.qml'))\n\nrootObj = view.rootObject()\nrootObj.setProperty(\"textData\", 'hi')\n\nview.show()\napp.exec_()\n```\n\n```qml\nimport Qt 4.7\n\nRectangle {\n    width: 1000\n    height: 300\n    id: test\n    \n    property string textData;\n\n    Text {\n        \n        anchors.fill: parent;\n        text: textData;\n    }\n    \n}\n```\n\n# 消息传递\n\nQT最主要的就是它的信号槽机制，对我的影响也很很大，以至于我现在的组件开发也在用这一套思维。那么QT怎么和QML内部进行消息传递呢？\n\n```python\nfrom PyQt4.QtDeclarative import QDeclarativeView\nfrom PyQt4.QtGui import QApplication\nfrom PyQt4.QtCore import QUrl\n\napp = QApplication([])\n\nview = QDeclarativeView()\nview.setSource(QUrl('./signal.qml'))\n\ndef on_click():\n    print(\"hi\")\n\nrootQbj = view.rootObject()\nrootQbj.mclicked.connect(on_click)\nrootQbj.setProperty('name','hello')\nview.show()\napp.exec_()\n```\n\n```qml\nimport Qt 4.7\n\nRectangle {\n    width: 1000\n    height: 300\n    id: test;\n    signal mclicked;\n    property string name;\n    \n\n    Text {\n        anchors.fill: parent;\n        text: name\n    }\n\n    MouseArea {        \n        anchors.fill: parent\n\n        onClicked: {\n            mclicked();\n        }\n    }\n    \n}\n\n```\n\n# 调用QML内部函数\n\n```python\nfrom PyQt4.QtDeclarative import QDeclarativeView\nfrom PyQt4.QtGui import QApplication\nfrom PyQt4.QtCore import QUrl\n\napp = QApplication([])\n\nview = QDeclarativeView()\nview.setSource(QUrl('./interface.qml'))\n\ndef on_click():\n    rootObject.set_text('Clicked')\n\nrootObject = view.rootObject()\nrootObject.mclicked.connect(on_click)\n\nview.show()\napp.exec_()\n```\n\n```qml\nimport Qt 4.7\n\nRectangle {\n    width: 1000\n    height: 300\n    color: \"transparent\"\n    id: test\n    signal mclicked\n    Text {\n        id: testText\n        \n        anchors.fill: parent\n        \n        text: \"Click Me\"\n    }\n    MouseArea {\n        anchors.fill: parent\n        onClicked: {\n            mclicked();\n        }\n    }\n    function set_text(text) {\n        testText.text = text\n    }   \n}\n```\n\n就酱，后面再写一篇QML调用js的文章吧🤔。","collection":"blog","data":{"type":"post","category":"tech"}}]}