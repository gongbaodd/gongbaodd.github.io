{"posts":[{"id":"2017/11/19/Qianli-Jiangshan-&-Zhao-Mengfu-&-Princess-Sissi.md","slug":"2017/11/19/qianli-jiangshan--zhao-mengfu--princess-sissi","body":"\n# 千里江山&赵孟頫&茜茜公主\n\n住在北京的最大好处就是冬天能以 40 元的价格逛故宫，并看到别处动辄上百的展品。\n\n## 千里江山图 & 江山秋色图\n\n![](http://ww1.sinaimg.cn/large/89d0a2e1ly1flobr8m5f1j21sx17awq4.jpg)\n\n![](http://ww1.sinaimg.cn/large/89d0a2e1ly1flobreiuksj21sx17ak2v.jpg)\n\n![](http://ww1.sinaimg.cn/large/89d0a2e1ly1flobrj5wybj21sx17agr3.jpg)\n\n![](http://ww1.sinaimg.cn/large/89d0a2e1ly1flobrwkyajj21sx17a7ap.jpg)\n\n千里江山图全长 11.9 米，是王希孟用半年时间画的宫廷画。\n我看到的这幅其实是清代仿品，10 月 30 号后原作就收回去休息了，\n但即使是仿品，由于原料昂贵制作耗时长，就像敦煌莫高窟，\n仿品依然珍贵。\n\n![](http://ww1.sinaimg.cn/large/89d0a2e1ly1flobqopikoj20u00u0mz0.jpg)\n\n![](http://ww1.sinaimg.cn/large/89d0a2e1ly1flobwehd2dj21lp17agzd.jpg)\n\n![](http://ww1.sinaimg.cn/large/89d0a2e1ly1flobweg4x7j21lp17an9b.jpg)\n\n![](http://ww1.sinaimg.cn/large/89d0a2e1ly1flobweeiifj21lp17aam9.jpg)\n\n![](http://ww1.sinaimg.cn/large/89d0a2e1ly1flobwdn61cj21lp17a7dd.jpg)\n\n因为看的是仿品，自然排队的人没那么多，据说去看真品的队伍能够排到午门台阶上。\n\n![](http://ww1.sinaimg.cn/large/89d0a2e1ly1flobtvt0ryj21sx17adk2.jpg)\n\n真的值得现场一看，美术书上面根本无法表现出画作的气派。\n据说这次展览高峰故宫来了 8 万人，2000 人来看画。\n\n![](http://ww1.sinaimg.cn/large/89d0a2e1ly1flobv3juxaj21sx17adoz.jpg)\n\n![](http://ww1.sinaimg.cn/large/89d0a2e1ly1flobux1lkrj21sx17a48m.jpg)\n\n![](http://ww1.sinaimg.cn/large/89d0a2e1ly1flobupd3n3j21sx17a7dm.jpg)\n\n![](http://ww1.sinaimg.cn/large/89d0a2e1ly1flobugri0sj21sx17a10w.jpg)\n\n![](http://ww1.sinaimg.cn/large/89d0a2e1ly1flobs9hxy9j21sx17aqbi.jpg)\n\n![](http://ww1.sinaimg.cn/large/89d0a2e1ly1flobtl8u88j21sx17a45a.jpg)\n\n最后还有一副，额。。。行为艺术\n\n![](http://ww1.sinaimg.cn/large/89d0a2e1ly1flobxk57cnj21lp17agt7.jpg)\n\n![](http://ww1.sinaimg.cn/large/89d0a2e1ly1flobzapfecj21lp17awql.jpg)\n\n## 赵孟頫\n\n![](http://ww1.sinaimg.cn/large/89d0a2e1ly1flobysxhesj21lp17a472.jpg)\n\n赵孟頫字画，很多人盛赞，本人表示并没觉得特别突出，\n但是无比较就看不出特别，比如和乾隆的简笔画版临摹，\n真的看得出大家的水平了\n\n![](http://ww1.sinaimg.cn/large/89d0a2e1ly1flobqbxgsgj20u00u00ts.jpg)\n\n![](http://ww1.sinaimg.cn/large/89d0a2e1ly1flobvwzffgj21sx17ajyf.jpg)\n\n但是下面这个。。。真的分不清了，上面的是仿品。\n\n![](http://ww1.sinaimg.cn/large/89d0a2e1ly1floc0u6hkej21sx17ado7.jpg)\n\n![](http://ww1.sinaimg.cn/large/89d0a2e1ly1floc0u88lbj21sx17an5q.jpg)\n\n![](http://ww1.sinaimg.cn/large/89d0a2e1ly1floc1vzs8yj21sx17awmg.jpg)\n\n![](http://ww1.sinaimg.cn/large/89d0a2e1ly1floc29m4pqj21sx17ajx0.jpg)\n\n![](http://ww1.sinaimg.cn/large/89d0a2e1ly1floc2llllxj21sx17atew.jpg)\n\n## 茜茜公主\n\n真心不了解，匈牙利的王后，展馆介绍了很多奥匈帝国的生平。\n果然有人对这段历史比较了解，还看过电影（瞬间觉得自己很 low）。\n\n![](http://ww1.sinaimg.cn/large/89d0a2e1ly1flobzkow2ej20wg17awh9.jpg)\n\n![](http://ww1.sinaimg.cn/large/89d0a2e1ly1flobzttgiij21lp17adl8.jpg)\n\n![](http://ww1.sinaimg.cn/large/89d0a2e1ly1flobzztvoxj20wg17atbp.jpg)\n\n![](http://ww1.sinaimg.cn/large/89d0a2e1ly1floc06zu0qj21lp17a11r.jpg)\n","collection":"blog","data":{"type":"post","category":"travel"}},{"id":"2017/11/22/Building.Isomorphic.JavaScript.Apps.md","slug":"2017/11/22/buildingisomorphicjavascriptapps","body":"# Building Isomorphic JavaScript Applications\n\n## 读<构建同构的JavaScript应用>有感\n\n![](https://covers.oreillystatic.com/images/0636920042846/cat.gif)\n\n这本书简单介绍了并实现了前后端js应用方案(Hapj.js)\n\n我更喜欢书后半部分各个公司对前后端同构的优化.\n\n### React\n\nReact的后端渲染存在性能瓶颈(这个我在现实使用时也考虑过,虽然我用的是Preact), 书中通过修改 mountComponent 方法缓存最近渲染的模板, 这种 LRU 算法很大的加快了后端渲染效率. 貌似 Vue 也用的这种方案.\n\n我的做法可能更粗暴点,我直接在服务启动的时候把不会变化的组件渲染出来在内存里使用了,囧. 但这是最快的做法呀(原谅~).\n\n### Angular\n\n其实是 Angular1, 由于过于依赖浏览器, 开发者抽象了很多的浏览器 API. 作者介绍了 Angular2 Universal. 我比较喜欢的是 Preboot 功能, 这个功能能够缓存用户在未渲染完成的页面的操作,并在客户端渲染完成进行操作, 这样能够解决用户过早提交表单的问题.\n\n我的确碰到表单问题了, 但我是直接把表单删了, 依赖 JS 处理 submit 按钮, 这样用户在未渲染之前是不能提交的, 遗憾的是这样就失去了表单的功能了.\n\n### Backbone\n\n没有过多了解, 书里提到后悔使用jQuery, jQuery的确是一个前后同构的 js 库, 刚有 node 的时候我也在用, 然而现在我也不用了.\n\n### C#.Net\n\n有趣的是, 前后端同构并不是 node 独享的, 书里的最后一个例子是 C# 的, 作者找到了 js 和 C# 共有的模板引擎解决了跨语言前后端同构的问题.\n\n## 注意\n\n需要注意的是，做单页面应用的时候，或许不需要考虑太多内存泄漏，毕竟页面关了资源就释放了。而做 server 端并不会。\n\n\n## 总结\n\n这本书很薄, 英文版209页而已, 后面的例子的确有很多可采纳的地方.\n","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2017/11/25/It's-not-a-particularly-worthwhile-Qin-and-Han-show.md","slug":"2017/11/25/its-not-a-particularly-worthwhile-qin-and-han-show","body":"\n# 并不是特别值得一去的秦汉展\n\n今年大都会展了一个秦汉展,为了照顾国内情绪吧,国博也展了一个.\n即使是分段领票,但还是挤得一塌糊涂.\n\n因为距离发票还有一个半小时,我就先花时间重新逛了古代中国展.\n\n![](http://ww1.sinaimg.cn/mw690/89d0a2e1ly1flvkd44in0j23vc2kw1l5.jpg)\n\n![](http://ww1.sinaimg.cn/mw690/89d0a2e1ly1flvkcz7q93j22kw3vc4qw.jpg)\n\n![](http://ww1.sinaimg.cn/mw690/89d0a2e1ly1flvkcygx92j23vc2kwu14.jpg)\n\n![](http://ww1.sinaimg.cn/mw690/89d0a2e1ly1flvkcxpaygj23vc2kw7wp.jpg)\n\n![](http://ww1.sinaimg.cn/mw690/89d0a2e1ly1flvkcauo4dj22kw3vc1l5.jpg)\n\n展厅也不是很大,基本上算是大英的一半吧.\n里面的展品基本上也是石家庄\\陕西\\山西博物馆的,所以我基本上都见过了...\n\n![](http://ww1.sinaimg.cn/mw690/89d0a2e1ly1flvkhetmk6j23vc2kwnpk.jpg)\n\n![](http://ww1.sinaimg.cn/mw690/89d0a2e1ly1flvkiah2o0j23vc2kwu13.jpg)\n\n![](http://ww1.sinaimg.cn/mw690/89d0a2e1ly1flvki8vhg9j23vc2kwu14.jpg)\n\n![](http://ww1.sinaimg.cn/large/89d0a2e1ly1flvkh2zrl9j23vc2kwhe0.jpg)\n\n![](http://ww1.sinaimg.cn/mw690/89d0a2e1ly1flvki8g3tdj23vc2kwu14.jpg)\n\n![](http://ww1.sinaimg.cn/large/89d0a2e1ly1flvkhofg03j23vc2kw1l5.jpg)\n\n![](http://ww1.sinaimg.cn/mw690/89d0a2e1ly1flvki7w3pbj23vc2kwkjs.jpg)\n\n旁边的十月革命展览蛮有意思,虽然看不懂,但是好看呀.\n\n![](http://ww1.sinaimg.cn/mw690/89d0a2e1ly1flvk75fn8qj23vc2kwx6w.jpg)\n\n![](http://ww1.sinaimg.cn/mw690/89d0a2e1ly1flvk70ny78j23vc2kwb2h.jpg)\n\n![](http://ww1.sinaimg.cn/mw690/89d0a2e1ly1flvk7b6vhjj23vc2kwhe1.jpg)\n\n![](http://ww1.sinaimg.cn/mw690/89d0a2e1ly1flvk7etysqj23vc2kwnpk.jpg)\n\n![](http://ww1.sinaimg.cn/mw690/89d0a2e1ly1flvjwxzltrj23vc2kwqvd.jpg)\n\n![](http://ww1.sinaimg.cn/mw690/89d0a2e1ly1flvk6uomu9j23vc2kwhe0.jpg)\n\n临走前看了眼最喜欢的两尊菩萨像\n\n![](http://ww1.sinaimg.cn/mw690/89d0a2e1ly1flvkk8i2ppj23vc2kw1l5.jpg)\n\n![](http://ww1.sinaimg.cn/mw690/89d0a2e1ly1flvkk19oytj23vc2kwkjs.jpg)\n","collection":"blog","data":{"type":"post","category":"travel"}},{"id":"2017/11/26/QA-node.md","slug":"2017/11/26/qa-node","body":"# 给 QA 同学看的 node 科普\n\n## 目录\n\n* 什么是 Node.js\n* 什么是 NPM\n* 什么是 QXF\n* 什么是 webpack\n* 什么是 postcss\n* 什么是 sass\n* 什么是 babel\n* 什么是 TypeScript\n* node时代下的前端发布流程\n* 单元测试\n* 端对端测试\n\n## 什么是 Node.js\n\n![](http://click-labs.com/wp-content/uploads/2014/05/nodejs_logo_green.jpg)\n\nNode.js 是一个开源的跨平台 javascript 运行时. \n初期是由 Ryan Dahl 在 2009 年设计开发.\n\n设计 Node.js 的灵感来自于一套向 Flicker 上传进度条的实现. \n\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/b/b2/Ryan_Dahl.jpg/440px-Ryan_Dahl.jpg)\n\n## Node.js 的技术细节\n\n* 基于谷歌 Chrome 的 V8 JavaScript 即时编译器\n* 单线程无阻塞 I/O\n* 基于 CommonJS 的模块机制\n* 一元化的 API\n* 事件轮询\n\n### 单线程无阻塞 I/O\n\nWeb 请求,对于即时性要求并不高,\n服务器需要处理一堆的异步事件,\n照以往的逻辑,\n我们会通过新建线程来处理这套逻辑,\n而这种方式往往是浪费资源的.\n\n在 Node.js 里面程序是单线程的,\n每一个异步事件通过事件轮询的方式解决.\n代码被要求以回调形式编写.\n\n```javascript\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello World\\n');\n});\n\nserver.listen(port, hostname, () => {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});\n```\n\n### CommonJS\n\n因为 JavaScript 的模块标准是在 2016 年才被定义的,\n所以 Node.js 使用的是另外一套模块机制 CommonJS.\n\nCommonJS 包括 require 函数和 module 对象.\n\n```javascript\nvar a = require(\"path/to/a.js\");\nmodule.exports = {...};\n```\n\n### 一元化的API\n\n使用 JavaScript 做服务器语言的框架其实很多,\n但是 Nodejs 最吸引人的一点就是一元化API.\n\n比如日志API:\n\n```javascript\nvar a = \"浏览器下打印日志\";\nconsole.log(a);\n```\n\n```JavaScript\nvar a = \".Net下打印日志\";\nprint(a);\n```\n\n```JavaScript\nvar a = \"Node.js下打印日志\";\nconsole.log(a);\n```\n\n### 事件轮询\n\n事件轮询是计算机系统的一种机制,\nJavaScript 用的是这种机制来解决单线程运行带来的问题.\n\n![](http://image.beekka.com/blog/201310/2013102001.png)\n\n## Node.js 小结\n\n![](https://img3.doubanio.com/lpic/s27269296.jpg)\n\n## 什么是 NPM\n\n![](http://playnode.io/2012/img/profile/aa.jpg)\n\nNPM 是 2010年由 Isaac Z. Schlueter 开发,\n用于 JavaScript 的模块管理.\n\nNPM 包括一个命令行的前端和一个远端资源库默认是 https://registry.npmjs.org/\n\nnpmjs.org 默认免费, 但是提交者的代码必须面向全网使用,\n也可以购买私有源, 私有模块往往如\n\n```shell\n@xxx/name\n```\n\n由于 NPM 本身开源,\n所以也有很多公司为了省钱单独搭建资源库,\n并定期和NPM同步.\n\n### NPM 在客户端的用途\n\n#### 本地安装 NPM 代码包\n\n```shell\nnpm install <package_name><?:@version>\n```\n\n执行以上代码之后,\n本地文件夹下会增加一个 node_modules 文件夹,\n里面放的是新安装的 NPM 代码包.\n\n代码包会首先按照指定的 version 安装,\n其次会按照本地 npm-shrinkwrap.json 安装,\n再次会按照本地 package.json 按装,\n最后会安装最新版.\n\n#### pacakge.json\n\n```\nnpm init\n```\n\n每一个 NPM 模块必须有一个 package.json,\n一下简单介绍几个重要字段.\n\n* name　代码包的名字\n* version 代码版本\n* main 包的入口文件\n* scripts 自定义命令\n* dependencies 本包需要安装的依赖包\n* devDependencies 本包开发时需要安装的依赖包\n\n#### npm-shrinkwrap.json\n\npackage.json 里面只记录了依赖包的版本信息,\n会导致多端执行 npm install 之后生成的 node_modules 不一致.\n\n```shell\nnpm shrinkwrap\n```\n\n执行上述命令, 本地根目录会新建 npm-shrinkwrap.json,\n文件会记录本地安装的每一个依赖包的确切版本信息以及资源库地址.\n\n#### run-script\n\npackage.json 里面的 script 字段是可以写 shell 命令的.\n\n```javascript\n{\n    \"script\": {\n        \"test\": \"node test.js\",\n        \"dev\": \"NODE_ENV=dev && node index.js\",\n        \"prd\": \"NODE_ENV=prd && node index.js\",\n        \"hello\": \"echo \\\"hello\\\"\"\n    }\n}\n```\n\n执行命令也很简单\n\n```shell\nnpm run test\n```\n\n## 什么是 Express\n\n![](http://img.kuqin.com/upimg/allimg/140806/2330395116-1.jpg)\n\nExpress 是 TJ Holowaychuk 于 2009年开发的, 基于 Node.js 平台，快速、开放、极简的 web 开发框架。\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/', function (req, res) {\n  res.send('Hello World!');\n});\n\nvar server = app.listen(3000, function () {\n  var host = server.address().address;\n  var port = server.address().port;\n\n  console.log('Example app listening at http://%s:%s', host, port);\n});\n```\n\n### Connect 中间件\n\nConnect是一个node中间件（middleware）框架。如果把一个http处理过程比作是污水处理，中间件就像是一层层的过滤网。每个中间件在http处理过程中通过改写request或（和）response的数据、状态，实现了特定的功能。\n\n```javascript\napp.use(middleware);\n```\n\n### 路由器\n\nExpress 路由器在我看来算是一种特殊的中间件,\n只不过路由结束之后整个请求就结束了.\n\n```javascript\napp.use('/calendar', router);\n```\n\n### QXF\n\nQXF 是去哪儿基于 Express 修改的 web 框架,\n在 Express 的基础上增加了面向去哪儿内部的监控等服务SDK.\n\n## 什么是 webpack\n\nwebpack 是一个模块的打包工具, 支持打包 CommonJs, AMD, ES6 modules, CSS, Images, JSON, Coffeescript, LESS, ...\n\n### 什么是 FEkit\n\nFEkit 是去哪儿之前一直使用的前端打包工具,能够打包 CSS 和 CommonJS, 现在已经不进行维护.\n\n### 什么是 ykit\n\nykit 基于 webpack, 是去哪儿目前大部分使用的打包工具.\n\n## 什么是 postcss\n\npostcss 是一个类似于 node-sass 的预编译期器,\n只不过编译的是 CSS. 它可以把更高级的 CSS 代码进行降级处理以适配兼容更古老的浏览器.\n\n## 什么是 SASS\n\nSASS 是 CSS 的扩展语言,\nnode-sass 是 SASS 的编译器,\nSASS 编译之后会生成 CSS.\n\n由于去哪儿内部大量使用的 Yo 框架基于 SASS,\n所以 node-sass 编译是一个必选项.\n\n## 什么是 babel\n\nbabel 可以对更高级的 JavaScript 代码进行降级处理,\n以适配兼容更古老的浏览器.\n\n## 什么是 TypeScript\n\nTypeScript 是对 JavaScript 的功能扩展之后的语言,\n增加了类型检查和代码编译以适应更复杂的开发需求.\n它编译后生成代码是 JavaScript.\n\n## node时代下的前端发布流程\n\n### 代码检查\n\n检查JS,TS,SASS,CSS...等文件是否有语法错误\n\n### 资源分拣\n\n* 分离前后端JS\n* 分离CSS\n* 分离大图片\n* 小图片 base64 编码\n\n### 编译检查\n\n* 编译 TypeScript\n* 编译 SASS\n\n### 向下编译\n\n* babel 向下兼容处理\n* postcss 向下兼容处理\n\n### 打包\n\n分别打包前后端代码\n\n### 客户端代码混淆压缩\n\n* JS 使用 Uglify 混淆\n* CSS 使用 cssnano 混淆\n\n### 客户端代码上传 CDN\n\n### Node 代码上传服务器\n\n### 重启服务\n\n## 单元测试\n\nJavaScript 目前已经有多套单元测试框架,\n如 Jest, Jasmine, Tape, AVA...\n\n```javascript\nconst sum = require('./sum');\n\ntest('adds 1 + 2 to equal 3', () => {\n  expect(sum(1, 2)).toBe(3);\n});\n```\n\n## 端对端测试\n\nsuperagent 可以对 http 请求进行断言处理.\n\n```javascript\nconst request = require('supertest');\nconst express = require('express');\n\nconst app = express();\n\napp.get('/user', function(req, res) {\n  res.status(200).json({ name: 'tobi' });\n});\n\nrequest(app)\n  .get('/user')\n  .expect('Content-Type', /json/)\n  .expect('Content-Length', '15')\n  .expect(200)\n  .end(function(err, res) {\n    if (err) throw err;\n  });\n```","collection":"blog","data":{"type":"post","category":"tech"}}]}