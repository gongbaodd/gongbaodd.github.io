{"posts":[{"id":"2017/07/14/egg-ts.md","slug":"2017/07/14/egg-ts","body":"# 起因\n\n今年我开始在生产环境里试用node（貌似比很多人慢了一年......）。\n由于公司node环境较低，我只能使用一款修改过的express，\n为了解决兼容问题我还用typescript进行编译（事实证明typescript简直awesome）。\n\n随着公司更新了新版的node（也不高，6.1.2）。我也有了更多选择，\n有一天我在cnode上面看到了egg的发布，打算自己试一下。\n\n## 废话少说，从快速入门开始\n\negg有一个详细的快速入门[https://eggjs.org/zh-cn/intro/quickstart.html]()，\n但是时间紧张，我直接用脚手架建项目了。\n\n    egg-init egg-example --type=simple\n\n## 目录结构\n\n我曾一度认为一个较好的框架其实不需要什么目录结构，自打我和其他人合作之后我就彻底打消这个念头了。\n\n```shell\negg-project\n├── tsconfig.json\n├── package.json\n├── app.js (可选)\n├── agent.js (可选)\n├── ts\n|   ├── router.ts\n│   ├── controller\n│   |   └── home.ts\n│   ├── service (可选)\n│   |   └── user.ts\n│   ├── middleware (可选)\n│   |   └── response_time.ts\n│   ├── schedule (可选)\n│   |   └── my_task.ts\n│   ├── public (可选)\n│   |   └── reset.css\n│   └── extend (可选)\n│       ├── helper.ts (可选)\n│       ├── request.ts (可选)\n│       ├── response.ts (可选)\n│       ├── context.ts (可选)\n│       ├── application.ts (可选)\n│       └── agent.ts (可选)\n├── config\n|   ├── plugin.js\n|   ├── config.default.js\n│   ├── config.prod.js\n|   ├── config.test.js (可选)\n|   ├── config.local.js (可选)\n|   └── config.unittest.js (可选)\n└── test\n    ├── middleware\n    |   └── response_time.test.js\n    └── controller\n        └── home.test.js\n```\n\n删了项目里的app文件夹，并把app文件夹加到.gitignore里面。\n修改tsconfig.json，css可以用别的工具解决，不在本次话题里面。\n\n```json\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2016\",\n    \"module\": \"commonjs\",\n    \"outDir\": \"./app\",\n    \"rootDir\": \"./src\"\n  }\n}\n```\n\n另外，我把view文件夹给删掉了，理由是我一直比较推崇前后端同构，所以既然有view层，前后端的模板应该一致，\n目前前端忙于组件化，基于vue和jsx的模板语言也很多（虽然性能不高，但可预见性能问题会很快解决），所以本文暂时不谈view。\n\n## OK，可以愉快地写代码了\n\n因为官网没有TS的相关文档，这里记录一下。\n\n### 新建一个Controller\n\n    // src/controller/home.ts\n    import { Controller } from \"egg\";\n    import { prefix, suffix } from \"../frags\";\n\n    export default class HomeController extends Controller {\n        async index() {\n            this.ctx.body = `${prefix}<h1>Hello World</h1>${suffix}`;\n        }\n    }\n\n### Router的引用\n\n    import { Application } from \"egg\";\n\n    export default (app: Application) => {\n        app.get('/', \"home.index\");\n    }\n\n## 结论\n\negg其实不错，能换自然是最好了。但是不换的话，如果项目已经跑起来了，\n说明egg该趟的坑都被你自己趟过了，而且已经用了typescript，async和await自然都用上了，\n所以（在我看来）generator就没更多优势了。\n\n但是如果你还没用上typescript...真的，动态一时爽，重构火葬场啊。\n\n以上。","collection":"blog","data":{"type":"post","category":"tech"}}]}