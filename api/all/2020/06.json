{"posts":[{"id":"2020/06/01/6.md","slug":"2020/06/01/6","body":"\n# 6 月总结 + 半年评价\n\n目测是全年最糟心的一个月了，主要是涉及了闲鱼上卖东西，还意外发现了一个长达一年的上当故事。\n\n## 6 月计划完成情况\n\n全部完成！撒花~\n\n- 这个月完成了 flutter 的系统学习，不仅仅在移动端，甚至考虑到可穿戴+桌面端的开发，另外揭示 Rust 就目前处理 GUI 能力还是很差的事实。\n- 闲鱼卖货的经验就是，以后尽量买快销好了，二手这玩意儿玩不好。\n- （其它收获）推荐美剧「好莱坞」，喝鸭汤的感觉。\n- （其它收获）推荐美剧「Upload」，科幻喜剧。\n- （其它收获）推荐 TVB 剧「降魔的」，感觉比「金宵大厦」。\n- （其它收获）系统的学习了 WebRTC，已经能够建造一款 P2P 应用了。\n- （其它收获）spacedesk 多设备屏幕方案。\n- （其他收获）react native for windows，开发支持 Windows 的跨平台应用。\n\n## 7 月计划\n\n- 整理手上的东西，送回大连\n- 准备离开深圳，是个好城市，然而香港对我已经没了兴趣了，再加上家人旁敲侧击，只好放弃。\n- 购买去海口的机票\n- 在万宁找一个义工\n- 把深圳这里的关系迁出\n- 开发「览胜」网站\n\n## 半年工作评价\n\n这半年做了不少工作，罗马不是一天建成的，参考几年前的一次裸辞，相比于急于求成写一个成品，这次我更关注基础。\n\n1. 学习了如何先上部署爬虫、静态网站以及编译生成应用\n2. 把和我工作相关的书，包括 JS、CSS、Flutter、WebGL、WebRTC 都系统的整理出来\n3. Rust 确定了一个基于 yew 的学习方向\n4. 深度学习找到了一个正确的学习方向\n\n下半年打算先搞定义工，然后完成「览胜」。\n","collection":"blog","data":{"type":"post","category":"plan"}},{"id":"2020/06/04/Industrial-Station!Discover-Qingshuihe.md","slug":"2020/06/04/industrial-stationdiscover-qingshuihe","body":"\n# 工业站！探清水河\n\n我一直喜欢老火车，在北京的时候就特意去过火车博物馆。其实深圳也有一个小的火车博物馆（说起来也不算，毕竟就是个网红拍照场所），叫做工业站，之前是深圳去九龙中的一个小站（清河还是草埔来着，查攻略的时候两个说法都有）。\n\n公交到章輋(shē)村站，穿过村子看到下图的桥就是工业站了。\n\n![门口用车厢做的的茶饮](./001.jpg)\n\n背这桥沿着铁路走不到一公里就能看见以前的老站台了。\n\n![铁路](./002.jpg)\n\n![工业站](./003.jpg)\n\n![老站台](./004.jpg)\n\n![东风车头](./005.jpg)\n\n火车不多，也就两辆。\n\n![两车之间](./007.jpg)\n\n![铁路](./008.jpg)\n\n虽然车站取消了，但是周边的铁路依然还用于运输，旁边还时不时有和谐号路过。\n\n![站牌](./009.jpg)\n\n![路过的和谐号](./010.jpg)\n\n车皮上面还有一些有时代感的刻字囧。\n\n![永爱TFBOYS](./011.jpg)\n\n车站的标语很有时代感，话说对于疫情还挺应景。\n\n![时代感的标语](./012.jpg)\n\n车道边的小心火车标志。\n\n![小心火车](./013.jpg)\n\n遗憾的是附近除了茶饮并没有更多玩的地方了，这对于文青来说真是打击。火车站附近大概两公里，有一个很大的洪湖公园，从地图上看，有点模仿美国中央公园的感觉。\n\n![洪湖公园的荷花](./014.jpg)\n\n走出洪湖公园就能看到地王大厦和京基 100，如果眼神好，还能看见更远的平安中心。\n\n![地王大厦和京基100](./015.jpg)\n\n大概 1~2km 之外就是深圳的老街，一直觉得这条街拉低了深圳一线城市的形象，但是 whatever，游客都来这儿。\n\n![老街](./016.jpg)\n\n![老街](./017.jpg)\n\n在老街吃了份螺蛳粉，请记住，戴口罩不要吃螺蛳粉！！！坐公交熏得我头晕眼花，途径深业上城，突然意识到我还没去过，下车去逛一下。\n\n深业上城的测温区，虽然听说过很久了，但这种测温装置我还是第一次见到。\n\n![测温区](./018.jpg)\n\n深业上城带有一点包豪斯风格的街道，很吸引各种网红来打卡，旁边也有很多来拍婚纱照的人。\n\n![深业上城](./019.jpg)\n\n![Just do IT](./020.jpg)\n","collection":"blog","data":{"type":"post","category":"travel"}},{"id":"2020/06/06/Python.md","slug":"2020/06/06/python","body":"\n# 读「Python 深度学习」数学基础\n\n- 「学习」是指找到一组模型参数，使给定的训练数据样本和对应目标上的损失函数最小化。\n- 学习的过程：随机取包含数据样本及其目标值的批量，并计算批量损失相对于网络参数的梯度（梯度可以理解为对于张量计算的倒数）。随后将网络参数沿着梯度的反方向稍稍移动（移动距离由学习率指定）。\n- 整个学习过程之所以能够实现，是因为神经网络是一系列可微分的张量运算，因此可以使用求导的链式法则来得到梯度函数，这个函数将当前参数和当前数据批量映射为一个梯度值。\n- 「损失」是训练过程中需要最小化的量，因此它能够衡量当前任务是否已经成功解决。\n- 「优化器」是损失梯度更新参数的具体方式，比如 RMSProp 优化器，带动量的随机梯度下降（SGD）等。\n","collection":"blog","data":{"type":"post","category":"book","tag":["tensorflow"],"series":{"slug":"learn-tensorflow","name":"张量麻辣烫"}}},{"id":"2020/06/07/WSL2-Keras.md","slug":"2020/06/07/wsl2-keras","body":"\n# 在 WSL2 安装 Keras 及其依赖\n\n## 安装 python\n\n首先安装 python3 和 pip3，并且使用 USTC 源。\n\n```shell\nsudo apt install python3 python3-pip python3-dev\npip3 install -i https://mirrors.ustc.edu.cn/pypi/web/simple pip -U\npip3 config set global.index-url https://mirrors.ustc.edu.cn/pypi/web/simple\n```\n\n## 安装 python 科学套件\n\n1. 安装 BLAS 库（OpenBLAS），确保可以在 CPU 上面做张量运算。\n\n   ```shell\n   sudo apt install build-essential cmake git unzip pkg-config libopenblas-dev liblapack-dev\n   ```\n\n2. 安装 Python 科学套件：Numpy、SciPy 和 Matplotlib。这是做科学计算必须的。\n\n   ```shell\n    sudo apt install python3-numpy python3-scipy python3-matplotlib python3-yaml\n   ```\n\n3. 安装 HDF5，最初由 NASA 开发，用于保存数值数据的大文件。它可以帮助 Keras 模型快速高效保存到磁盘。\n\n   ```shell\n    sudo apt install libhdf5-serial-dev python3-h5py\n   ```\n\n4. 安装 Graphviz 和 pydot-ng，这两个包用于可视化 Keras 模型。并不是必须的。\n\n   ```shell\n    sudo apt install graphviz\n    pip3 install pydot-ng\n   ```\n\n5. 安装 tensorflow\n\n   ```shell\n   pip3 install tensorflow\n   pip3 install tensorflow-gpu\n   ```\n\n## 安装 Keras\n\n使用 pip3 安装 Keras。\n\n```shell\npip3 install keras\n```\n\n可以从 GitHub 中下载 Keras 的例子\n\n```shell\ngit clone https://github.com/keras-team/keras.git\n```\n\n测试一个例子\n\n```shell\npython3 mnist_cnn.py\n```\n\n执行成功后会在`~/.keras/keras.json`生成配置文件。\n","collection":"blog","data":{"type":"post","category":"book","tag":["tensorflow","keras","wsl2","python"],"series":{"slug":"learn-tensorflow","name":"张量麻辣烫"}}},{"id":"2020/06/08/Keras.md","slug":"2020/06/08/keras","body":"\n# Keras 分类问题-电影评论分类\n\n> 「Python 深度学习」的例子在[GitHub](https://github.com/fchollet/deep-learning-with-python-notebooks)上。\n> 别问我为啥不写在 notebook 上，等我心情好就给网站加一下这给你功能吧\n\n本文的 notebook 在[这个连接](https://github.com/gongbaodd/keras_study/blob/master/3.5%20movie%20reviews.ipynb)。\n\n将 IMDB 上的 50000 条两极分化的评论，一般用于训练，一半用于测试。这些数据中 data 是词索引组成的二维数组，每一行对应每条评论，label 为 0\\1 数组，0 表示负面评论，1 表示积极评论。\n\n## 处理数据\n\n```py\nimport keras\nfrom keras.datasets import imdb\n\n(train_data, train_labels), (test_data, test_labels) = imdb.load_data(num_words = 1000)\n```\n\n数据集里面的数字可以解析成评论，每一个`data`都是如`[0, 14, 32, 56...]`的数组。\n\n```py\nword_index = imdb.get_word_index()\nreverse_word_index = dict([(value, key) for (key, value) in word_index.items()])\ndecoded_review = ' '.join([reverse_word_index.get(i-3, '?') for i in train_data[0]])\n```\n\n使用以下方法即可以把训练数据处理成 0/1 二维张量。\n\n```py\nimport numpy as np\n\ndef vectorize_sequences(sequences, dimension=10000):\n    results = np.zeros((len(sequences), dimension))\n    for i, sequence in enumerate(sequences):\n        results[i, sequence] = 1\n    return results\n\nx_train = vectorize_sequences(train_data)\nx_test = vectorize_sequesnces(test_data)\n\ny_train = np.array(train_labels).astype('float32')\ny_test = np.array(test_labels).astype('float32')\n```\n\n简单地说，x 值为 25000\\*10000 的二维数组，某个单词出现则在它所在的评论序号和对应的单词索引的位置上赋值 1，而 y 对应每个 x 行评论的正负反馈。\n\n## 构建网络\n\n使用 rlu 激活（线性整流函数 `max(0, input)`）的全链接层(Dense)就能很好处理这种输入值为标量和向量的情况，如`Dense(16, activation='relu')`。前面的 16 是一个隐藏单元，表示会将数据表示在一个 16 维的表示空间中，隐藏单元越高，能够学到的网络越复杂，计算代价也越大，但并不是越高越好，往往高了会学到不正确的模式。\n\n两个中间网络，第三层使用 sigmoid 激活（s 函数）以输出 0~1 的值\n\n![S函数](https://wikimedia.org/api/rest_v1/media/math/render/svg/a26a3fa3cbb41a3abfe4c7ff88d47f0181489d13)\n\n```py\nfrom keras import models\nfrom keras import layers\nfrom keras import optimizers\nfrom keras import losses\nfrom keras import metrics\n\nmodel = models.Sequential()\nmodel.add(layers.Dense(16, activation='relu', input_shape=(10000,)))\nmodel.add(layers.Dense(16, activation='relu'))\nmodel.add(layers.Dense(1, activation='sigmoid'))\n\nmodel.compile(optimizer=optimizers.RMSprop(lr=0.001),\n              loss=losses.binary_crossentropy,\n              metrics=[metrics.binary_accuracy])\n```\n\n编译网络需要选择损失函数和优化器，这里是个二分类问题，网络最终输出一个概率值，所以最好使用 binary_crossentropy（二元交叉熵），优化器在这里选择 rmsprop。\n\n## 验证模型\n\n现在取训练数据的前 10000 条作为训练，并取后 10000 条做验证数据，20 个轮次，每次使用 512 个样本训练。\n\n```py\nx_val = x_train[:10000]\npartial_x_train = x_train[10000:]\n\ny_val = y_train[:10000]\npartial_y_train = y_train[10000:]\n\nhistory = model.fit(\n  partial_x_train,\n  partial_y_train,\n  epochs=20,\n  batch_size=512,\n  validation_data=(x_val, y_val)\n)\n```\n\n我们可以使用 history 这个变量绘制每次训练的精确度以及损失值变化。训练的损失会随着轮次减少，而验证则不然，大概训练到第 4 次能够拿到理想的结果。\n\n## 预测结果\n\n```py\nmodel = models.Sequential()\nmodel.add(layers.Dense(16, activation='relu', input_shape=(10000,)))\nmodel.add(layers.Dense(16, activation='relu'))\nmodel.add(layers.Dense(1,  activation='sigmoid'))\n\nmodel.compile(\n    optimizer='rmsprop',\n    loss='binary_crossentropy',\n    metrics=['accuracy']\n)\n\nmodel.fit(\n    x_train,\n    y_train,\n    epochs=4,\n    batch_size=512\n)\nresults = model.evaluate(x_test, y_test) # [0.3345052400302887, 0.8581200242042542]\n\nmodel.predict(x_test)\n```\n\n使用`predict`既可预测测试数据的正负反馈了。\n\n```py\narray([[0.3796336 ],\n       [0.996838  ],\n       [0.667047  ],\n       ...,\n       [0.11539856],\n       [0.14184406],\n       [0.47513008]], dtype=float32)\n```\n\n## 多分类问题\n\n书中还介绍了路透社新闻分类，不同点是构建网络时选用单元比较多（书中选择 64 维，因为有 46 个分类），最后一层激活函数选择`softmax`函数，它能保证这 46 个类的概率和为 1.\n\n最终编译时应选择`categorical_crossentropy`做损失函数。\n","collection":"blog","data":{"type":"post","category":"book","tag":["tensorflow","keras","wsl2","python"],"series":{"slug":"learn-tensorflow","name":"张量麻辣烫"}}},{"id":"2020/06/10/Keras.md","slug":"2020/06/10/keras","body":"\n# Keras 回归问题-预测房价\n\n回归问题用于预测一个连续值而不是离散值，如预测明天气温或者软件完成需要的时间。\n\n这个例子是要预测 20 世纪 70 年代中期波士顿郊区房价的中位数。\n\n## 获取数据\n\n```py\nfrom keras.datasets import boston_housing\n\n(train_data, train_targets), (test_data, test_targets) =  boston_housing.load_data()\n```\n\n得到的训练数据`train_data`是一个 404x13 张量，测试数据为 102x13 张量，这 13 项包括：\n\n- 总犯罪率\n- 超过 25000 平方英尺的住宅比例\n- 非商用地比例\n- charles river 变量（1 或 0）\n- 氮氧化物浓度\n- 公寓房间数\n- 建于 1940 年前建筑的占有量\n- 到五个波士顿就业中心的加权平均值\n- 放射状公路可达指数\n- 每 \\$1000 的物业税\n- 城镇学生教师比例\n- 1000(Bk – 0.63)^2，城镇黑人占有率\n- 低收入人群占有率\n\n```py\ntrain_data[0]\n# array([-0.27224633, -0.48361547, -0.43576161, -0.25683275, -0.1652266 ,\n#       -0.1764426 ,  0.81306188,  0.1166983 , -0.62624905, -0.59517003,\n#        1.14850044,  0.44807713,  0.8252202 ])\n```\n\n`train_targets` 对应房价，单位为千美元。\n\n```py\ntrain_targets\n# array([15.2, 42.3, 50. , 21.1, 17.7, 18.5, 11.3, 15.6, 15.6, 14.4, 12.1,...\n```\n\n## 准备数据\n\n对于这 13 种数据，取值范围不统一，这里要做取值的标准化，简单上讲让每个特征减去其平均值并除以标准差，这样，每个特征值都会取值于 0 左右，和统一的标准差。\n\n```py\nmean = train_data.mean(axis=0)\ntrain_data -= mean\nstd = train_data.std(axis=0)\ntrain_data /= std\n\ntest_data -= mean\ntest_data /= std\n```\n\n这里使用训练数据的平均值，这是不对的，但是书里面就这么写，我靠。\n\n## 创建网络\n\n```py\nfrom keras import models\nfrom keras import layers\n\ndef build_model():\n    model = models.Sequential()\n    model.add(layers.Dense(64, activation='relu',\n                          input_shape=(train_data.shape[1],)))\n    model.add(layers.Dense(64, activation='relu'))\n    model.add(layers.Dense(1))\n    model.compile(optimizer='rmsprop', loss='mse', metrics=['mae'])\n    return model\n```\n\n网络最后一层只有一个单元，没有激活，这是标量回归。最后一层的激活函数用于限定输出值的范围，如果是 sigmoid 函数，则输出 0-1 的值，如果最后一层为纯线性层，则可以预测任意范围的值。\n\n编译网络使用 mse 损失函数，即均方误差（mean squared error），预测值和目标值差的平方。训练的指标为 mae 平均绝对误差（mean absolute error），目标值和预测值差的绝对值。如果 MAE 值为 0.5 则代表预测房价与实际房价平均相差 500 美元。\n\n## 利用 K 折验证\n\n因为数据集比较小，可以使用 K 折验证，即把数据分为几分区（一般 4~5 组），最终取几个分区的平均值。\n\n```py\nimport numpy as np\n\nk = 4\nnum_val_samples = len(train_data) // k\nnum_epochs = 100\nall_scores = []\nfor i in range(k):\n    print('processing fold #', i)\n    # Prepare the validation data: data from partition # k\n    val_data = train_data[i * num_val_samples: (i + 1) * num_val_samples]\n    val_targets = train_targets[i * num_val_samples: (i + 1) * num_val_samples]\n\n    # Prepare the training data: data from all other partitions\n    partial_train_data = np.concatenate(\n        [train_data[:i * num_val_samples],\n         train_data[(i + 1) * num_val_samples:]],\n        axis=0)\n    partial_train_targets = np.concatenate(\n        [train_targets[:i * num_val_samples],\n         train_targets[(i + 1) * num_val_samples:]],\n        axis=0)\n\n    # Build the Keras model (already compiled)\n    model = build_model()\n    # Train the model (in silent mode, verbose=0)\n    model.fit(partial_train_data, partial_train_targets,\n              epochs=num_epochs, batch_size=1, verbose=0)\n    # Evaluate the model on the validation data\n    val_mse, val_mae = model.evaluate(val_data, val_targets, verbose=0)\n    all_scores.append(val_mae)\n```\n\n这样获得值如下，2.1~2.6 不等。\n\n```py\nall_scores\n# [2.1905605792999268,\n#  2.4371392726898193,\n#  2.3653202056884766,\n#  2.5255486965179443]\n```\n\n如果想让数据更精确，不如让训练次数从 100 增加到 500，但是书里面最终的数据到 80 就差不多过拟合了，再加上我的笔记本跑不起来 500 次，这里就算了吧。。。\n\n## 预测\n\n```py\nmodel = build_model()\nmodel.fit(train_data, train_targets,\n          epochs=80, batch_size=16, verbose=0)\ntest_mse_score, test_mae_score = model.evaluate(test_data, test_targets)\n```\n\n最后预测的房价和现实房价相差大概 2714 美刀（书里预测的是 2550）.\n","collection":"blog","data":{"type":"post","category":"book","tag":["tensorflow","keras","wsl2","python"],"series":{"slug":"learn-tensorflow","name":"张量麻辣烫"}}},{"id":"2020/06/14/ml5.js-tensorflow.js.md","slug":"2020/06/14/ml5js-tensorflowjs","body":"\n# ml5.js 和 tensorflow.js，终于聊到前端部分了\n\n既然在浏览器中也可以计算多维数组，拿浏览器做深度学习也可以理解了。Google 给浏览器中设计了 [tensorflow.js](https://www.tensorflow.org/js)，跟 python 下面的 tensorflow 是同一套 API。又有一群人在 tensorflow 的基础上封装了一套[ml5.js](https://ml5js.org/)。对比 tensorflow.js，ml5.js 去掉了很多张量计算的部分（说实话，这些东西真不是人学的，我这一周都在研究这些计算...）。所以本文会以 ml5.js 开始。\n\n## ml5.js\n\n这是[Daniel Shiffman](http://www.shiffman.net/)主导的 JS 深度学习库，我特喜欢看他的视频睡觉。这个库的[使用教程](https://learn.ml5js.org/docs/#/reference/index)不能更详细了！\n\n官网的简介，是使用 MobileNet 了`imageClassifier`，这是我的[笔记](https://observablehq.com/@gongbaodd/untitled)，可以用来判断图片、视频中的物体是什么。\n\n另外也可以使用`neuralNetwork`，这是[笔记](https://observablehq.com/@gongbaodd/ml5-js-neural-network)，基本上前面两篇关于 tensorflow 的文章都可以使用它来跑。\n\n使用 ML5.js 很大的简化了 tensorflow 的 API，然而并不是你可以不了解 tensorflow，因为期间会有很多参数难以理解，又不得不回头看它。\n\n## tensorflow.js\n\n基本上会了 python 版本，js 版本就算是个子集了，基本上很多需要的包都有替代。[这里](https://www.tensorflow.org/js/guide/layers_for_keras_users?hl=zh-cn)是一个给 keras 用户使用的 tensorflow.js 指南。另外去强烈建议看看[tensorflow.js 指南](https://www.tensorflow.org/js/guide?hl=zh-cn)。\n\n- `tf.layers` => Keras\n- `@tensorflow/tfjs-vis`原生支持 tensorflow 的数据可视化库（那敢情好啊）\n","collection":"blog","data":{"type":"post","category":"fe","tag":["tensorflow","keras","wsl2","python"],"series":{"slug":"learn-tensorflow","name":"张量麻辣烫"}}},{"id":"2020/06/24/Hainan-Travel-Program.md","slug":"2020/06/24/hainan-travel-program","body":"\n# 海南旅行计划\n\n## 珠海 - 146\n\n6 月 28 日（周日），蛇口 10：00-珠海横琴 11：30，中途会路过港珠澳大桥 65 元（已付）\n\n横琴码头附近貌似有麦当劳，到横琴湾酒店或者马戏酒店，可以搭乘机场横琴线，36 元。\n\n珠海梦海公寓酒店，（45 元，飞猪已付）\n\n## 海口 - 1410\n\n6 月 29 日（周一），9:40 珠海金湾机场到 10:45 海口美兰机场（150 元，已付） - 150\n\n6 月 29 日~7 月 11 日，机场海口梦之乡酒店 609 元（51x12 天） - 609\n\n期间基本上每天麻辣烫（21 元）+ 清补凉（10 元）+ 芒果（7 元） \\* 10 - 380\n\n7 月 2 日 海南省博物馆 + 糟粕醋（18 元） + 芒果肠粉（12 元）+ 鸡失藤（18 元） - 48\n\n7 月 6 日 住海口（86 元）+ 清补凉（15 元）+ 海南粉 （8 元） + 麦当劳&肯德基（100 元）+ 海口美兰来回（14 元） - 223\n\n7 月 10 日之前要确定之后的旅程，因为还有 100 块优惠券\n\n## 三亚 - 2302.5\n\n美兰 - 亚龙湾 95\n\n7 月 11 日~7 月 20 日 途家民宿，三亚海堂区后海村 56 号（转角遇到海）624\n\n麦当劳鸡翅 14 元\n\n7 月 11 日\n\n公交 35 路（12 元）海棠湾 1 路（2 元）\n清补凉 12 元\n海鲜炒饭 30 元\n沙县拌面 8 元\n清补凉 14 元\n椰子 5 元\n鸡排 13 元\n\n7 月 12 日\n\n沙县拌面 8 元\n老盐汽水 9 元\n海鲜砂锅 38 元\n抱罗粉 13 元\n茶饮 13 元\n\n7 月 13 日\n\n酸粉 12 元\n黎族饭团 35 元\n羊肉砂锅 28 元\n茶饮 13 元\n\n7 月 14 日\n\n肉丝拌面 12 元\n牛肉砂锅 28 元\n老盐汽水 9 元\n功能饮料 15 元\n德克士冰淇淋 13.5 元\n馄饨面 15 元\n水果 10 元\n\n7 月 15 日\n\n馄饨面 15 元\n鸡排 13 元\n绿茶 8 元\n肉丝面 12 元\n\n7 月 16 日\n\n酸菜肉丝面 12 元\n清补凉 12 元\n可乐鸡排洋葱圈 20 元\n星食烤奶 7 元\n椰子 5 元\n\n7 月 17 日\n\n肉丝拌面 12 元\n鸡腿饭 17 元\n奶茶 7 元\n羊肉砂锅 28 元\n椰奶清补凉 12 元\n水果 10 元\n\n7 月 12 日、13 日 冲浪 660 元\n\n冲浪租板子 200 元\n\n7 月 20 日 亚龙湾 - 美兰 95 元\n\n青菜肉丝面 12 元\n\n需要找 20 ~ 21 日的酒店\n\n公交去大顶村 2 元\n好丽友派 7 元\n机场早餐 36 元\n\n## 海口 - 161.88\n\n清补凉 16 元\n鸡失藤 15 元\n芒果肠粉 20 元\n\n隐居花园酒店 48.88 元\n飞猪会员 39 元\n\n水果 15 元\n椰汁 + 雪糕 8 元\n\n## 长沙 - 584.88\n\n7 月 21 日 九元航空 9:55~11:55 海口-长沙 270 元\n\n7 月 21 日 - 7 月 27 日 长沙明曦宾馆 293.88 元\n\n光猪圈健身 7 次卡 21 元\n\n## 总消费 - 4605.26\n","collection":"blog","data":{"type":"post","category":"plan"}},{"id":"2020/06/27/Nanshan-Museum-Ukiyo-World-Painting-Exhibition.md","slug":"2020/06/27/nanshan-museum-ukiyo-world-painting-exhibition","body":"\n# 南山博物馆浮世绘展览\n\n过去一个月基本上每周都去南山文体中心游泳，常常会路过南山博物馆，因为疫情原因，南山博物馆一直是关闭的，直到我看到了浮世绘的海报，从 6 月份开始南山博物馆开始展览。\n\n因为疫情还在继续，前往南山博物馆需要提前预约并申报健康码。\n\n![南山博物馆入口](./05.jpg)\n\n浮世绘就是源于日本民间的版画，最早是被荷兰人从包装商品的废纸中翻出来，日本人发现竟然有人稀罕这东西，便也拿出来给西方人卖。\n\n![装修成南京大排档一样的展厅](./06.jpg)\n\n## 主题\n\n因为产自民间，浮世绘往往绘画美人、戏曲中的角色、还有春宫图（嘿嘿）。当然，像是风景画什么的也很多见。展览最后说浮世绘影响了西方的印象派绘画，还拿出梵高、莫奈的画来当证据，不过，浙江的博物馆也说水墨画影响了西方印象派...反正都是几百年前的事儿，也没法考证，爱咋咋地吧~\n\n![这春宫图实在是太清水了](./01.jpg)\n\n![这个也一般](./03.jpg)\n\n![本山老师的猪腰子脸在过去可是美人的标准](./02.jpg)\n\n## 六大家\n\n擅长绘制嬉戏女性的铃木春信、绘制已婚妇女生活情景的鸟居清长、偏向中国水墨山水画风的哥川广中、绘制美人肖像画的喜多川歌麿、绘制歌舞剧情景的东洲斋写乐以及以神奈川冲浪里出名的葛饰北斋是浮世绘的六大家。\n\n![神奈川冲浪里](./04.jpg)\n\n![东洲斋写乐的画和我还是有几分神似](./07.jpg)\n\n## 审查制度\n\n和水墨画上面的印章不一样，浮世绘上面的印章主要表示它是被谁审查的，就像现在的版号，可以根据这些印章判断版画的出版时间。\n","collection":"blog","data":{"type":"post","category":"travel"}},{"id":"2020/06/27/Shekou-only-one-of-the-Meizu-offline-experience-stores.md","slug":"2020/06/27/shekou-only-one-of-the-meizu-offline-experience-stores","body":"\n# 蛇口仅剩的一家魅族线下体验店\n\n在育才中学附近有一个蛇口仅存的一家魅族线下体验店。\n\n![魅族线下体验店](./m2.jpg)\n\n店面有点寒酸，起码对比于万象天地的小米和华为的气派，只能说寒酸。\n\n![华为线下体验店](./m3.jpg)\n\n店面一侧摆着魅族 17 和魅族 16，这回主要看白色，旁边的黑色就没去看。\n\n![白色的魅族17](./m1.jpg)\n\n不得不说有点喜欢，之前就看上了小米 Mix2s 白色版，可是只能买到黑色的，挖孔屏的电量处理也很得我心意，重量嘛，虽然比我期望的魅族的重量要沉，但比我现在的手机轻。\n\n背面虽然看起来是磨砂，但摸起来有些胶质的感觉，可能和我的期望有点不同，到也谈不上失望或是惊喜。\n\n今年手机都上 5G 了，可我并不看好，除了电量损耗和手机质量的提升，5G 信号覆盖不全而且价格也不低...这种低性价比的东西若不是国家硬推，真是完全不能打，我搞不清楚为什么我要为它付费。\n","collection":"blog","data":{"type":"post","category":"travel"}},{"id":"2020/06/28/Zhuhai-Hengqin-Line-crossing-Macau.md","slug":"2020/06/28/zhuhai-hengqin-line-crossing-macau","body":"\n# 珠海横琴线横穿澳门\n\n![B站连接](https://www.bilibili.com/video/bv14v411B7Tt)\n\n一直没有机会去澳门，疫情期间就更没机会了，不过最近招商游轮开了新航线，从深圳蛇口港到珠海横琴港，中间会横穿澳门，怎么说也算是去过澳门了。\n\n## 横穿澳门\n\n![航线中间经过澳门](./1.jpg)\n\n因为澳门是由澳门半岛和氹仔与路环岛（后面两个岛已经填海连起来了），这次航线就是从澳门这两个岛中间穿过。\n\n招商邮轮疫情期间这个航线单程只要 65 块钱，于是一大早我便赶到蛇口港登船。\n\n![蛇口港](./2.jpg)\n\n回头可以看见连接深圳香港的深港大桥，左边是深圳右边是蛇口。\n\n![深港大桥](./3.jpg)\n\n途径珠港澳大桥，照片左边金字塔形状的建筑的是珠港澳大桥的人工岛。\n\n![珠港澳大桥人工岛](./4.jpg)\n\n因为疫情关系，珠三角间的健康码还没能互通，大桥上面一辆车都没有。\n\n![珠港澳大桥](./5.jpg)\n\n途径的海岛架满风车用于发电。\n\n![风车](./6.jpg)\n\n大概一小时左右，船驶入澳门，此时已经能收到澳门的短信了，但是广播要求最好不要打开漫游，以避免影响到健康码。\n\n![澳门塔](./7.jpg)\n\n![澳门塔和新葡京](./8.jpg)\n\n澳门的葡式建筑很有特色，比如下面的 8 字摩天轮。\n\n![8字摩天轮](./9.jpg)\n\n到达横琴港看澳门那边，和香港差不多的是，澳门也把最不发达的地方面向大陆。\n\n![从横琴港看向澳门](./10.jpg)\n\n下面是横琴港的照片和我的盛世美颜。\n\n![钟楼](./11.jpg)\n\n![港口](./12.jpg)\n\n![我](./13.jpg)\n\n尴尬的地方是这个港口非常小，小到连一个公共厕所都没有，最近的厕所也要 500m 左右。\n\n## 长隆\n\n横琴是珠海比较欠发达的地方，几乎除了长隆就没什么可以提的地方了，从横琴到珠海市区或者机场都要到长隆乘坐旅游巴士，而且这两个地方的买票地点不一样。景区的工作人员会带你去前往市区的买票点，去机场的买票点则在各种酒店（企鹅酒店或者马戏酒店），在微信搜索珠海机场快线也能预定车票。\n\n![长隆](./14.jpg)\n\n![长隆马戏酒店](./15.jpg)\n","collection":"blog","data":{"type":"post","category":"travel"}},{"id":"2020/06/30/Hidden-corner.md","slug":"2020/06/30/hidden-corner","body":"\n# 隐秘的角落\n\n「隐秘的角落」是爱奇艺迷雾剧场上的一部 12 集电视剧，主要讲的是单亲男孩朱朝阳暑假偶遇从福利院跑出来的严良和普普，三人去爬山遇到少年宫老师张东升谋杀自己岳父母，并借此事威胁张东升来救助普普的弟弟的故事。\n\n难得好看的国产剧，本来已经对国产剧有些失望，没想到还真有一部好看的。\n","collection":"blog","data":{"type":"post","category":"tv"}}]}