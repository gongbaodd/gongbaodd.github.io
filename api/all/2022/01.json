{"posts":[{"id":"2022/01/02/Amdahl.md","slug":"2022/01/02/amdahl","body":"\n# 再次聊 Amdahl 定律和 Gustafson 定律\n\n因为考研，这个专题耽搁了，[之前](/book/2021/07/27/Amdahl定律.html)提过这个定律但是不深。本来想继续之前的位置读，不过考虑到很久没看了，就来重读一遍，没想到能获得新的理解\n\n## Amdahl 定律\n\nAmdahl 这个名字还真难记，查了一下，老爷子生平经历还是值得一看的，本人也是瑞典和挪威混血，15 年因为肺癌去世 RIP。\n\n其实 Amdahl 定律$S=\\frac{1}{(1-\\alpha)+\\alpha/k}$是一个解决一定数据集下并行处理在整体的占比和整体运算速度影响的一种定律（$\\alpha$为占比，$k$为芯片数）。\n\n这个公式比较好理解，假设整体串行处理的时间为 1，则优化之后的时间就是串行部分$1-\\alpha$和并行部分$\\alpha/k$的和。\n\n如果 k 是无限多个，则整体速度比则无限趋近于$\\frac{1}{1-\\alpha}$，即整个系统串行和加上并行之后串行时间之比。\n\n## Gustafson 定律\n\nGustafson 则是另一个角度，假定串行时间是 a，单一线程处理并行数据时间是 b，则完全串行运行的时间为 a+nb，实际运行时间为 a+b，那么速度比为$S=\\frac{a+nb}{a+b}$\n\n令$F=\\frac{a}{a+b}$即串行在整体项目中的占比，经过化简得$S=(1-n)F+n$也就是串行占比足够小的时候，加速比就是芯片数。\n\nGustafson 定律解决了 Amdohl 定律必须要求数据集一定的前提。但是也有许多争议，比如处理非线性问题时可能不会有理想的结果。\n","collection":"blog","data":{"type":"post","category":"book","tag":["CSAPP"],"series":{"slug":"CSAPP","name":"深入理解计算机系统"}}},{"id":"2022/01/08/Soul.md","slug":"2022/01/08/soul","body":"\n# Soul\n\n皮克斯每年的固有泪目电影，这回的主题竟不是要坚持梦想，用一句俗话说，就是哥们别把掳走窄了。","collection":"blog","data":{"type":"post","category":"movie"}},{"id":"2022/01/09/Fixed-point-number.md","slug":"2022/01/09/fixed-point-number","body":"\n# 定点数\n\n## 二进制、十进制和十六进制的转化\n\n对于$2^n$的 16 进制转化,最高位是$2^{(n \\mod 4)}$，低位用$n/4$个零补齐\n\n| $n$ | $2^n(decimal)$ | $2^n(hexadecimal)$ |\n| --- | -------------- | ------------------ |\n| 5   | 32             | 0x20               |\n| 23  | 8388608        | 0x800000(3+4x5)    |\n\n这个用的还比较多，比如一个 32 位的计算机，它可以寻址 0x0000~0xffff(0x10000-1)，总共$2^{32}$字节（4GB）。\n\n显然 16 位中 A-F 和二进制、十进制的对应关系也需要熟记。\n\n- 0x605c + 0x5 = 0x6061\n- 0x605c - 0x20 = 0x603c\n- 0x605c + 32 = 0x607c\n- 0x60fa - 0x605c = 0x9e\n\n## 字节序\n\n字节序 endian 这个词源于「格列佛游记」里面一个国家因为吃鸡蛋要敲大端还是小端引发争议。这里面指老的计算机普遍以大端存储数据即主观方式存储，而现有的主流机器都以小端存储，即反向存储。\n\n如`int a=0x12345678;`在大端上 a 的第一个字节是 12 而小端则是 78。历史上也出现过大小端机器互通导致 Unix 打成 nUxi 的故障。\n","collection":"blog","data":{"type":"post","category":"book","tag":["CSAPP"],"series":{"slug":"CSAPP","name":"深入理解计算机系统"}}}]}