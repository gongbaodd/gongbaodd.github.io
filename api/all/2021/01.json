{"posts":[{"id":"2021/01/04/Alice-in-the-country-of-Dai.md","slug":"2021/01/04/alice-in-the-country-of-dai","body":"\n# 弥留之国的爱丽丝\n\n弥留之国的爱丽丝是网飞日本 2021 年的漫改新剧，讲的是主角同好友三人在现实失志，无意间闯入了一个只有通过游戏通关换取存活时间的世界，每通关一次就能获得对应难度等级的扑克牌，传说集齐所有花色就能离开这个世界。本季故事结尾的时候，主角已经集齐所有数字牌。\n\n这个剧的开头几集非常值得看，故事发展的速度非常快，每个角色的成长也很明显，只可惜三集过后新的角色出现，没有及时立住。倒不是说新角色不好，只是他们的闪光点要在第 7、8 集才能看出来，中间有一点拖沓。\n\n总体来说还是比较期待的剧了，即使最后一集竟然爆了全剧的大 boss，我还是期待第二季各种纸牌的游戏内容。\n","collection":"blog","data":{"type":"post","category":"tv"}},{"id":"2021/01/07/ReactNative-script.md","slug":"2021/01/07/reactnative-script","body":"\n# ReactNative 调试时提示找不到 script\n\n执行以下命令\n\n```\nreact-native bundle --platform android --dev false --entry-file index.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res\n```\n\n另外，如果不成功，可以尝试重新安装 react-native-cli 并重复上面命令。\n","collection":"blog","data":{"type":"post","category":"fe","tag":["react-native"]}},{"id":"2021/01/07/Sweet-home.md","slug":"2021/01/07/sweet-home","body":"# 甜蜜家园\n\n甜蜜家园是网飞韩国的漫改新剧，讲述的是主角经历全家出游车祸死亡幸存之后，决定在一栋公寓中了结生命，却正好碰到一种奇怪丧尸的疫情爆发，和全楼的幸存者躲避危险的故事。\n\n故事情节安排很紧张，短短几集分别要讲主角自杀、疫情爆发躲避丧尸、主角自己染病、如何控制病情、军方抓捕、以及免疫者们的反击主角黑化等等主线已经很复杂了，还要介绍诸多配角的故事，精彩是精彩，估计没有一个看客不好奇这么个普普通通的筒子楼竟存在那么多神人。\n\n另外一个吐槽就是特效，和弥留之国的爱丽丝不同，这部是尽可能还原漫画中的丧尸形态，这使得很多看起来有点假，特别像ig上面加了多层特效的照片。\n\n","collection":"blog","data":{"type":"post","category":"tv"}},{"id":"2021/01/09/PowerShell101.md","slug":"2021/01/09/powershell101","body":"\n# Powershell 101\n\n已经打算学习 Powershell 很久了，然而工作时间使用的是 Mac，所以往往觉得 bash 已经足够了，即使 Windows 下面 WSL 和 MSYS 总能解决。但是经历了这次 ReactNative 编译失败的经验之后，我马上意识到什么叫做原生的好（尤其是在网络环境极其严苛的情况之下）。\n\n学习 Powershell 的资源相比 bash 还是比较少的，基本上也是靠社团驱动。社团驱动虽然活跃性高，出现的问题还是比较明显的，比如 bash 就有两种写法...那么 Powershell 除了本身的.Net 支持同时支持 shell 语法就更加艰难了。\n\n「Powershell 101」是微软官网推荐的书籍，其实是一次分享的幻灯片 PDF，我在网上还没有找到分享视频，不过光看文档还能了解一二。\n\n## Cmdlet\n\nCmdlet 是 Powershell 下的命令，通过「动词-名词」组成如`Get-Process`和`Get-Help`，可以通过使用`Get-Verb`获取到动词都有哪些。\n\n## 变量\n\n和 PHP 类似，powershell 变量使用\\$做标识。\n\n```powershell\n$i = 42; $i # 控制台输出42\n```\n\n同时，和 bash 不同的是，Powershell 中的命令返回的是对象。\n\n```powershell\n$count = (ls ./).count # 控制台输出当前目录文件个数\n```\n\n## profile\n\n和 bash 的 profile 类似，powershell 也有类似于`bashrc`的东西。每个系统有 4 个 profile 文件。\n\n- 每个用户的单一 powershell 端\n- 所有用户的单一 powershell 端\n- 每个用户的所有 powershell 端\n- 所有用户的所有 powershell 端\n\n## 工具\n\n安装`posh-git`来自动提示`git`和`oh-my-posh`来美化界面。\n\n```powershell\nInstall-Module posh-git -Scope CurrentUser\nInstall-Module oh-my-posh -Scope CurrentUser\n```\n\n修改`$profile`并且引入这两个包，并设定 oh-my-posh 的主题。\n\n```powershell\nImport-Module oh-my-posh\nImport-Module posh-git\nSet-Theme Robbyrussell\n```\n\n另外，系统可能禁止执行外部代码，造成上面的脚本无法执行，此时需要在管理员模式下面修改规则。\n\n```powershell\nget-executionpolicy # 可能输出 Restrictrd\nset-executionpolicy remotesigned\n```\n","collection":"blog","data":{"type":"post","category":"tech","tag":["powershell"],"series":{"slug":"windows-howto","name":"Windows舒适指南"}}},{"id":"2021/01/09/husky-Windows.md","slug":"2021/01/09/husky-windows","body":"\n# 解决 husky 在 Windows 上面无法安装的问题\n\n其实问题在于，在执行`yarn`安装依赖并处理 git hooks 的时候，Windows 的控制台会打印内容反馈，并被理解为安装失败使得整个安装过程失败了。其实已经过去了很久，但是小版本还没有解决，可以先执行`yarn --silent`忽略 husky 上面的问题。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["husky","Windows","npm","yarn"]}},{"id":"2021/01/10/AudoRelay.md","slug":"2021/01/10/audorelay","body":"\n# AudioRelay蓝牙耳机实现多设备切换的优雅方法\n\n其实在蓝牙4.0之后，蓝牙耳机已经能够实现在多个设备上面无缝切换了。但是还是有很多耳机并不支持多设备，比如我手上的红米Dots。但不妨换个方法，让多个设备的音频流输出到同意设备中，这样只需要耳机链接一台设备即可。\n\nAudioRelay就是类似这样的软件，只需让设备都在同一局域网中。然而这个软件并不完美，首先，它只是复制了音频流到手机上，计算机必须静音，否则就在外放。兼容性上面也有问题，经测试我的小米平板静音之后音频流也静音了。最后是安全性，这个软件没有密钥配置，也就是同一局域网下所有的设备都是透明的，所以最好不要在公有网络中使用这款软件。","collection":"blog","data":{"type":"post","category":"tech","tag":["bluetooth"],"series":{"slug":"windows-howto","name":"Windows舒适指南"}}},{"id":"2021/01/13/Barrier.md","slug":"2021/01/13/barrier","body":"\n# Barrier更好的多屏交互方式\n\n之前介绍过[Mouse Without Borders](https://blog.gongbushang.com/tech/2020/02/23/Mouse_without_borders%E8%AE%A9%E9%BC%A0%E6%A0%87%E5%90%8C%E6%97%B6%E8%BF%9E%E6%8E%A5%E5%9B%9B%E5%8F%B0%E8%AE%BE%E5%A4%87.html)，可以实现多台PC共享鼠标和键盘，在过去的一年里它帮了我不少忙，也有如下bug。\n\n- 长时间使用，鼠标滚轮会时常失效。\n- 和Stroke Plus使用的时候，不小心跨屏会导致stroke plus崩溃。\n- 鼠标在不同PPi的屏幕里面速度是不一样的。\n- 因为项目已经停止更新了，所以以上问题只能默默忍受。\n\n因此我更换了barrier，作为收费项目synergy的免费分支，拥有和synergy类似的兼容Mac、PC以及Linux上限达15台的多屏协同，本来是有安卓的，可惜已经停止支持了。\n\n目前看来上面的问题都已经解决了，但还要看长期使用的效果。","collection":"blog","data":{"type":"post","category":"tech","tag":["windows"],"series":{"slug":"windows-howto","name":"Windows舒适指南"}}},{"id":"2021/01/13/Learning-rust-with-entirely-too-many-linked-list.md","slug":"2021/01/13/learning-rust-with-entirely-too-many-linked-list","body":"\n# Learning Rust with entirely too many linkd lists\n\n## 序言\n\n### 基础\n\n- 指针\n\n\t- &\n\t- &mut\n\t- Box\n\t- Rc\n\t- Arc\n\t- *const\n\t- *mut\n\n- 所有权\n- 关键字\n\n\t- struct\n\t- enum\n\t- fn\n\t- pub\n\t- impl\n\n- 模式匹配\n- 测试\n- 简单的unsafe模式\n\n### 驳斥链表\n\n- 性能不总是重点\n- 链表的处理可以是O(1)的\n- 无需复杂度均摊\n- 节省空间\n- 函数式开发一直使用链表\n- 利于并行开发\n- 内核开发、嵌入式开发使用链表\n- 插入删除不会让迭代器失效\n- 简单且易于教学\n\n\n## 栈\n\n### 一个糟糕的栈\n\n- 布局\n\n\t- List a = Empty | Elem a (List a)\n\t- 布局一： \nenum List  {\n    Empty, \n    Box<List> \n}\n\n\t\t- 必须用Box分配堆内存，否则编译器不知道如何分配栈内存\n\t\t- 可以发现链表最后多余一个Empty，则更改布局二\n\n\t- 布局二：： \nenum List { \n    Empty, \n    More(Box<Node>) \n}\nstruct Node {\n    elem: i32,\n    next: List\n}\n\n- 创建\n\n\t- impl List {\n    pub fn new() -> Self {\n        List{ head: Link::Empty }\n   }\n}\n\n- 所有权入门\n\n\t- self - 值\n\n\t\t- 完全复制的值，函数值执行完会被销毁\n\n\t- &mut self 可变引用\n\n\t\t- 完全控制值所在地址\n\t\t- 不能给值增加引用\n\n\t- &self 不可变引用\n\n\t\t- 完全取得值所在地址，但不能更改\n\n- push\n\n\t- 因为&mut self.head不能增加引用，必须先用mem::replace替换原来引用来释放引用\n\n- pop\n\n\t- 未完成的函数可以使用unimplemented!宏来避免编译报错\n\t- match关键字也如函数一样存在值引用的问题\n\n- 测试\n\n\t- assert_eq!宏来处理断言\n\t- #[cfg(test)]注释来表明模块仅用于测试环境\n\t- #[test]注释用于表明函数用于测试\n\t- 模块内需要引用外部的元素（use super::List;）\n\n- Drop\n\n\t- Box的析构过程无法形尾递归调用，析构时会爆栈\n\n### 一个不错的栈\n\n- 使用Option代替Link\n\n\t- take方法替代mem::replace\n\t- map方法替代match\n\n- 支持泛型\n\n\t- impl<T>\n\n- peek\n\n\t- take方法会把数据取出并把原来的位置用None补充\n\t- as_ref会取得Option中的不可变引用\n\t- as_mut会取得所在内存的可变引用\n\n- 迭代器\n\n\t- 简单迭代\n\n\t\t- pub trait Iterator {\n    type Item;\n    fn next(&mut self) -> Option<Self::Item>;\n}\n\n\t- 不可变迭代\n\n\t\t- 显式声明所有权\n\n\t\t\t- 一个函数引入两个以上引用时\n\t\t\t- 一个泛型结构体\n\t\t\t- 编译器会提醒添加\n\n\t\t- 解开Box可以使用*操作来deRef，如 *node\n\n\t- 可变迭代\n\n## 列表\n\n### Box只能实现单指针\n\n### Rc实现引用计数\n\n- use std::rc::Rc\n- 使用clone方法\n- Option\n\n\t- map： Option<T> -> Option<T>\n\t- and_then： Option<T> -> T.\n\t- as_ref: &Option<T> -> Option<&T>\n\t- as_mut: &mut Option<T> -> Option<&mut T>\n\n### Arc线程安全的引用计数\n\n- Send trait: 可以移动到别的线程\n- Sync trait:可以被多个线程查看\n- Rc实现是基于Cell的\n- Arc基于Atomic\n\n## 队列\n\n### 一个不好但是Safe的队列\n\n- RefCell需要动态借用\n\n\t- borrow(self) -> Ref<T>\n\t- borrow_mut(self) -> RefMut<T>\n\t- into_inner()可以取得包裹的值\n\t- 虽然Ref和RefMut表现和&和&mut相同，但不能由Ref转换到&\n\n- Rc\n\n\t- 解开Rc需要使用try_unwrap()之后再unwrap()\n\t- Rc解决不了环形引用\n\n### 一个可以但是unsafe的队列\n\n- The Rustonomicon\nhttps://doc.rust-lang.org/nightly/nomicon/\n- *mut T\n- std::ptr\n- 具体unsafe的部分只靠这一个例子还搞不懂\n主要先摆正姿态，Unsafe其实并不是不好，只是此时编译器不做检查\n\n## 总结\n\n这次是彻底了解了Rust的所有权生存期的内容，虽然最后unsafe相关内容还是不清楚，单已经有很大进步了。\n\n","collection":"blog","data":{"type":"post","category":"book","tag":["rust"]}},{"id":"2021/01/17/TS.md","slug":"2021/01/17/ts","body":"\n# 重学TS\n\n毕竟半年没拿起来typescript了赶紧找了本书补充一下，个人还是推荐要跟进ts的官方blog\n的（虽然我也没做到）。\n\n这本书感觉还有很多要补充的地方，条理也不是很清晰，但是的确有有一些可以给我补充的地方。\n\n![思维图](./2021-01-17.png)\n","collection":"blog","data":{"type":"post","category":"book","tag":["typescript"]}},{"id":"2021/01/20/ReactNative.md","slug":"2021/01/20/reactnative","body":"\n# 读了几本关于ReactNative的书\n\n貌似从17号到现在我还没更新我的动态呢，其实最近除了CrossFit之外也没有闲着，除了在攒黑苹果的零件还顺便看完了几本React Native的书（其实没看完因为iOS的部分还没办法实现）。\n\n## ReactNative应用开发实例解析\n\n这本书基本上讲的是作者从事几家公司的软件内容，不太清楚这么把公司的东西写成书发出去好不好...\n\n比较感兴趣的部分是他使用Redux结合MobX写的TinyRobots，里面的状态机是通过SCXML绘图实现的，这里我后面回单独一篇去写。\n\n## ReactNative应用开发指南\n\n这里面主要实现了基于OpenWeatherMap实现的天气应用，以及第178页的闪卡应用。\n\n## ReactNative全教程移动跨平台应用开发\n\n第136页提到了iOS环境配置，或许会有用。\n\n第308页 汇率转换器\n\n第327页 利用[天行数据](tianapi.com)实现微信热门精选\n\n第344页 掌上新闻\n\n## ReactNative跨平台应用开发（第二版）\n\n第364页 配置 CodePush\n第369页 配置 Google Analysis\n第373页 配置极光推送\n第373页 Realm 本地持久化\n\n## ReactNative精解与实战\n\n没啥可看的","collection":"blog","data":{"type":"post","category":"book","tag":["react-native"]}},{"id":"2021/01/24/OK.md","slug":"2021/01/24/ok","body":"\n# OK，说说黑苹果\n\n首先，一个开发者是不是要有一台 Mac 呢？个人认为如果不是 iOS 或者 OSX 开发，一台 Mac 并不是必须的。然而我还是想要一台黑苹果，其一，过去十年对比 Windows 和 Linux，MacOS 被更多 UI 开发者所青睐；其二，Windows 和 Mac 的开发方式相对来说比较隔离，多一台 Mac 会多一个思考问题的角度。\n\n## 准备\n\n首先，如果不是新组的机器，黑苹果最好是台式机双系统，因为诸如声卡、网卡指纹锁、摄像头等硬件会因为兼容问题而不得不被放弃或者再去买个外设挂上。\n\n最重要的，CPU，一定要选择 Intel 酷睿，会轻松很多。我知道有很多 AMD 或者奔腾都黑苹果成功了，但考虑到稳定性，就算用酷睿也不能保证 100%成功，何况换到非酷睿的 CPU 上。\n\n接下来，镜像，推荐[黑锅小兵](https://blog.daliansky.net/)，下载好镜像后使用[Ether](https://www.balena.io/etcher/)烧录 U 盘，当然也可以使用别的烧录工具，试验了下这个成功率更高一些。\n\n## 安装\n\nClover 是黑苹果 UEFI 引导工具，想想以前用的比较多的引导是变色龙，不过为了踩坑少一点，就用 Clover 吧。另外镜像最好多下个旧版本，烧录好的安装盘卡在一堆加号的情况很常见，往往这些情况就是 Clover 版本太低，理论上升级 Clover 能解决，但也可能搞不定，所以手上拿着黑苹果就不要想着尝鲜了。\n\n先分好一个分区然后重启进入 U 盘引导 Clover 进入安装，有的时候点击安装提示不能安装，可以到终端里面修改到更早一点的时间再安装。\n\n## 配置 ESP 分区\n\n安装之后，进入 MacOS 依然需要借助 U 盘上的 Clover 来引导，此时需要把 U 盘上 EFI 文件夹下的 CLOVER 文件夹全部复制到机器 ESP 分区的 EFI 文件夹下。这一操作可以通过再 Mac 上面安装 Clover Configurator 来配置，同时，这个工具也可以用来修改 Clover 配置。\n\n前面说，Clover 的驱动需要保持更新，可以通过安装 Hackintool 实现。\n\n重启进入 Windows，安装 BOOTICE 来修改 UEFI 启动项，其中需要访问 ESP/EFI/CLOVER 下的 Clover.efi 文件（可能名字会不同，但一定是 efi 文件），可以使用 DISKPART 并给 ESP 分区一个盘符。\n\n新建好 CLOVER 项，把它放到第一项，重启就能进入机器的 CLOVER 了。\n\n## 安装软件\n\n### 和内网的 PC 交互\n\n前面介绍过 barrier 是可以在 mac 上面安装并实现一对鼠标键盘操作多台设备。\n\n目前 Windows 还没有右键共享文件到 Mac 的方案，考虑到我的黑苹果蓝牙和 wifi 都废了，也不能实现投屏，不过还好 mac 支持 smb 分享，也算是实现了几台设备在内网连接了。\n\n大概用了一天，最大的不适应就是 Ctrl-C 和 Cmd-C 不能互相映射了。\n\n### 科学上网\n\n目前 v2ray 支持比较好的应用是 v2rayU，我测试最新版是有问题的，可以选择早一点的版本。\n\nnvm 的镜像可以使用阿里的，不过和 Windows 不同，只需要增加环境变量即可`export NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node/`。\n\nhomebrew 可以使用[清华的源](https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/)，不过依然很卡。\n\nNPM 使用阿里的源`npm config set registry=https://registry.n pm.taobao.org/`\n\nyarn 使用阿里的源`yarn config set registry https://registry. npm.taobao.org/`\n\nAndroid Studio 使用东软的代理，`http://mirrors.neusoft.edu.cn:80`。\n\nRustup 使用清华的源`export RUSTUP_DIST_SERVER=https://mirrors.tuna.tsinghua.edu.cn/rustup`。\n\nCargo 使用中科大的源\n\n```ini\n# ~/.cargo/config\n[source.crates-io]\nregistry = \"https://github.com/rust-lang/crates.io-index\"\nreplace-with = 'ustc'\n\n[source.ustc]\nregistry = \"git://mirrors.ustc.edu.cn/crates.io-index\"\n```\n\nflutter 使用清华源`export FLUTTER_STORAGE_BASE_URL=\"https://mirrors.tuna.tsinghua.edu.cn/flutter\";export PUB_HOSTED_URL=\"https://mirrors.tuna.tsinghua.edu.cn/dart-pub\"`\n\n大概先做这么多\n\n### 问题\n\n其实问题还是很多的，除了没有无线，休眠之后往往就卡死了，另外，很多镜像都不支持虚拟化，那意味着 Docker 也不能使用。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["hackintosh"]}},{"id":"2021/01/25/A-website-that-practice-typing.md","slug":"2021/01/25/a-website-that-practice-typing","body":"\n# keybr 一个练习打字的网站\n\n感觉自己的盲打速度不行，需要一个网站练习下，[keybr](https://www.keybr.com/)是一个不错的打字网站，以一种循序渐进的方式来练习，另外还有数据统计，接下来我打算练习一个月看看能否提高。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["typing"]}}]}