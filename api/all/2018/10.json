{"posts":[{"id":"2018/10/01/Summary-of-September.md","slug":"2018/10/01/summary-of-september","body":"\n# 九月总结\n\n## 计划完成情况\n\n1. 用 magicaVoxel 做的头像已经投入使用啦，至于博客头像的话，看心情\n2. 打算做的 vscode 插件，现在来看并不是很着急，有时间再做咯\n3. 公司里面已经有一个项目是从 google-drive 取数据到项目里面了，但还需要改进。\n4. 还没有开始练口琴和 uk\n\n## 去过的地方\n\n- 设计互联以及海上世界周边\n\n没怎么用心去发掘，但貌似好吃的很多\n\n- 万象天地\n\n万象天地太美好了，感觉就是年轻人圣地，我都想搬去大冲了。\n\n- 人才公园\n\n虽然很晒，但是我很喜欢跑完步拿着 kindle 在海边看书的感觉。\n\n## 新事物\n\n- 极光单词\n\n先交钱，然后每天背 10 分钟就返一块钱。关键每个单词都配三段美剧的剪辑。\n\n## 十月计划\n\n- 继续背极光单词\n- 看完深入浅出 RxJS\n- 翻译 spanner 文档\n- 在深圳交几个朋友吧～\n","collection":"blog","data":{"type":"post","category":"plan"}},{"id":"2018/10/02/Shenzhen-Central-Book-City.md","slug":"2018/10/02/shenzhen-central-book-city","body":"\n# 深圳中心书城\n\n人太多。。。不是说十一深圳成空城了么，这么个空法？\n\n位置在市民中心，就是上次去博物馆附近，坐地铁到少年宫站下最近了，里面真是人挤人，不知道为什么那么多人还能用心看下去。。。\n\n书城西面是深圳音乐厅，东面是城市规划馆（整个十一没去成，试运行中，能碰到一次正常开馆真难）。\n\n书城里面，第一个区域西面有一个计算机类的书摊，其实就比南山书城的大些，里面，还是图灵丛书比较多点，所以想看技术书还是逛网站吧。\n","collection":"blog","data":{"type":"post","category":"travel"}},{"id":"2018/10/04/Bai-Caotang-drink-sugar-water.md","slug":"2018/10/04/bai-caotang-drink-sugar-water","body":"# 百草堂喝糖水\n\n在蛇口，海上世界到育才学校那里，有一家巨破巨破的凉茶铺子，但是人居多，点了份杨枝甘露，太好喝了","collection":"blog","data":{"type":"post","category":"life"}},{"id":"2018/10/05/anker.md","slug":"2018/10/05/anker","body":"\n# 安利一下 anker 的随身投影\n\n其实是个音响，外带投影的功能，投影是 1080p 的，那就比市面上很多投影好得多，噪音低，音效好，重点是它小啊，真的，就可乐罐难么大，而且是 anker 的，质量肯定不错。\n","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2018/10/06/Industrial-Exhibition-Hall-&-Huaqiangbei-&-Overseas-Chinese-Town-Creative-Park.md","slug":"2018/10/06/industrial-exhibition-hall--huaqiangbei--overseas-chinese-town-creative-park","body":"\n# 工业展览馆、华强北和华侨城创意园\n\n上次去中心书城的时候，本来想看看灯光秀，可是人太多了，回去的路上看二次元舞蹈排练的时候看到了工业展览馆。\n\n## 工业展览馆\n\n工业展览馆在市民中心楼上，里面基本也是歌颂改革开放了。但是那个电梯！完美了\n\n![电梯](https://cdn.ruguoapp.com/lhu7_Fp6SPJpWTZQVTgnP5VYqojV.gif)\n\n## 华强北\n\n华强北感觉上是个大型电子市场，现在基本上跑楼上了，一楼和地下都是比较大的商场。逛吃逛吃就好了（即使店面都写着第二份半价，但是网上的优惠更值一些）。\n\n![异形](https://cdn.ruguoapp.com/FitvEUF4kVJh-IrgNVRDXf3yqP8c.jpg?imageMogr2/auto-orient/thumbnail/2500x9999%3E)\n\n## 华侨城\n\n深圳的 798。终于找到了一个很符合我个性的地方呀，不知道周围有没有小妹妹呀，好想给她拍照呀！！！\n\n![](https://cdn.ruguoapp.com/FrVu0CunN8x513UBqUOngO7IzzBH.jpg?imageMogr2/auto-orient/thumbnail/2500x9999%3E)\n\n![](https://cdn.ruguoapp.com/FtWlO_PQxbb_VUrBYusYoHHCRSXc.jpg?imageMogr2/auto-orient/thumbnail/2500x9999%3E)\n\n![](https://cdn.ruguoapp.com/FvZdjd2iyj-BNwKEny9DVGHqPQZG.jpg?imageMogr2/auto-orient/thumbnail/2500x9999%3E)\n","collection":"blog","data":{"type":"post","category":"travel"}},{"id":"2018/10/07/Park-of-Talent-Park.md","slug":"2018/10/07/park-of-talent-park","body":"\n# 终于赶上了人才公园的日出\n\n一直想去看看，可就是起不来，分明从家到这里就 10 分钟\n\n![](https://cdn.ruguoapp.com/Fq7ifDg8OFckTtwRM8N2ztZPL9l5.jpg?imageMogr2/auto-orient/thumbnail/2500x9999%3E)\n\n![](https://cdn.ruguoapp.com/Fj7j-kKkrxKdxPfe7FzZeZ8xCBsA.jpg?imageMogr2/auto-orient/thumbnail/2500x9999%3E)\n","collection":"blog","data":{"type":"post","category":"travel"}},{"id":"2018/10/07/RxJS.md","slug":"2018/10/07/rxjs","body":"# RxJS深入浅出\n\nRxJS，早有耳闻，尤其是如果你使用过Angular，RxJS是会接触到的。\n\n我要推荐《RxJS深入浅出》在于它真的很仔细，尤其是说明schedule的部分，作者甚至仔细解释了microTask和macroTask的区别。\n\n同时，单元测试部分，用RxJS的TestSchedule处理异步看起来真的比写n个mockImplementOnce要好得多。\n\n多说无益，我在思考写个usecase看看它是不是真的很好用。\n","collection":"blog","data":{"type":"post","category":"book"}},{"id":"2018/10/13/node.md","slug":"2018/10/13/node","body":"# 阿里深圳node地下铁\n\n## 渲染服务化，egg.js北斗\n\n最早同机部署，利用热更新，减少node发布频率。\n\n使用node做页面渲染，渲染好的html给java层，最终分发还是给java。\n\n资源争抢，linux [cgroup](https://wiki.archlinux.org/index.php/Cgroups)，但是没实现。\n\n静态资源分发系统，使用推送的方式（其实我没听懂那面拉取说的是啥。。。），基于阿里的[DragonFly](https://alibaba.github.io/Dragonfly)。\n\n## node devops\n\n[sandbox](https://github.com/midwayjs/sandbox)\n\n代码治理，哎呀就是linting啊typechecking啊。\n\n包治理，到底是大厂，包有问题还能查出来。居然还知道那些应用用过哪些包。\n\n数据治理，错误日志分析。\n\n链路分析\n\n远程调试，可以在办公区调试服务机器。\n\n故障演练，内部平台不给人看啊。[QCon](http://www.infoq.com/cn/presentations/ali-electricity-supplier-fault-management-and-fault-drills-practice) 找到了视频，有机会看下。\n\n另外可以看下[pandora.js](https://github.com/midwayjs/pandora)\n\n## Node-FFI\n\n牛逼你深圳，上哪儿听js的分享能谈到IoT啊。\n\n应用背景是想要用JS去调用C的动态链接库。毕竟JS写起来容易些。\n\n原来多语言交互，通过共享内存、RPC调用或者外部函数调用（FFI）。\n\n[mJS](https://github.com/cesanta/mjs)比较感兴趣，是[mongoose os](https://mongoose-os.com/)的js运行语言。\n\n## Tarsjs\n\n[tars](http://tars.tencent.com/base/tars_index/en/index.html)听起来巨牛逼，没听懂。。。\n\n话说阿里的投屏系统是什么，还带录屏功能，貌似我在mac上没用过投屏系统啊。\n\ntarjs提供了一套高性能的RPC协议，可以用 @tar/stream 获取。\n\n太多了，听不懂啊。\n\n进程管理，进程重启，无损重启，数据监控。\n\n### node监控指标：\n\nmemUsage、 cpuUsage、 eventLoopLag：队列延迟， libuv\n\n### LongStackTrace组件的实现\n\n[问题背景](https://www.ctolib.com/topics-134009.html)\n\n[具体代码](https://github.com/medns/longstack)\n\n","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/10/16/Get.md","slug":"2018/10/16/get","body":"# 世纪话题Get参数传数组\n\n哎呀，这个话题，其实挺简单的，但是仔细想起来，URL的请求参数如下，如果要写数组怎么办？\n\n```\na=1&b=2&c=3\n```\n\n其实无非是解析这个字符串，但是由于没有标准方案，所以大家的处理方法五花八门。我遇到过的方式如下\n\n## 数组标识\n\n```\na[1]=1&a[2]=2\n```\n\n或者\n\n```\na[]=1&a[]=2\n```\n\n这种做法，jquery时代很多，可以很简单分辨出数组，但是取到数据的时候要单独处理key，因为直接取到的值是`a[]`\n\n## 序列化\n\n```\na=%5B1%2C2%5D\n```\n\n少说废话，直接stringify，然后发现URL里面要转义的东西太多了，然后后端取到值还要parse下，因为传来个字符串\n\n## 分隔符分割\n\n```\na=1%2C2\n```\n\n莫不如加个`,`处理下？缺点，找错分隔符的话还是要处理转义，后端还是要单独split下\n\n## 其实有标准的\n\n根据[URLSearchParam](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams)\n\n```\na=1&a=2\n```\n\n如此生成的URLSearchParam对象（类似于Map对象），直接调用```get('a')```方法只会取到一个值，但是执行```getAll('a')```可以获取到数组\n\n既然是标准，koa的koa-qs也是这么处理数组的。\n\n另外URLSearchParam还有一定容错能力，所以即使url被浏览器截断（其实不太会，因为此时报错414）也不会有太大问题。\n","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2018/10/18/Algolia.md","slug":"2018/10/18/algolia","body":"# 关于调用Algolia","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2018/10/21/Moon-and-Six-Shi-Shi.md","slug":"2018/10/21/moon-and-six-shi-shi","body":"\n# 月亮与六便士\n\n我仿佛看见一艘双桅大帆船，这个年轻人正在船上干活，他浑身赤裸，只在腰间围着一块粗蓝布；天黑了，船儿被清风吹动着，轻快地在海面上滑行，水手们都聚集在上层甲板上，船长和一个管货的人员坐在帆布椅上自由自在地抽着烟斗。斯特里克兰德的孩子同另一个小伙子跳起舞来，在暗哑的手风琴声中，他们疯狂的跳着。头顶是一片碧空，群星熠熠，太平洋烟波渺茫，浩瀚无垠。","collection":"blog","data":{"type":"post","category":"book"}},{"id":"2018/10/22/moment.md","slug":"2018/10/22/moment","body":"\n# moment 获取跨越一段时间的月和周\n\n这个实现是同步实现，其实最好改成异步实现。\n\n另外关于```time.startOf('month')```竟然传递的是引用，简单说```time```改变之后这个值还会变，所以要```clone```一下。\n\n```javascript\n/**\n * @param {moment.Moment} _startTime\n * @param {moment.Moment} _endTime\n * @returns {moment.Moment[]}\n */\nfunction getMonths(_startTime, _endTime) {\n\tconst startTime = _startTime.clone();\n\tconst endTime = _endTime.clone();\n\tconst times = [];\n\twhile (\n\t\tendTime > startTime ||\n\t\tstartTime.format('YYYYMM') === endTime.format('YYYYMM')\n\t) {\n\t\tconst month = startTime.startOf('month').clone();\n\t\ttimes.push(month);\n\t\tstartTime.add(1, 'month');\n\t}\n\treturn times;\n}\n\n/**\n * @param {moment.Moment} _startTime\n * @param {moment.Moment} _endTime\n * @returns {moment.Moment[]}\n */\nfunction getDays(_startTime, _endTime) {\n\tconst startTime = _startTime.clone();\n\tconst endTime = _endTime.clone();\n\tconst times = [];\n\twhile (\n\t\tendTime > startTime ||\n\t\tstartTime.format('YYYYMMDD') === endTime.format('YYYYMMDD')\n\t) {\n\t\tconst day = startTime.startOf('day').clone();\n\t\ttimes.push(day);\n\t\tstartTime.add(1, 'day');\n\t}\n\treturn times;\n}\n\n/**\n * @param {moment.Moment} startTime\n * @param {moment.Moment} endTime\n * @returns {moment.Moment[]}\n */\nfunction getWeeks(_startTime, _endTime) {\n\tconst startTime = _startTime.clone();\n\tconst endTime = _endTime.clone();\n\tconst times = [];\n\twhile (\n\t\tendTime > startTime ||\n\t\tstartTime.endOf('week').format('YYYYMMDD') ===\n\t\t\tendTime.endOf('week').format('YYYYMMDD')\n\t) {\n\t\tconst week = startTime.startOf('week').clone();\n\t\ttimes.push(week);\n\t\tstartTime.add(1, 'week');\n\t}\n\n\treturn times;\n}\n```\n\n另外， 用```moment```获取到的```unix```时间戳是秒级别的，而默认js处理```Date.now()```取到的是毫秒级别的，需要单独处理。\n","collection":"blog","data":{"type":"post","category":"fe"}}]}