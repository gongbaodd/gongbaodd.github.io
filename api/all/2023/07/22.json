{"posts":[{"id":"2023/07/22/29th-week-geospatial.md","slug":"2023/07/22/29th-week-geospatial","body":"# 29th week: Google Geo-Spatial\n\n## Google Geo-Spatial\n\nFirstly, I didn't get the permission, this API is not opened for mainland China. I need a abroad VISA card.\n\nThis is [a slideshow](https://www.docswell.com/s/FumiyaHr/56YG27-2023-05-18-221638#p6) to introduce it.\n\nThis is [the official document](https://developers.google.com/ar/develop/geospatial). [This](https://developers.google.com/ar/develop/unity-arf/geospatial/streetscape-geometry) is about using google geo-spatial on unity. It is based on [AR Foundation](https://developers.google.com/ar/develop/unity-arf/getting-started-ar-foundation).\n\nThese are some [samples](https://github.com/google-ar/arcore-unity-extensions/tree/master/Samples~).\n\nThis is an [ARCore official page](https://developers.google.com/ar/geospatialcreator).\n\n[Earth Studio](https://www.google.com/earth/studio/) uses google geo-spatial to build Video assets.\n\nThis is a google's WebXR [tutorial](https://developers.google.com/ar/develop/webxr/hello-webxr), I'll check it out this week.\n\nAlso, here is some webXR [tutorial](https://doc.babylonjs.com/features/featuresDeepDive/webXR/WebXRSelectedFeatures\n) in [babylon.js](https://doc.babylonjs.com/features/featuresDeepDive/webXR/webXRARFeatures).\n\n## use Babylon editor and react-babylon.js\n\nThe Babylon editor uses CANNON as physical engine, before importing, I need to inject it.\n\n``` js\nBabylonFileLoaderConfiguration.LoaderInjectedPhysicsEngine = CANNON;\n```\n\nAnd the asset should be relatively put in the `root_dir`.\n\n```js\nSceneLoader.AppendAsync(`${root_dir}`, \"scene.babylon\", scene);\n```\n\n## OpenFaas\n\nThis is a new world to me, I found an ebook, [Kubernetes 中文指南](https://jimmysong.io/kubernetes-handbook/). I don't have time to read it yet.\n\n## GASP\n\n[GASP](https://greensock.com/gsap/) is an animation library, I heard from [@WawaSensei](https://www.youtube.com/@WawaSensei). He's got some nice shader [tutorials](https://www.youtube.com/watch?v=e2ntx-fyXaE) I want to learn.\n\n## Face tracking on WebXR\n\nCurrently, Face tracking is not supported in WebXR. This is a 3rd party library [mind-AR.js](https://medium.com/web-augmented-reality-development/webar-face-tracking-with-10-lines-of-code-18c5f24a0e38) that supports it.\n\n## Swift on Linux\n\nThis is a page about [swift on linux](http://swift-linux.refi64.com/en/latest/index.html). It seems only [Vapor](https://vapor.codes/) is still alive now (as a web server).\n\n## 3D LUT File\n\nLUT file(look up table) is a file that contains color correction data. It is used in video editing. [Adobe Premiere](https://www.makeuseof.com/adobe-premiere-how-to-export-lut/) can export it.\n\n## Video with depth\n\nThis is a [script](https://github.com/jankais3r/Video-Depthify) in Codelab to make depthify video. I can also use [stable diffusion](https://github.com/thygate/stable-diffusion-webui-depthmap-script) to make one.\n\n## Lottie\n\n[Lottie](https://lottiefiles.com/featured) is a SVG animation tool. Differences between Lottie and Rive is in this [document](https://rive.app/blog/rive-as-a-lottie-alternative). \n\n## React v18\n\nuseSyncExternalStore is a new react hook in v18. It can be used observe an element outside react environment\n\n```js\nlet data = {w: 0, h: 0};\nconst subscribe = snap => {\n    window.addEventListener('resize', snap);\n    () => window.removeEventListener('resize', snap);\n}\n\nconst snapshot = () => {\n    const w = window.innerWidth;\n    const h = window.innerHeight;\n    if (w !== data.w || h !== data.h) {\n        data = {w, h};\n    }\n    return data\n}\nconst Component = () => {\n    const {w, h} = useSyncExternalStore(subscribe, snapshot);\n}\n```\n\nSuspense is updated to support data fetching.\n\n```js\nlet data = null\nlet promise = null\nconst Suspender = () => {\n    if (data === null) {\n        if (promise === null) {\n            promise = fetch('url').then(res => res.json()).then(res => {\n                data = res;\n                promise = null;\n            });\n        }\n        throw promise;\n    }\n    return <div>{data}</div>\n}\n\nconst Component = () => {\n    return (\n        <Suspense fallback={<div>loading</div>}>\n            <Suspender />\n        </Suspense>\n    )\n}\n```\n\n## react-babylon.js\n\nI've finished the examples in [react-babylon.js](https://brianzinn.github.io/react-babylonjs/). I will try webXR next week. Still, there are some stuff I don't understand. Like [pbrMaterial](https://www.youtube.com/watch?v=CRg8P1Af1M0&ab_channel=Babylonjs), reflectionFresnelParameters, arcRotateCamera, and mesh-lookat.\n\n## Next week\n\nI'll try Google's webXR tutorial, and the babylon one.\n\nI'll continue the tensorflow tutorial. And the rust on android one.\n\nI'll try to compare Remix and Next.js.","collection":"blog","data":{"type":"post","category":"plan"}}]}