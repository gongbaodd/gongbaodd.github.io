{"posts":[{"id":"2023/05/01/16th-week-GUIs.md","slug":"2023/05/01/16th-week-guis","body":"\n# 16th week: GUIs\n\nlast week, I tried using different GUI frameworks to build a vcode form.\n\n[AntD](https://ant.design/) is a fully packed react component library. It is easy to use, and satisfies all the needs without picking.\n\n[XState](https://xstate.js.org/) is a state machine/ One thing I like is that it can show the state into a graph. Compared to hooks or redux, this is a nice feature for refactoring.\n\n[Vue](https://vuejs.org/), here are some [challenges](https://vuejs-challenges.netlify.app/) to learn vue. I used [Element+](https://element-plus.org/), which is a lot like AntD. Although many people think Vue is easier than React, I think it harder. to learn Vue you have to learn template syntax, an option style API and a composition API. Feels redundant.\n\n[Svelte](https://svelte.dev/) with [SMUI](https://sveltematerialui.com/), I like material design a lot. Compared to React, Svelte is not so fully prepared. But the code is the simplest in all the frameworks I tried.\n\n[Leptos](https://github.com/leptos-rs/leptos) a Rust GUI framework. With signal based reactive programming. It is like [SolidJs](https://www.solidjs.com/). It makes rust much easier to use. But WASM still a long way to go. The package is big, 2MB. The page needs to load for the whole file to run.\n\n[Flutter](https://flutter.dev/) renders all element into canvas. But the framework is fully made. I might choose Flutter for my next project.\n","collection":"blog","data":{"type":"post","category":"plan"}},{"id":"2023/05/03/reactive-in-GUIs.md","slug":"2023/05/03/reactive-in-guis","body":"\n# Reactive in GUIs\n\n[Jetpack Compose](https://developer.android.com/jetpack/compose/documentation)\n\n```kotlin\nval mutableStateOf = remember { mutableStateOf(default) }\nvar value by remember { mutableStateOf(default) }\nval (value, setValue) = remember { mutableStateOf(default) }\n```\n\nCan use Kotlin's [Flow](https://developer.android.com/kotlin/flow) to build reactive UI.\n\nBTW, there is a [material theme builder](https://m3.material.io/theme-builder#/custom) to build UI theme.\n\n[Flutter](https://docs.flutter.dev/)\n\n```dart\n// in a widget\nclass Home extends StatefulWidget {\n    @override\n    State<Home> createState() => _HomeState();\n}\nclass _HomeState extends State<Home> {\n    int _counter = 0;\n    @override\n    Widget build(BuildContext context) {\n        return Button(\n            onPressed: () => setState(() => _counter++),\n            child: Text('$_counter'),\n    }\n}\n```\n\n```dart\n// communication between widgets\nvoid main() {\n  runApp(\n    ChangeNotifierProvider( // Provider\n      create: (context) => CartModel(),\n      child: const MyApp(),\n    ),\n  );\n}\n\nclass CartModel extends ChangeNotifier {\n  var current = WordPair.random();\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n  @override\n  Widget build(BuildContext context) {\n    var appState = context.watch<CartModel>(); // Consumer\n\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: const Text('Provider demo')),\n        body: const MyCart(),\n      ),\n    );\n  }\n}\n\nreturn Consumer<CartModel>( // Consumer\n  builder: (context, cart, child) {\n    return Text('Total price: ${cart.totalPrice}');\n  },\n);\n```\n\n[SwiftUI](https://developer.apple.com/documentation/swiftui)\n\n```swift\n@State private var username = \"\"\n```\n\nshare data between views\n\n```swift\n// Our observable object class\nclass GameSettings: ObservableObject {\n    @Published var score = 0\n}\n\n// A view that expects to find a GameSettings object\n// in the environment, and shows its score.\nstruct ScoreView: View {\n    @EnvironmentObject var settings: GameSettings\n\n    var body: some View {\n        Text(\"Score: \\(settings.score)\")\n    }\n}\n\n// A view that creates the GameSettings object,\n// and places it into the environment for the\n// navigation stack.\nstruct ContentView: View {\n    @StateObject var settings = GameSettings()\n\n    var body: some View {\n        NavigationStack {\n            VStack {\n                // A button that writes to the environment settings\n                Button(\"Increase Score\") {\n                    settings.score += 1\n                }\n\n                NavigationLink {\n                    ScoreView()\n                } label: {\n                    Text(\"Show Detail View\")\n                }\n            }\n            .frame(height: 200)\n        }\n        .environmentObject(settings)\n    }\n}\n```\n\n```swift\n@ObservedObject var user: User\n```\n\n[Blazor](https://learn.microsoft.com/en-us/aspnet/core/blazor/?view=aspnetcore-7.0)\n\nusing Blazor in MAUI is available now, though it is not stable yet.\n\n```shell\ndotnet new install BlazorBindings.Maui.Templates\n```\n\n```razor\n@page \"/bind\"\n\n<p>\n    <input @bind=\"inputValue\" />\n</p>\n\n<p>\n    <input @bind=\"InputValue\" />\n</p>\n\n<ul>\n    <li><code>inputValue</code>: @inputValue</li>\n    <li><code>InputValue</code>: @InputValue</li>\n</ul>\n\n@code {\n    private string? inputValue;\n\n    private string? InputValue { get; set; }\n}\n```\n\nSince it is not stable yet, I did not dig into it.\n","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2023/05/05/use-stablediffusion-to-paint-with-specific-face.md","slug":"2023/05/05/use-stablediffusion-to-paint-with-specific-face","body":"\n# use statblediffusion to paint with specific face\n\ninstall python 3.10(not 3.11). clone the project;\n\n```bash\ngit clone https://github.com/AUTOMATIC1111/stable-diffusion-webui.git\n\n./webui.bat --enable-insecure-extension-access\n```\n\ninstall dreambooth extension and use some pictures to train the mode. use [Birme](https://www.birme.net/) to cut image in batch.\n","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2023/05/07/17th-week-stablediffusion.md","slug":"2023/05/07/17th-week-stablediffusion","body":"\n# 17th week stable diffusion\n\nGot My iPhone finally.\n\n- tried Memoji, can't generate one from my photo, sad. I can send it to wechat.\n- iPhone don't have a complete file system, it feels a little different to Android. Meaning most time, I can't open a folder, create a file to edit. I can open an editor to write and then share to the file App.\n- iPhone don't have a back logic, sometimes I want to swipe the side to trigger back logic, which is useful in Android, but it won't work in iOS.\n- I can't capture a 360 panorama photo, the last App, Gogle streetview was removed from App Store.\n\nTried stable diffusion, generated some photo with my face, like it.\n\nDid some research on XR, want to try some in MRTK. try the tutorial on babylonjs. About AR, 8th wall might be a starter choice, or I can try Unity's AR foundation, to make AR work on phones.\n","collection":"blog","data":{"type":"post","category":"plan"}},{"id":"2023/05/09/AImoji.md","slug":"2023/05/09/aimoji","body":"\n# AImoji\n\nyou can download the model of [AImoji](https://civitai.com/models/23111/aimoji-memoji-model), put in stable diffusion's model folder. Using `memoji of xxx` as prompt to generate a memoji.\n\nBut I want to use it generating my photo, I need to merge my old model with it. That means I have to use extra 4GB for the new model. But I can make a Lora. Using [Kohya's GUI](https://github.com/bmaltais/kohya_ss), with the AImoji model, I can simply make one Lora, then put it to the statble diffusion's Lora folder.\n\nusing Lora prompt, now I can combine two model without retraining.\n","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2023/05/15/19th-week-Google-IO.md","slug":"2023/05/15/19th-week-google-io","body":"# 19th week Google IO\n\nTried AImoji this week, using stable diffusion to generate emoji. Try [this video](https://t.co/IiWIS6MQJY) to learn more about training a picture.\n\nTried MRTK on Hololens, tried some quest demos, building a VR is fun, compiling time is a disaster. Want to try compile MRTK on quest, and learn some babylonjs.\n\nTrie QWERT-learner to remember words, this week I want to finish it.","collection":"blog","data":{"type":"post","category":"plan"}},{"id":"2023/05/17/MRTK-on-quest.md","slug":"2023/05/17/mrtk-on-quest","body":"# MRTK on quest\n\n1. create a 3D project on Unity Editor\n\n2. switch platform in build settings\n\n3. import XR plugin management from package manager\n\n4. import MRTK example and MRTK foundation from MixedRealityFeatureTool(downloaded from Microsoft)\n\n5. choose scene in MRTK example, change the profile into quest\n\n6. build and run\n\ncheck [this](https://www.youtube.com/watch?v=wSPXTRYxq9A&list=PLQMQNmwN3FvzWQ1Hyb4XRnVncvCmcU8YY&ab_channel=DilmerValecillos) and [this](https://www.youtube.com/watch?v=rb5GZVDREdk&ab_channel=DilmerValecillos) videos for details","collection":"blog","data":{"type":"post","category":"tech"}},{"id":"2023/05/18/ngrok-reverse-proxy-service.md","slug":"2023/05/18/ngrok-reverse-proxy-service","body":"# ngrok: A Reverse Proxy Service\n\nSometimes we need a HTTPs server to develop a web app, surely using mkcert can generate a local certificate. But by using `vite-plugin-mkcert`, I found the server is too easy to breakdown. So I decided to use [ngrok](https://ngrok.com/product) to build a reverse proxy service.\n","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2023/05/21/20th-week-web-BLE.md","slug":"2023/05/21/20th-week-web-ble","body":"# 20th week web BLE\n\nWatched The Long Season, nice story about the life of northeast China.\n\nWatched The Super Mario Movie, funny movie.\n\nTried to build MRTK on quest, quite simple but not as easy as web development.\n\nDid some research to build a [web BLE](https://googlechrome.github.io/samples/web-bluetooth/) project on my indoor biking device. Can use [nRF Connect](https://play.google.com/store/apps/details?id=no.nordicsemi.android.mcp&hl=zh&gl=US) to read what the BLEs send. But the simulator is deprecated, meaning I can't simulate a fake BLE device on my computer. I have to buy a BLE device to test it.I can't using web-BLE on iOS. [Bluefy](https://apps.apple.com/jp/app/bluefy-web-ble-browser/id1492822055) is a free app to test web-BLE on iOS.\n\nDid some research on [WebXR](https://immersiveweb.dev/).\n\nIt's amazing that web can do so much stuff.\n\n[Edge impulse](https://www.edgeimpulse.com/) puts ML into embedded devices, I won't dig it further. It's unbelivably cheap when I realized that a PR2040 board only costs 20CNY.","collection":"blog","data":{"type":"post","category":"plan"}},{"id":"2023/05/26/tRPC.md","slug":"2023/05/26/trpc","body":"# using tRPC\n\n[tRPC](https://trpc.io/) is a RPC framework for TypeScript. A lot people compare it with graphql. After using it, I found out that they are not the same thing. GraphQL is more like Restful API. tRPC is a package to build Restful API with TypeScript.\n\nI suddenly realized that I can use GraphQL in cloud functions. Compared with Restful API, GraphQL can do many work with only one endpoint.\n","collection":"blog","data":{"type":"post","category":"fe"}},{"id":"2023/05/29/21st-week-cloudflare-workers-and-graphql-yoga.md","slug":"2023/05/29/21st-week-cloudflare-workers-and-graphql-yoga","body":"# 21st Week: Cloudflare Workers and GraphQL Yoga\n\nI've been working on adding a backend for qwert-learner.\n\nTo keep this App a static site, I decided to ditch the Restful API and use GraphQL instead. Since it only requires one endpoint. A lot schemes can found like Azure functions, AWS Lambda, Google Cloud Functions, DigitalOcean Functions and Cloudflare Workers. MongoDB Atlas is a cheap choice for database. But Cloudflare workers can use KV to store data, which is a better choice for me.\n\nCampared with Apollo Server, [GraphQL Yoga](https://the-guild.dev/graphql/yoga-server) is a lightweight one. Can be simply integrated with a lot providers like cloudflare. Here is the [document](https://the-guild.dev/graphql/yoga-server/docs/integrations/integration-with-cloudflare-workers).\n\nDeveloping cloudfalre workers is much easier with [wrangler](https://developers.cloudflare.com/workers/wrangler/). Can use [miniflare](https://miniflare.dev/testing/vitest) to do unit testing.\n\n","collection":"blog","data":{"type":"post","category":"plan"}}]}