{"posts":[{"id":"2023/05/03/reactive-in-GUIs.md","slug":"2023/05/03/reactive-in-guis","body":"\n# Reactive in GUIs\n\n[Jetpack Compose](https://developer.android.com/jetpack/compose/documentation)\n\n```kotlin\nval mutableStateOf = remember { mutableStateOf(default) }\nvar value by remember { mutableStateOf(default) }\nval (value, setValue) = remember { mutableStateOf(default) }\n```\n\nCan use Kotlin's [Flow](https://developer.android.com/kotlin/flow) to build reactive UI.\n\nBTW, there is a [material theme builder](https://m3.material.io/theme-builder#/custom) to build UI theme.\n\n[Flutter](https://docs.flutter.dev/)\n\n```dart\n// in a widget\nclass Home extends StatefulWidget {\n    @override\n    State<Home> createState() => _HomeState();\n}\nclass _HomeState extends State<Home> {\n    int _counter = 0;\n    @override\n    Widget build(BuildContext context) {\n        return Button(\n            onPressed: () => setState(() => _counter++),\n            child: Text('$_counter'),\n    }\n}\n```\n\n```dart\n// communication between widgets\nvoid main() {\n  runApp(\n    ChangeNotifierProvider( // Provider\n      create: (context) => CartModel(),\n      child: const MyApp(),\n    ),\n  );\n}\n\nclass CartModel extends ChangeNotifier {\n  var current = WordPair.random();\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n  @override\n  Widget build(BuildContext context) {\n    var appState = context.watch<CartModel>(); // Consumer\n\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: const Text('Provider demo')),\n        body: const MyCart(),\n      ),\n    );\n  }\n}\n\nreturn Consumer<CartModel>( // Consumer\n  builder: (context, cart, child) {\n    return Text('Total price: ${cart.totalPrice}');\n  },\n);\n```\n\n[SwiftUI](https://developer.apple.com/documentation/swiftui)\n\n```swift\n@State private var username = \"\"\n```\n\nshare data between views\n\n```swift\n// Our observable object class\nclass GameSettings: ObservableObject {\n    @Published var score = 0\n}\n\n// A view that expects to find a GameSettings object\n// in the environment, and shows its score.\nstruct ScoreView: View {\n    @EnvironmentObject var settings: GameSettings\n\n    var body: some View {\n        Text(\"Score: \\(settings.score)\")\n    }\n}\n\n// A view that creates the GameSettings object,\n// and places it into the environment for the\n// navigation stack.\nstruct ContentView: View {\n    @StateObject var settings = GameSettings()\n\n    var body: some View {\n        NavigationStack {\n            VStack {\n                // A button that writes to the environment settings\n                Button(\"Increase Score\") {\n                    settings.score += 1\n                }\n\n                NavigationLink {\n                    ScoreView()\n                } label: {\n                    Text(\"Show Detail View\")\n                }\n            }\n            .frame(height: 200)\n        }\n        .environmentObject(settings)\n    }\n}\n```\n\n```swift\n@ObservedObject var user: User\n```\n\n[Blazor](https://learn.microsoft.com/en-us/aspnet/core/blazor/?view=aspnetcore-7.0)\n\nusing Blazor in MAUI is available now, though it is not stable yet.\n\n```shell\ndotnet new install BlazorBindings.Maui.Templates\n```\n\n```razor\n@page \"/bind\"\n\n<p>\n    <input @bind=\"inputValue\" />\n</p>\n\n<p>\n    <input @bind=\"InputValue\" />\n</p>\n\n<ul>\n    <li><code>inputValue</code>: @inputValue</li>\n    <li><code>InputValue</code>: @InputValue</li>\n</ul>\n\n@code {\n    private string? inputValue;\n\n    private string? InputValue { get; set; }\n}\n```\n\nSince it is not stable yet, I did not dig into it.\n","collection":"blog","data":{"type":"post","category":"tech"}}]}