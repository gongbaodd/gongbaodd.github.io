{"posts":[{"id":"2020/02/10/actix-web-rust-web.md","slug":"2020/02/10/actix-web-rust-web","body":"\n# 利用 actix_web 使用 rust 编写 web 应用\n\n最近我一直在实践 rust 相关的内容，本来想写一篇类似于[scrapy 的文章](http://gongbaodd.github.io/tech/2020/02/04/Windows%E4%B8%8A%E4%BD%BF%E7%94%A8scrapy%E7%88%AC%E7%BD%91%E9%A1%B5.html)，后来发现内容有点多，仅仅一篇文章兜不住，干脆写一个系列好了。\n\n## 使用 Rust 的工具\n\n### rustup\n\n使用 chocolatey 安装，安装好以后只是处理好了 rustup，后面的工具链还要用再次处理。\n\n```shell\nchoco install rust\n```\n\n关于 rustup 的使用，可以查看[文档](https://github.com/rust-lang/rustup/blob/master/README.md)，包括如何做交叉编译都可以使用这个工具完成。\n\n```shell\nrustup toolchain install stable-msvc\n```\n\n### crates.io\n\n[crates.io](https://crates.io/) 是 rust 的模块库，没啥可说的。\n\n### cargo\n\ncargo 是 rust 的包管理工具。以下是几个 cargo 经常使用的命令。\n\n- `cargo new [project name]`，新建一个项目。\n- `cargo init`，初始化一个项目。\n- `cargo clean`，清理编译文件（相信我，这个会经常用）。\n- `cargo run`，编译并运行 main 文件。\n- `cargo run --bin [helper file name]`，直接执行 bin 文件夹下的文件。\n- `cargo build`，编译文件。\n- `cargo install [tools name]`，安装工具。\n\n### cargo-edit\n\n执行`cargo init`之后，项目根目录会生成一个`Cargo.toml`文件本项目的依赖模块都会放到这里，然而手动编写这个文件对于像我这样的懒人显然是无法接受的。因此可以借助`cargo-edit`完成。\n\n```shell\ncargo install cargo-edit\n```\n\n记住`cargo-edit`如下命令即可。\n\n- `cargo add [module name]` 安装一个模块。\n- `cargo rm [module name]` 删除一个模块。\n\n## rust 项目结构\n\n```shell\n- Cargo.toml\n- Cargo.lock\n- src\n-- main.rs # 项目入口文件\n-- lib.rs # 如果作为封装成一个crate，这里配置可以暴露的模块\n-- bin/ # 项目工具文件\n--- helper.rs\n```\n\n## 语法速记\n\n### 函数\n\nrust 的函数还比较有趣，它的`return`关键字是默认省略的，如果这个函数没有中断，这个函数的最后一行就是返回值，且这一行不带分号。\n\n```rust\npub async fn index() -> impl Responder {\n    format!(\"hello\")\n}\n```\n\n如果这个函数没写返回值，其实编译器还会让这个函数返回一个`()`。\n\n```rust\nfn main() {\n    println!(\"hello world\");\n    () // 此处不加()编译器还是会默认理解为返回()。\n}\n```\n\n这么做确实比较符合函数编程的概念，但是一般 rust 库里面的函数都会返回 Result 或者 Option 类型，就用 Result 类型做例子，一般会有四种处理方式。\n\n```rust\nlet bar = foo().expect(\"Panic!\"); // 直接中断程序\nlet bar = match foo() {\n    Ok(value) => Some(value),\n    Err(_) => Some(someError)\n}; // 通过match判断处理错误， 类似于其他语言的switch-case\nlet bar = foo()?; // 把错误处理交给bar\nlet bar = foo().unwrap_or(); // 成功返回成功值，失败返回unwrap_or的值\n```\n\n### 模块\n\n通常想要使用一个模块，只需要使用`use`关键字。\n\n```rust\nuse std::env;\n\nfn main() {\n    let db_url = match env::var(\"DB_URL\") {\n        Ok(_) => { \"OK\".to_owned() }\n        Err(_) => { \"Err\".to_owned() }\n    };\n\n    println!(\"{}\", db_url);\n}\n```\n\n如果引用的这个包是个非 rust 标准包（一个 crate，这里说的是我的理解，如果有个官方中文说法，以它为准），需要在添加`extern crate`关键字，如果还引用了宏，还要加上`#[macro_use]`（这就比较坑了，我哪知道到底用没用上宏，所以一般我都靠编辑器帮我编译一下...）。\n\n```rust\n#[macro_use]\nextern crate log;\n\nfn main() {\n    info!(\"debug\")\n}\n```\n\n如果只是引用本项目相对地址的文件，使用`mod`关键字就好，可以看我的[actix_log](https://github.com/gongbaodd/rust_webAssembly_study/tree/master/actix_log)。\n\n#### 为啥 rust 的模块这么复杂\n\n我猜测毕竟 rust 是对标 C 语言的，相比于很多高级语言的链接工作是在虚拟机里面做的，rust 则全部下放到语言里面，所以一起用起来就会比较复杂。\n\n## trait\n\ntrait 是 rust 上面的一个新概念，类似于 JS 的 mixin 和 Java 的接口，后面我会按例子来讲。\n\n很多库的 trait 需要单独引用，否则会编译失败，这些库往往会封装成一个 prelude 使用。\n\n```rust\nuse gtk::prelude::*;\n```\n\n## rust command\n\nrust 是个系统级语言，可以互相访问其他程序语言分享的堆内存空间，FFI 依靠的是 Box，但是本篇暂时不提及，这个[代码](https://github.com/gongbaodd/rust_webAssembly_study/tree/master/command)实现的是读取并处理其它语言的 std 输出。\n\n## Actix_web\n\n[actix-web](https://actix.rs/)是 Rust 的 web 框架之一，试用了一下，很好上手，有一点 Express 的味道。\n\n```shell\ncargo add actix-web\ncargo add actix_rt\n```\n\n官网首页的例子即是一个简单的应用。\n\n```rust\nuse actix::{\n    web,\n    App,\n    HttpServer,\n    Responder,\n    HttpRequest,\n};\n\nasync fn greet(req: HttpRequest) -> impl Responder {\n    let name = req.match_info()\n        .get(\"name\")\n        .unwrap_or(\"World\");\n\n    format!(\"Hello {}!\", name)\n}\n\n#[actix_rt]\nasync fn main() -> std::io::Result<()> {\n    HttpServer::new(\n        || {\n            App::new()\n                .route(\"/\", web::get().to(greet))\n                .route(\"/{name}\", web::get().to(greet))\n        }\n    )\n    .bind(\"127.0.0.1:8080\")?\n    .run()\n    .await\n}\n\n```\n\n当然，如果觉得路由的部分比较难写，还可以使用宏来修改。\n\n```rust\n#[get(\"/\")]\nasync fn greet(req: HttpRequest) -> impl Responder {\n    let name = req.match_info()\n        .get(\"name\")\n        .unwrap_or(\"World\");\n\n    format!(\"Hello {}!\", name)\n}\n\nApp::new().route(greet);\n```\n\n### 利用中间件处理日志和错误\n\nlog 和 env_logger 是 rust 的日志工具，基本上都是宏。\n\n```\ncargo add log\ncargo add env_logger\n```\n\nactix-web 使用 wrap 方法添加中间件，如添加 Logger 打出标准访问日志。\n\n```rust\nuse actix_web::middleware::Logger;\nasync fn main() -> std::io::Result<()> {\n    std::env::set_var(\"RUST_LOG\", \"actix_web=info,info\");\n    env_logger::init();\n\n    let url = \"127.0.0.1:8080\";\n    let app = || {\n        App::new()\n            .wrap(Logger::default())\n            .wrap(Logger::new(\"%a %{User-Agent}i\"))\n            .wrap(middleware::DefaultHeaders::new().header(\"X-Version\", \"0.2\"))\n            .wrap(ErrorHandlers::new().handler(http::StatusCode::INTERNAL_SERVER_ERROR, render_500))\n            .service(routes::index::index)\n    };\n\n    let server = HttpServer::new(app).bind(url);\n    let wait_server = server?.run();\n\n    info!(\"Running Server on {}\", url);\n    wait_server.await\n}\n```\n\n错误处理，详细代码可以查看[actix-log](https://github.com/gongbaodd/rust_webAssembly_study/tree/master/actix_log)。\n\n```rust\nfn render_500<B>(mut res: dev::ServiceResponse<B>) -> Result<ErrorHandlerResponse<B>> {\n    res.response_mut().headers_mut().insert(\n        http::header::CONTENT_TYPE,\n        http::HeaderValue::from_static(\"Error\"),\n    );\n    Ok(ErrorHandlerResponse::Response(res))\n}\n```\n\n### 使用 serde 返回 JSON\n\n想要制作 Restful API，JSON 支持是少不了的。\n\n```shell\ncargo add serde\n```\n\n由于 actix-web 对路由回应格式的支持，一个 json 文件可以这么写。\n\n```rust\nuse acrix_web:{\n    HttpResponse,\n    Responder,\n    get,\n};\nuse serde::{\n    Serialize,\n    Deserialize,\n};\n\n#[derive(Serialize, Deserialize)]\nstruct MyObj {\n    message: String,\n}\n\n#[get(\"/hello\")]\nasync fn hello() -> impl Responder {\n    HttpResponse::Ok().json(MyObj {\n        message: \"SUCCESS\"\n    })\n}\n\n```\n\n更多详细的代码可以查看我的[github](https://github.com/gongbaodd/rust_webAssembly_study/tree/master/actixweb)。\n\n## diesel 处理 ORM(sqlite)\n\n强烈安利大家去看一下 diesel 的[Get Start](http://diesel.rs/guides/getting-started/)，确实是一种下一代 ORM 的感觉。\n\n```shell\ncargo add diesel\n```\n\n### diesel_cli\n\ndiesel_cli 是 diesel 的命令行工具，提供数据部署和 schema 生成的功能，如果不指定 feature 的话，安装时会同时编译 sqlite、postgreSQL 以及 MySQL。\n\n```shell\ncargo install diesel_cli --no-default-features --features sqlite\n```\n\n第一次编译的时候，在 Windows 下面失败了，翻了一下[issue](https://github.com/diesel-rs/diesel/issues/487)找到了解决方案。\n\n首先安装 Visual Studio（反正现在免费安），使用 VS 的终端打开 sqlite 文件夹。\n\n```batch\ncd C:\\ProgramData\\chocolatey\\lib\\SQLite\\tools\nlib /def:sqlite3.def /out:sqlite3.lib\n```\n\n然后记得把`C:\\ProgramData\\chocolatey\\lib\\SQLite\\tools`放到环境变量 PATH 里面。\n\n再次编译即可，具体如何使用 diesel 的 get start 已经足够了，在此不做赘述，可以查看[源码](https://github.com/gongbaodd/rust_webAssembly_study/tree/master/diesel_demo)。\n\n这里列举一下经常用的命令\n\n- `diesel setup` 初始化。\n- `diesel migration generate [step name]` 生成 down.sql 和 up.sql。\n- `diesel migration run` 按照 SQL 文件部署数据库和 schema 文件（目前发现一个 bug，生成的 schema 不完全，没能完全复现）。\n- `diesel migration revert` 撤回数据库操作。\n\n### 补充一下 rust 语法里面的生命周期\n\ndemo 里面的 lib 文件 create_post 语法很奇怪。\n\n```rust\npub fn create_post<'a>(conn: &SqliteConnection, title: &'a str, body: &'a str) -> usize {\n    use schema::posts;\n\n    let new_post = NewPost {\n        title: title,\n        body: body,\n    };\n\n    diesel::insert_into(posts::table)\n        .values(&new_post)\n        .execute(conn)\n        .expect(\"Error saving new post\")\n}\n```\n\n`<'a>`的写法是指明函数的生命周期标注，因为 rust 没有垃圾回收机制，所有申请的堆内存在一个函数执行结束后就会回收。所以当一个函数的输入值是堆内存的变量，就发生「借用」，如这个函数里面的三个参数，借用都用`&`来标注。\n\n假设一个变量借出给另一个函数，而在借用变量的函数执行阶段借出函数就结束并销毁变量，程序就会出错，因此生命周期就是用来确定一个借出的变量必须还回后才能被销毁。默认 rust 都会给一个生命周期，然而当出现两个以上生命周期时，如`create_post`则需要程序员指定参数必须在一个生命周期内。\n\n## juniper 实现 graphql\n\n写一个 Query 的方法\n\n```rust\n#[derive(juniper::GraphQLObject)]\nstruct MyObj {\n    name: String,\n}\n\nstruct QueryRoot;\n#[derive(juniper::object)]\nimpl QueryRoot {\n    fn myObj() -> juniper::FieldResult {\n        Ok(MyObj {\n            name: \"World\"\n        })\n    }\n}\n```\n\nMutation 也类似，基本很简单，可以查看[代码](https://github.com/gongbaodd/rust_webAssembly_study/blob/master/graphql_only)了解。\n\n### rust 语法里面闭包里面 move 的使用\n\n前面说过，如果一个函数想调用另一个函数的堆内存，可以借用。但是还有另一种函数，闭包，理论上闭包可以处理闭包所在词法作用域下的所有变量。在动态执行时如果闭包中依赖的一个变量已经销毁也是很危险的事儿，所以这里可以用 move 关键字将变量所有权交给闭包，在闭包外则无权再次处理已经 move 的变量。\n\n```rust\nasync fn main() -> io::Result<()> {\n    let schema = std::sync::Arc::new(create_schema());\n\n    let app = move || {\n        App::new()\n            .data(schema.clone())\n            .wrap(middleware::Logger::default())\n            .service(graphql)\n            .service(graphiql)\n    };\n\n    HttpServer::new(app)\n        .bind(\"127.0.0.1:8080\")?\n        .run()\n        .await\n}\n```\n\n当然 graphql 的代码里面还有 RC 和 ARC 的概念，现在暂时了解他们时 Rust 下面的引用计数的一种实现，RC 用于单线程，ARC 用于多线程。\n","collection":"blog","data":{"type":"post","category":"fe","tag":["rust","actix_web"]}},{"id":"2020/02/12/Windows-Rust-GTK.md","slug":"2020/02/12/windows-rust-gtk","body":"\n# Windows 下为 Rust 提供 GTK 环境\n\nWindows 下面安装 GTK 环境有两种方法，借助 msys2 的 linux 环境，或者借助 VCPKG 安装 Windows 的 GTK 依赖。\n\n尝试了一下，msys2 并没有成功，只能使用 VCPKG，参考[gnome 编译指南](https://www.gtk.org/download/windows.php)。\n\n```batch\ngit clone https://github.com/Microsoft/vcpkg\ncd vcpkg\n.\\bootstrap-vcpkg.bat\nvcpkg install gtk:x64-windows\n```\n\n安装的时候发现不能编译成功，此时需要祭出 Visual Studio 大法，找到 Visual Studio Installer，安装 C 工具链，再重新执行上面的代码即可。\n\n然后再环境变量中增加`GTK_LIB_BASE`值为`c:\\MyWorks\\github\\vcpkg\\installed\\x64-windows\\lib`(就是 vcpkg 下载依赖包的位置)\n\n环境变量中的 PATH 的第一个值也要配上`c:\\MyWorks\\github\\vcpkg\\installed\\x64-windows\\bin`。\n\n如果 rust 项目还编译不成功，尝试将 vcpkg 里面的/lib/gdk-3.lib 和/lib/gtk-3.lib 连接到/lib/gdk-3.0.lib 和/lib/gtk-3.0.lib，bin 文件夹下的 dll 文件也一样处理。\n\n再次运行`cargo run`即可，[相关代码](https://github.com/gongbaodd/rust_webAssembly_study/tree/master/rust_gtk)。\n\n最初想试一下 rust-gtk 的原因是，想试试这个跨平台框架如何，但是在 Windows 下面效果并不怎么样，而且还有 HIDPI 的问题，Reddit 里面讨论感觉 gtk 这边也没有很着力于 rust，所以对 GTK 的探究就暂时到此为止了。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["rust","gtk"]}},{"id":"2020/02/13/Windows-Rust-QT.md","slug":"2020/02/13/windows-rust-qt","body":"\n# Windows 下为 Rust 提供 QT 环境（弃）\n\nQT 的部署要比 GTK 容易一些，然而由于最近我的机场流量用尽，所以最大的困难就是网络。\n\n参考[Rust-qt](https://github.com/rust-qt/examples)，有比较详细的环境配置。需要下载完整的[Qt 安装包](https://www.qt.io/download)和[Visual Studio 2017](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15)（最好用 2017，能少踩不少坑）。\n\n安装成功后，在环境变量 PATH 里面增加`C:\\Qt\\Qt5.14.1\\5.14.1\\msvc2017_64\\bin`然后找到 VS2017 的命令行，只有这个命令行能准确编译 QT5。\n\n虽然按照 Rust-qt 的做法，C++的 QT 可以完美运行，但是编译的时候要使用 gcc，所以还是要安装 msys2，而且对 QT 要求的版本也比较苛刻，因此我决定就此放弃 QT（即使 QT 已经能跑在 web-assembly 上面了）。\n\n## Rust 相关的 UI 框架\n\n其实还有一篇文章关于 Rust 的 UI 编程的，可以查看[这篇文章](https://gitlab.com/bloom42/research/rust_gui_ecosystem)。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["rust","qt"]}},{"id":"2020/02/27/rust-webassembly-game-of-life.md","slug":"2020/02/27/rust-webassembly-game-of-life","body":"\n# 使用 rust 和 webassembly 开发 game of life\n\n这是一篇翻译，[原文](https://github.com/rustwasm/book.git)，这可能是第一篇系统讲解 rustwasm 的文章了。\n\n## 这本书适合谁？\n\n这本书适合任何对快速编译 Rust 和 Webassembly 感兴趣的人，相关的代码已经发布在网上。你应该已经了解一些 Rust 的知识，对 JavaScript HTML 和 css 很熟悉，但你不需要是在这些方面的专家。\n\n还不了解 rust？请先参阅[开始使用 rust 语言](https://doc.rust-lang.org/book/)。\n不了解 JavaScript 的 html 或者是 css？请参阅[MDN](https://developer.mozilla.org/en-US/docs/Learn)\n\n## 为什么用 rust 和 webAssembly\n\n### 底层支持和高效(Low-Level Control with Hign-Level Ergonomics)\n\nJavascript 的应用，纠结于如何保持高效运作。但是 JavaScript 的动态类型系统和垃圾回收机制，使他们不能高效。看起来很小的修改，如果不小心走出了 JIT 的舒适区，看起来很小的修改都会导致很严重的错误。\n\n### .wasm 文件大小\n\n因为要通过网络下载，代码的大小就变得异常重要。Rust 不需要运行环境，使得编译文件不需要包括垃圾回收器。这些文件包括的只有真正需要的函数。\n\n### 不要重写所有的东西\n\n现有的代码不需要被扔走，你可以把性能最严重的 JavaScript 函数，交给 rust 去执行。\n\n### 和其他工具交互融洽\n\nRust 和 WebAssembly 支持现有的工具链，它支持 ecmascript 模块，并且你依然可以使用现有的工具链如 NPM，webpack 和 greenkeeper。\n\n## 背景和相关概念\n\n### 什么是 WebAssembly\n\nWebAssembly（wasm）是一个简单的机器模块拥有大量的[定义](https://webassembly.github.io/spec/)。它被设计得以相近于原生的速度便携紧密地执行。\n\n作为一个开发语言，尽管是以两种方式展示的格式，wasm 依然表示于同样的结构。\n\n- `.wat`文本格式（叫做 WebAssembly Text），使用[S-expression](https://en.wikipedia.org/wiki/S-expression)，有点类似于 Lisp 家族，像是 Scheme 和 Clojure。\n- `.wasm`二机制格式，是一个底层的目标是让 wasm 虚拟机使用的格式，有些类似于 ELF 和 Mach-O。\n\n以`.wat`书写的斐波那契数列如下：\n\n```wasm\n(module\n  (func $fac (param f64) (result f64)\n    get_local 0\n    f64.const 1\n    f64.lt\n    if (result f64)\n      f64.const 1\n    else\n      get_local 0\n      get_local 0\n      f64.const 1\n      f64.sub\n      call $fac\n      f64.mul\n    end)\n  (export \"fac\" (func $fac)))\n```\n\n如果感兴趣的话，可以使用[此工具](https://webassembly.github.io/wabt/demo/wat2wasm/)执行上面的代码。\n\n#### 线性内存\n\nWasm 使用的[内存模式](https://webassembly.github.io/spec/core/syntax/modules.html#syntax-mem)很简单。一个 wasm 模块，可以访问的一系列内存，被限制于一个字节数组中。这些内存会[增长](https://webassembly.github.io/spec/core/syntax/instructions.html#syntax-instr-memory)为多个页（64K）不会收缩。\n\n#### Wasm 是仅仅为 web 开发的吗？\n\n尽管在 JavaScript 和 web 社区中有很多讨论。WASM 并没有考虑过它的运用环境。所以目前只能定义它为将来可以使用的便携运行格式。但就目前而言，wasm 仍然在很多方面与 JavaScript 有关。不仅仅是浏览器，还有 Node.js。\n\n## 关于本书\n\n这一部分开始使用 Rust 和 WebAssembly 开发[Conway 的 Game of Life](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life)。\n\n本章会讲到以下内容。\n\n- 如何搭建编译 WebAssembly 的 Rust 工具链。\n- 一个支持开发多语言程序（Rust、wasm、JavaScript、HTML 和 CSS）的工作流。\n- 设计最大利用 rust 和 wasm 的优势配合 JavaScript 的优点的 API。\n- 如何调试 wasm 模块。\n- 如何查看 wasm 的时间日志（time profile）。\n- 如何减少生成的二进制文件包大小。\n\n## 安装工具\n\n本节将会介绍编译 Rust 编译 WASM 并和 JavaScript 集成的工具链。\n\n### Rust 工具链\n\n你需要安装 rust 的标准工具链，[rustup，rustc 和 cargo](https://www.rust-lang.org/tools/install)（强烈建议你们在 WSl 的环境下面工作）。\n\nWASM 已经推动 Rust 新特性进入稳定版，所以我们需要有 1.30 或更新版本。\n\n### wasm-pack\n\n`wasm-pack`是一站式的建造测试以及发布 rust 相关的 wasm 应用工具。\n\n```shell\ncargo install wasm-pack\n```\n\n### cargo-generate\n\n`cargo-generate`帮助你使用现存的 Git 仓库作为模板新建 Rust 项目。\n\n```shell\ncargo install cargo-generate\n```\n\n### NPM\n\n`npm`是 JavaScript 的包装管理器。我们将利用它，去安装和运行 JavaScript 的打包和测试部署。我们将把我们编译好的`.wasm`文件放到 npm 的包中。\n\n如果你已经安装了 NPM 可以执行以下命令，安装最新版。\n\n```shell\nnpm install npm@latest -g\n```\n\n## 你好，世界\n\n通过本部分可以创建一个 Rust+WASM 页面，并能在页面弹窗展示`\"Hello, World!\"`。\n\n### 复制项目模板\n\n这个项目的模板已经提前编译好，可以借此快速绑定、集成和打包成 Web 项目。\n\n利用模板创建项目的命令：\n\n```shell\ncargo generate --git https://github.com/rustwasm/wasm-pack-template\n```\n\n它会提醒你新建一个项目名称，这里我们先使用\"wasm-game-of-life\"。\n\n### 文件结构\n\n进入项目文件夹。\n\n```shell\ncd wasm-game-of-life\n```\n\n以下是项目文件夹：\n\n```\nwasm-game-of-life/\n├── Cargo.toml\n├── LICENSE_APACHE\n├── LICENSE_MIT\n├── README.md\n└── src\n    ├── lib.rs\n    └── utils.rs\n```\n\n接下来详细看一下：\n\n#### wasm-game-of-life/Cargo.toml\n\n`Cargo.toml`文件描述`cargo`的依赖和源文件，Rust 的包管理工具和编译工具。这个包括`wasm-bindgen`依赖，我们会稍后了解其他的依赖，还有一些用来初始化`.wasm`的`crate-type`库。\n\n#### wasm-game-of-life/src/lib.rs\n\n`src/lib`文件放在 Rust 项目的更目录下面。它使用`wasm-bindgen`去和 JavaScript 链接。它能引入`window.alert`这个 JavaScript 函数，并暴露`greet`函数，并弹出弹框。\n\n```Rust\nmod utils;\nuse wasm_bindgen::prelude::*;\n\n// 当wee_alloc特性被打开，将会使用wee_alloc作为全局分匹配器\n#[cfg(feature = \"wee_alloc\")]\n#[global_allocator]\nstatic ALLOC: wee_alloc::WeeAlloc = wee_alloc::WeeAlloc::INIT;\n\n#[wasm_bindgen]\nextern {\n    fn alert(s: &str);\n}\n\n#[wasm_bindgen]\npub fn greet() {\n    alert(\"Hello, wasm-game-of-life!\");\n}\n```\n\n#### wasm-game-of-life/src/utils.rs\n\n`src/utils`模块为编译 Rust 到 WASM 提供工具函数，我们后面会在调试时提到它，现在先忽略。\n\n### 编译项目\n\n使用`wasm-pack`依赖以下工具：\n\n- 保证 Rust 版本在 1.30 以上，且已经通过`rustup`安装`wasm32-unknown-unknown`工具链。\n- 使用`cargo`编译 Rust 到 WASM。\n- 使用`wasm-bindgen`去生成 JavaScript 的 API。\n\n为了完成以上内容，需要在根目录执行以下命令：\n\n```shell\nwasm-pack build\n```\n\n编译完成后，我们可以看到`pkg`里面的结构，里面应该有如下文件。\n\n```\npkg/\n├── package.json\n├── README.md\n├── wasm_game_of_life_bg.wasm\n├── wasm_game_of_life.d.ts\n└── wasm_game_of_life.js\n```\n\n`README.md`文件是直接从根目录复制的，但是其他文件完全是新生成的。\n\n#### wasm-game-of-life/pkg/wasm_game_of_life_bg.wasm\n\n`.wasm`文件是 Rust 工具链使用 Rust 源代码生成的 WASM 的二进制文件，它包括全部的函数和数据，比方说，爆露出来的`greet`函数。\n\n#### wasm-game-of-life/pkg/wasm_game_of_life.js\n\n这个`.js`文件是`wasm-bindgen`引入 DOM 和 JavaScript 方法到 Rust 中，并油耗地暴露 WASM 的 API 到 JavaScript 中。举个例子，这里个`greet`函数包裹了 WASM 中的`greet`函数，目前，这个粘合还没做任何功能，当我们逐渐从 WASM 和 JavaScript 中传输数据，他会提供帮助。\n\n```javascript\nimport * as wasm from \"./wasm_game_of_life_bg\";\n\nexport function greet() {\n  return wasm.greet();\n}\n```\n\n#### wasm-game-of-life/pkg/wasm_game_of_life.d.ts\n\n这个`.d.ts`是 TypeScript 链接 JavaScript 的文件。如果你的项目中使用了 TypeScript，你可以让你的 WebAssembly 项目被类型检查，并且你的 IDE 会提供代码提醒和自动完成功能。\n\n```TypeScript\nexport function greet(): void;\n```\n\n#### wasm-game-of-life/pkg/package.json\n\n这个文件包括了所有生成的文件描述，并使得这个项目能够作为一个使用 WebAssembly 的 NPM 包，能够集成到 JavaScript 工具链并发布至 NPM。\n\n```json\n{\n  \"name\": \"wasm-game-of-life\",\n  \"collaborators\": [\"Your Name <your.email@example.com>\"],\n  \"description\": null,\n  \"version\": \"0.1.0\",\n  \"license\": null,\n  \"repository\": null,\n  \"files\": [\"wasm_game_of_life_bg.wasm\", \"wasm_game_of_life.d.ts\"],\n  \"main\": \"wasm_game_of_life.js\",\n  \"types\": \"wasm_game_of_life.d.ts\"\n}\n```\n\n### 开始加入页面\n\n想要`wasm-game-of-life`能够展示到页面中，需要使用[`create-wasm-app` JavaScript 模板](https://github.com/rustwasm/create-wasm-app)。\n\n在项目根目录执行以下命令：\n\n```shell\nnpm init wasm-app www\n```\n\n这是`wasm-game-of-life/www`文件夹包括的文件。\n\n```\nwasm-game-of-life/www/\n├── bootstrap.js\n├── index.html\n├── index.js\n├── LICENSE-APACHE\n├── LICENSE-MIT\n├── package.json\n├── README.md\n└── webpack.config.js\n```\n\n#### wasm-game-of-life/www/package.json\n\n这个文件包括已经配置好的`webpack`和`webpack-dev-server`依赖，和`hello-wasm-pack`，版本号为已经发布到 NPM 上面的版本号。\n\n#### wasm-game-of-life/www/webpack.conf.js\n\n这个是用来配置 webpack 和开发服务器的文件。该文件已经提前布置好，如果只是开发则无需过多关心这个文件。\n\n#### wasm-game-of-life/www/index.html\n\n这是页面的 HTML 文件，它是来调用`bootstrap.js`的。\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>Hello wasm-pack!</title>\n  </head>\n  <body>\n    <script src=\"./bootstrap.js\"></script>\n  </body>\n</html>\n```\n\n#### wasm-game-of-life/www/index.js\n\n这是 JavaScript 的入口文件，他引入了`hello-wasm-pack`，并带哦用了 greet 函数。\n\n```JavaScript\nimport * as wasm from \"hello-wasm-pack\";\n\nwasm.greet();\n```\n\n#### 安装 NPM 依赖\n\n首先保证已经在`www`文件夹下面执行过`npm i`，这个命令会安装好现有依赖包括 webpack 和开发服务器。\n\n> 注意 webpack 并不是必须的，他只是个打包器并提供了开发服务器，这是我们选择它的原因。Parcel 和 Rollup 一样支持 WebAssembly 模块。你也可以选择[不使用打包器](https://rustwasm.github.io/docs/wasm-bindgen/examples/without-a-bundler.html)。\n\n#### 在 www 文件夹中使用本地 wasm-game-of-life 包\n\n相比于使用 NPM 线上的`hello-wasm-pack`，使用本地文件会提高我们的开发舒适度。\n\n打开`www/package.json`，找到`devDependencies`，在兄弟节点增加`dependencies`字段，并在里面增加`\"wasm-game-of-life\": \"file:../pkg\"`。\n\n```JSON\n{\n  // ...\n  \"dependencies\": {                     // Add this three lines block!\n    \"wasm-game-of-life\": \"file:../pkg\"\n  },\n  \"devDependencies\": {\n    //...\n  }\n}\n```\n\n接下来修改`www/index.js`引入 greet 函数。\n\n```JavaScript\nimport * as wasm from \"wasm-game-of-life\";\n\nwasm.greet();\n```\n\n既然修改了 package.json，则需要重新安装他。\n\n```shell\nnpm install\n```\n\n好了，现在服务器可以成功运行了。\n\n#### 启动本地服务\n\n接下来，打开一个新终端来在后台运行服务器，请在`www`文件夹下执行如下命令。\n\n```shell\nnpm run start\n```\n\n打开http://localhost:8080，应当会弹出如下弹窗。\n\n![弹窗](https://rustwasm.github.io/book/images/game-of-life/hello-world.png)\n\n### 练习\n\n修改 greet 函数，引入参数`name: &str`，重新执行`wasm-pack build`，并刷新页面使得弹窗中能够显示\"Hello, {name}\"。\n\n**_答案，不许看！_**\n\n修改`src/lib.rs`\n\n```Rust\n#[wasm_bindgen]\npub fn greet(name: &str) {\n    alert(&format!(\"Hello, {}!\", name));\n}\n```\n\n再修改 JavaScript 绑定`www/index.js`\n\n```JavaScript\nwasm.greet(\"Your name\");\n```\n\n## Conway 的生命游戏的游戏规则\n\n如果你已经了解[Conway 的生命游戏](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life)，可以跳过这部分。\n\n整个 Conway 的生命游戏是在一个无限的二维的正交格子宇宙中，每一个细胞拥有两种生命状态，生或者死。或者说可增殖或者不可增殖。每一个细胞都和它的 8 个邻居交互，它们分别是纵向的，斜向的，横向的相邻。并且每一步都会发生如下的变化。\n\n1. 任何一个活着的细胞，如果有少于两个邻居就会死亡。\n2. 任何一个活细胞拥有两个或三个活着的邻居，则会继续增殖。\n3. 任何一个活着的细胞拥有三个以上活着的的邻居，则会死亡。\n4. 任何一个死掉的细胞，如果有三个活着的邻居，则会重生。\n\n最初的图案组成了最初的世界。第 1 代是按照以上的规则生成的，每一个细胞的生成和死亡都是同时的。他们的生存和死亡这一个时间我们称之为一刻。用程序的语言来说，这一刻是上一次生成的纯函数。这个规则一直有效。\n\n考虑设置如下的初始宇宙：\n\n![初始宇宙](https://rustwasm.github.io/book/images/game-of-life/initial-universe.png)\n\n我们可以通过考虑每一个细胞来确定下一代。最左上角的细胞已经死亡，第 4 条规则是唯一一个能够处理死亡细胞的规则。所以第 1 排的所有细胞都有相同的规则。他们都没有三个活着的邻居。只能保持死亡。\n\n当我们看到最上面的活着的细胞时，这个游戏开始变得有趣了。在第 2 排第 3 列。对于活着细胞前三个规则都可以应用。对于这一个细胞，他只有一个活着的邻居，所以规则一可用。这个细胞会在下一次争执死亡。下面那几个活着的细胞也是有一样的命运。\n\n中间的活着的细胞，还有两个邻居，上面的和下面的，这就意味着它符合规则二，他可以活到下一次增值。\n\n最后一个比较有趣的例子，就是当我们看到死掉的细胞。嗯。在中间这活着的细胞的左边和右边。这三个活着的细胞都是他们的邻居。这使得他们按照规则是可以在下一轮重生。\n\n将这些规则放在一起，我们可以获得下一刻的世界。\n\n![下一刻的世界](https://rustwasm.github.io/book/images/game-of-life/next-universe.png)\n\n根据这个例子，和确定的规则。不去并精彩的事情将会发生。\n\n![Gosper's glider gun](https://upload.wikimedia.org/wikipedia/commons/e/e5/Gospers_glider_gun.gif)\n\n![Pulsar](https://upload.wikimedia.org/wikipedia/commons/0/07/Game_of_life_pulsar.gif)\n\n![Space ship](https://upload.wikimedia.org/wikipedia/commons/3/37/Game_of_life_animated_LWSS.gif)\n\n### 练习\n\n手动计算出下一刻，宇宙应该是什么样\n\n**_答案，不许看！_**\n\n![下一刻宇宙](https://rustwasm.github.io/book/images/game-of-life/initial-universe.png)\n\n你能找到一个稳定的没有变化的宇宙吗？\n\n**_答案，不许看！_**\n\n这个答案，不许看！其实有无数个，最平凡的答案，不许看！就是它是一个空宇宙。如果是一个 2×2 的方格，也可以形成一个稳定的宇宙。\n\n## 实现 Conway 的生命游戏\n\n### 设计\n\n在开始之前呢，我们要先考虑以下几种设计模式。\n\n#### 无限宇宙\n\n生命游戏是在一个无限宇宙中玩的。但是我们没有无限的内存和计算能力。在这种情况下，我们往往会有三个选项。\n\n1. 始终追踪这个宇宙的发展，并适当的扩展宇宙。这个扩张是无限的，所以这个实现实现了就会逐渐逐渐的变得越来越慢，直到把内存全部用完。\n2. 创建一个固定的宇宙，当细胞碰到宇宙的边缘的时候，将会有更少的邻居。更简单的策略就是当他们已经达到边缘的时候，直接被宇宙剪掉。\n3. 创建一个固定的宇宙，当细胞达到边缘的时候，将会从另外一边滑入这样，我的我们的应用就可以一直跑下去。\n\n我们会按照第 3 个选项来实现。\n\n#### 连接 Rust 和 JavaScript\n\n> 此部分是本人最重要的一节。\n\nJavaScript 的垃圾回收堆内存，是用来调用 Object 和 Array 还有 DOM 结点的。而 Rust 存在的 WebAssembly 线性内存和它是截然不同的。WebAssembly 目前还不能直接操作垃圾回收堆内存（在 2018 年 4 月，一个关于[接口类型（Interface Type）](https://github.com/WebAssembly/interface-types/blob/master/proposals/interface-types/Explainer.md)的提案将会改变这一局面）。JavaScript 却可以读写 WebAssembly 的线性内存，但仅限于 ArrayBuffe 支持的标量（u8, i32, f64 等等）。WebAssembly 行数一样能处理和返回这些标量。以下讲解 WebAssembly 和 JavaScript 如何链接。\n\nwasm_bindgen 定义了如何穿过这段链接计算数据结构的方法。它包括装箱 Rust 结构，并包装指针成为一个 JavaScript 类以供使用，或者提供 JavaScript 对象给 Rust 使用。wasm_bindgen 非常便利，但并不是无需考虑怎样在这个链接上传输数据结构。你应该把它当作一个实现接口的工具。\n\n当设计 WebAssembly 和 JavaScript 的接口时，我们需要考虑到以下内容。\n\n1. **减少复制到和移出 WebAssembly 线性内存中的值**，无效的复制会造成无用的性能损耗。\n2. **最小的序列化和解序列化**，和复制类似，序列化和解序列化一样造成性能损耗，如果想要把数据无副作用地从一端传到另一端，与其说在一端序列化，到另一端解序列化，不如使用 wasm_bindgen 帮助我们将 JavaScript 的 Object 装箱成 Rust 的 structure。\n\n一个结论，处理 JavaScript 和 WebAssembly 接口设计时，经常将大的、生命周期长的数据结构作为 Rust 类型，存储在 WebAssembly 线性内存中，并给 JavaScript 暴露一个处理方法，JavaScript 调用 WebAssembly 转换文件，处理运算，并最终得到一个小的，可复制的结果。通过只返回计算结果，我们可以躲过复制和序列化数据的过程。\n\n#### 在生命游戏中链接 Rust 和 JavaScript\n\n接下来结局几个要规避的问题。我们不想每刻都复制整个宇宙到 WebAssembly 的内存中，我们不想处理宇宙中所有的细胞，也不想在每次读写细胞的时候都穿过 WebAssembly 和 JavaScript 的分界。\n\n这是我们的 4x4 宇宙在内存中的结构。\n\n![4x4宇宙在内存中的结构](https://rustwasm.github.io/docs/book/images/game-of-life/universe.png)\n\n为了寻找细胞在内存中的位置，我们可以使用下面的公式。\n\n```\nindex(row, column, universe) = row * width(universe) + column\n```\n\n我们有很多方法来给 JavaScript 暴露宇宙中的细胞。开始我们要为宇宙实现一个`std::fmt::Display`。我们可以使用一个 Rust 的 String，每个字符代表一个细胞。这个 Rust 的 string 将会从 WebAssembly 的内存中复制到 JavaScript 的内存里，并接下来作为 textContent 展示到 HTML 里面。本节的后面，将会讲到如何把细胞展示到 canvas 中。\n\n> 另一种设计是让 Rust 返回每个细胞的生存状态列表，这样 JavaScript 就不需要在渲染时解析整个宇宙，这不过这个是先更加复杂些。\n\n#### Rust 的实现\n\n上一章，我们复制了初始化模板，我们现在要修改这个模板。\n\n从删除 greet 函数，并定义宇宙中的细胞开始。\n\n```Rust\n#[wasm_bindgen]\n#[repr(u8)]\n#[derive(Clone, Copy, Debug, PartialEq, Eq)]\npub enum Cell {\n    Dead = 0,\n    Alive = 1,\n}\n```\n\n`#[repr(u8)]`很重要，这样每个细胞都会以一个字节存储，另外 Alive 为 1，Dead 为 0 也很重要，这样我们就可以使用加法计算邻居数目。\n\n接下来定义宇宙，一个宇宙包括宽度，高度和一个向量的细胞。\n\n```Rust\n#[wasm_bindgen]\npub struct Universe {\n    width: u32,\n    height: u32,\n    cells: Vec<Cell>,\n}\n```\n\n访问并转换细胞的实现如下。\n\n```Rust\nimpl Univers {\n    fn get_index(&self, row: u32, column: u32) -> usize {\n        (row*self.width + column) as usize\n    }\n}\n```\n\n为了计算细胞接下来的状态，我们要统计某个细胞有多少个邻居存活。\n\n```Rust\nimpl Univers {\n    fn live_neighbor_count(&self, row: u32, column: u32) -> u8 {\n        let mut count = 0;\n        for delta_row in [self.height - 1, 0, 1].iter().cloned() {\n            for delta_col in [self.width - 1, 0, 1].iter().cloned() {\n                if delta_row == 0 && delta_col ==0 {\n                    continue;\n                }\n\n                let neighbor_row = (row + delta_row) % self.height;\n                let neighbor_col = (column + delta_col) % self.width;\n                let idx = self.get_index(neighbor_row, neighbor_col);\n                count += self.cells[idx] as u8\n            }\n        }\n        count\n    }\n}\n```\n\n这个函数使用取余处理边界问题。现在我们已经有所有的必须函数了，最后只需要生成下一刻的状态即可（记住，每个函数必须在`#[wasm_bindgen]`属性之下，这样 JavaScript 才能接到暴露的函数）。\n\n```Rust\n#[wasm_bindgen]\nimpl Universe {\n    pub fn tick(&mut self) {\n        let mut next = self.cells.clone();\n\n        for row in 0..self.height {\n            for col in 0..self.width {\n                let idx = self.get_index(row, col);\n                let cell = self.cells[idx];\n                let live_neighbors = self.live_neighbor_count(row, col);\n\n                let next_cell = match (cell, live_neighbors) {\n                    (Cell::Alive, x) if x < 2 => Cell::Dead,\n                    (Cell::Alive, 2) | (Cell::Alive, 3) => Cell::Alive,\n                    (Cell::Alive, x) if x > 3 => Cell::Dead,\n                    (Cell::Dead, 3) => Cell::Alive,\n                    (otherwise, _) => oterwise,\n                };\n\n                next[idx] = next_cell;\n            }\n        }\n        self.cells = next;\n    }\n}\n```\n\n目前为止，一个宇宙的状态就都被存储在 cell 这个向量里面了。为了提高它的可读性，让我们实现一个文本渲染器，目的是将整个宇宙按行输出为文字，每一个活着的细胞标注为 Unicode 符号“■”，死掉的细胞则为“□”。\n\n通过实现 Rust 标准库中的`Display`trait，我们可以将数据结构以一种用户交互方式输出，它也提供了一个`to_string`方法。\n\n```Rust\nuse std::fmt;\n\nimpl fmt::Display for Universe {\n  fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n    for line in self.cells.as_slice().chunks(self.width as usize) {\n      for &cell in line {\n        let symbol = if cell == Cell::Dead {\"□\"} else {\"■\"};\n        write!(f, \"\\n\")?;\n      }\n    }\n\n    Ok(())\n  }\n}\n```\n\n最后，我们定义一个构造器去初始化一个有趣的图案和一个渲染函数。\n\n```Rust\n#[wasm_bindgen]\nimpl Universe {\n  pub fn new() -> {\n    let width = 64;\n    let height = 64;\n\n    let cells = (0..width * height)\n      .map(|i| {\n        if i%2 == 0 || i%7 == 0 {\n          Cell::Alive\n        } else {\n          Cell::Dead\n        }\n      }).collect();\n\n    Universe {\n      width,\n      height,\n      cells,\n    }\n  }\n\n  pub fn render(&self) -> String {\n    self.to_string()\n  }\n}\n```\n\n以上，Rust 部分已经完工。\n\n#### 使用 JavaScript 渲染\n\n首先在 HTML 中插入<pre>标签用来展示整个宇宙。\n\n```html\n<body>\n  <pre id=\"game-of-life-canvas\"></pre>\n  <script src=\"./bootstrap.js\"></script>\n</body>\n```\n\n另外我们希望<pre>标签能处于页面中央。我们可以通过 CSS flex box 实现这个任务，在 html 中增加<style>标签。\n\n```css\nbody {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n```\n\n修改 JavaScript 入口文件，将原来引入的 greet 函数改为 Universe。\n\n```JavaScript\nimport { Universe } from \"wasm-game-of-life\";\n```\n\n让我们在那个<pre>标签中增加新的宇宙实例吧。\n\n```JavaScript\nconst pre = document.getElementById(\"game-of-life-canvas\");\nconst universe = Universe.new();\n```\n\n使用 JavaScript 创建一个 requestAnimationFrame 循环，每一次循环，就在<pre>标签中绘制一遍宇宙，并执行一次`Universe::tick`。\n\n```JavaScript\nfunction renderLoop() {\n  pre.textContent = universe.render();\n  universe.tick();\n\n  requestAnimationFrame(renderLoop);\n}\n```\n\n想要实现渲染，只需执行`requestAnimationFrame(renderLoop)`。\n\n确保你的本地服务任然在运行，此时你的页面应该如下所示。\n\n![浏览器页面](https://rustwasm.github.io/book/images/game-of-life/initial-game-of-life-pre.png)\n\n#### 渲染到 Canvas 上\n\n在 Rust 中生成字符串并通过 wasm-bindgen 拷贝到 JavaScript 中做了很多无关的复制。既然 JavaScript 已经知道宇宙的长度和宽度，而且 JavaScript 本来可以直接读 WebAssembly 的内存，我们将要修改 render 方法，直接返回细胞向量的指针。\n\n同时，与其渲染 Unicode 字符，不如开始用 Canvas API。接下来我们会开始设计这些。\n\n在 html 中，修改<pre>为<canvas>。\n\n```html\n<body>\n  <canvas id=\"game-of-life-canvas\"></canvas>\n  <script src=\"./bootstrap.js\"></script>\n</body>\n```\n\n为了能拿到 Rust 中的相关数据结构，我们需要为宇宙增加 getter 函数，暴露宇宙的宽度、高度和细胞的向量。增加如下函数。\n\n```Rust\n#[wasm_bindgen]\nimpl Universe {\n  pub fn width(&self) -> u32 {\n    self.width\n  }\n\n  pub fn height(&self) -> u32 {\n    self.height\n  }\n\n  pub fn cells(&self) -> *const Cell {\n    self.cells.as_ptr()\n  }\n}\n```\n\n接下来，在 JavaScript 中，引入 Cell，并设置几个渲染画布的常量。\n\n```JavaScript\nimport { Universe, Cell } from \"wasm-game-of-life\";\n\nconst CELL_SIZE = 5;\nconst GRID_COLOR = \"#CCCCCC\";\nconst DEAD_COLOR = \"#FFFFFF\";\nconst LIVE_COLOR = \"#000000\";\n```\n\n接下来修改实现 canvas 的部分。\n\n```JavaScript\nconst universe = Universe.new();\nconst width = universe.width();\nconst height = universe.height();\n\nconst canvas = documnet.getElementById(\"game-of-life-canvas\");\ncanvas.height = (CELL_SIZE+1)*height + 1;\ncanvas.width = (CELL_SIZE+1)*width + 1;\n\nconst ctx = canvas.getContext(\"2d\");\n\nfunction renderLoop() {\n  universe.tick();\n\n  drawGrid();\n  drawCells();\n\n  requestAnimationFrame(renderLoop);\n}\n```\n\n世界的网格，是一系列等宽的竖线和横线。\n\n```JavaScript\nfunction drawGrid() {\n  ctx.beginPath();\n  ctx.strokeStyle = GRID_COLOR;\n\n  for(let i =0; i <= width; i+=1) {\n    ctx.moveTo(i*(CELL_SIZE+1) + 1, 0);\n    ctx.lineTo(i*(CELL_SIZE+1) + 1, (CELL_SIZE+1)*height+1);\n  }\n\n  for(let i=0; i<=height; j++) {\n    ctx.moveTo(0, i*(CELL_SIZE+1)+1);\n    ctx.lineTo((CELL_SIZE+1)*width+1, i*(CELL_SIZE+1)+1);\n  }\n\n  ctx.stroke();\n}\n```\n\n我们可以直接访问 WebAssembly 的内存，他是直接定义在`wasm_game_of_life_bg`。为了画细胞，我们先找到一个细胞的指针，并将它们转换成 Unit8Array，迭代这些细胞，并按照他们的生命状态绘制白色和黑色方块。计量避免复制所有细胞。\n\n```JavaScript\nimport { memory } from \"wasm-game-of-life/wasm_game_of_life_bg\";\n\nfunction getIndex(row, column) {\n  return row*width+column;\n}\n\nfunction drawCells() {\n  const cellsPtr = universe.cells();\n  const cells = new Unit8Array(\n    memory.buffer,\n    cellPtr,\n    width*height,\n  );\n\n  ctx.beginPath();\n\n  for(let row=0; row<height; row+=1) {\n    for (let col=0; col<width; col+=1) {\n      const idx = getIndex(row, col);\n\n      ctx.fillStyle = cells[idx] === CellDead\n        ? DEAD_COLOR\n        : LIVE_COLOR;\n\n      ctx.fillRect(\n        cell*(CELL_SIZE+1) + 1,\n        row*(CELL_SIZE+1) + 1,\n        CELL_SIZE,\n        CELL_SIZE,\n      );\n    }\n  }\n\n  ctx.stroke();\n}\n```\n\n开始渲染，需要添加以下表达式。\n\n```JavaScript\ndrawGrid();\ndrawCells();\nrequestAnimationFrame(renderLoop);\n```\n\n注意 drawGrid 和 drawCell 必须要在 requestAnimationFrame 之前执行。\n\n#### 成功了！\n\n重建 WebAssembly 绑定。\n\n```shell\nwasm-pack build\n```\n\n确定开发服务器还在运行，如果不是，需要执行以下命令。\n\n```shell\nnpm run start\n```\n\n刷新`http://localhost:8080/`，你应该能看到如下结果。\n\n![页面](https://rustwasm.github.io/docs/book/images/game-of-life/initial-game-of-life.png)\n\n结束之前，这里还有一个不错的实现生命游戏的算法，[hashlife](https://en.wikipedia.org/wiki/Hashlife)。它使用缓存，使得程序有指数级性能提升！但是为什么我们不实现它呢？它已经超出本文涉及的范围了，本文只是专注于 Rust 和 WebAssembly 集成，但是我们强烈期望你能实现这一算法。\n\n### 练习\n\n#### 实现一台宇宙飞船\n\n#### 生成一个随机的初始环境，每个细胞有 50%的生存可能\n\n**_答案，不许看！_**\n\n先增加 js-sys 依赖\n\n```toml\n[dependencies]\njs-sys=\"0.3\"\n```\n\n接下来使用 js 的随机函数\n\n```Rust\nextern crate js_sys;\n\nif js_sys::Math::random() < 0.5 {\n\n} else {\n\n}\n```\n\n#### 以 bit 形式存储每个 cell\n\n**_答案，不许看！_**\n\n在 Rust 中，使用 fixedbitset 代替`Vec<Cell>`;\n\n```Rust\nextern crate fixedbitset;\nuse fixedbitset::FixedBitSet;\n\n#[wasm_bindgen]\npub struct Universe {\n  width: u32,\n  height: u32,\n  cells: FixedBitSet,\n}\n```\n\n宇宙的构造器应该这么修改。\n\n```Rust\npub fn new() -> Universe {\n  let width = 64;\n  let height = 64;\n\n  let size = (width*height) as usize;\n  let mut cells = FixedBitSet::with_capacity(size);\n\n  for i in 0..size {\n    cells.set(i, i%2==0 || i%7==0);\n  }\n\n  Universe {\n    width,\n    height,\n    cells,\n  }\n}\n```\n\n使用 FixedBitSet 的 set 方法更新宇宙的下一刻。\n\n```Rust\nnext.set(idx, match (cell, live_neighbors) {\n  (true, x) if x<2 => false,\n  (true, 2) | (true, 3) => true,\n  (true, x) if x>3 => false,\n  (false, 3) => true,\n  (otherwise, _) => otherwise\n});\n```\n\n传输指针的时候，需要返回 slice。\n\n```Rust\n#[wasm_bindgen]\nimpl Universe {\n  pub fn cells(&self) -> *const u32 {\n    self.cells.as_slice().as_ptr()\n  }\n}\n```\n\n在 JavaScript 中，构造 Unit8Array 的时候需要除以 8，以为我们是以 bit 存储细胞的。\n\n```JavaScript\nconst cells = new Unit8Array(\n  memory.buffer,\n  cellsPtr,\n  width*height/8\n);\n```\n\n通过判断 Unit8Array 是否被赋值而判断细胞是否是活着的。\n\n```JavaScript\nfunction bitIsSet(n, arr) {\n  const byte = Math.floor(n/8);\n  const mask = 1<<(n%8);\n  return (arr[byte] & mask) == mask;\n}\n```\n\n根据以上变化，新版本的 drawCells 如下。\n\n```JavaScript\nfunction drawCells() {\n  const cellsPtr = universe.cells();\n  const cells = new Unit8Array(\n    memory.buffer,\n    cellsPtr,\n    width*height/8\n  );\n\n  ctx.beginPath();\n\n  for (let row=0; row<height; row+=1) {\n    for(let col=0; col<width; col+=1) {\n      const idx = getIndex(row, col);\n\n      ctx.fillStyle = bitIsSet(idex, cells)\n        ? LIVE_COLOR\n        : DEAD_COLOR;\n\n      ctx.fillRect(\n        col*(CELL_SIZE+1)+1,\n        row*(CELL_SIZE+1)+1,\n        CELL_SIZE,\n        CELL_SIZE,\n      );\n    }\n  }\n\n  ctx.stroke();\n}\n```\n\n## 测试\n\n现在我们已经实现了 Rust 的实现，并成功渲染在浏览器中。现在来谈谈测试 WebAssembly 中的 Rust 函数。\n\n我们将要测试 tick 函数，确保它能返回正确的值。\n\n接下来，我们将处理 Universe 的 setter 函数，让我们能构造不同大小的 universe。\n\n```Rust\n#[wasm_bindgen]\nimpl Universe {\n  pub fn set_width(&mut self, width: u32) {\n    self.width = width;\n    self.cells = (0..width * self.height).map(|_| Cell::Dead).collect()\n  }\n\n  pub fn set_height(&mut self, height: u32) {\n    self.height = height;\n    self.cells = (0..self.width * height).map(|_| Cell::Dead).collect()\n  }\n}\n```\n\n我们将会创建另一个不需要`#[wasm_bindgen]`的`impl Universe`实现，因为我们不能把所有的 WebAssembly 函数暴露给 JavaScript，Rust 生成的 WebAssembly 函数是不能返回引用的。可以尝试让 Rust 返回一个引用，查看一下编译结果中是什么错误。\n\n接下来我们要写一个 get_cells 来获得细胞，和一个 set_cells 来设置哪些细胞是活的，哪些是死的。\n\n```Rust\nimpl Universe {\n  pub fn get_cells(&self) -> &[Cell] {\n    &self.cells\n  }\n\n  pub fn set_cells(&mut self, cells: &[(u32, u32)]) {\n    for (row, col) in cells.iter().cloned() {\n      let idx = self.get_index(row, col);\n      self.cells[idx] = Cell::Alive;\n    }\n  }\n}\n```\n\n现在我们将创建测试文件`tests/web.rs`。\n\n在这之前，测试环境已经配置好，请确定`wasm-pack test --chrome --headless`能够在根目录下运行。你也可以使用`--firefox`，`--safari`和`--node`选项来在其他浏览器测试你的代码。\n\n在`test/web.rs`中，我们需要到处 Universe 类型。\n\n```Rust\nextern crate wasm_game_of_life;\nuse wasm_game_of_life:Universe;\n```\n\n在测试文件中，我们要创建一个飞船构造函数。\n\n我们要构造一个 tick 函数执行之前的飞船，和一个 tick 函数执行后的期望值。\n\n```Rust\n#[cfg(test)]\npub fn input_spaceship() -> Universe {\n  let mut universe = Universe::new();\n\n  universe.set_width(6);\n  universe_set_height(6);\n  universe_set_cells(\n    &[\n      (1,2),\n      (2,3),\n      (3,1), (3,2),(3,3)\n    ]\n  );\n\n  universe\n}\n\n#[cfg(test)]\npub fn expected_spaceship() -> Universe {\n  let mut universe = Universe::new();\n\n  universe.set_width(6);\n  universe_set_height(6);\n  universe_set_cells(\n    &[\n      (2,1), (2,3),\n      (3,2), (3,3),(4,2)\n    ]\n  );\n\n  universe\n}\n```\n\n现在我们写一个 test_tick 函数，创建以上的两个飞船。最后使用`assert_eq!`宏比较 expected_ship 来确保 tick 函数运行正确。我们添加`#[wasm_bindgen_test]`属性保证这个函数可以在 WebAssembly 环境下测试。\n\n```Rust\n#[wasm_bindgen_test]\npub fn test_tick() {\n  let mut input_universe = input_spaceship();\n  let expected_universe = expected_spaceship();\n\n  input_universe.tick();\n  assert_eq!(\n    &input_universe.get_cells(),\n    &expected_universe.get_cells(),\n  )\n}\n```\n\n测试这个测试函数使用`wasm-pack test --firefox --headless`。\n\n## 调试\n\n写这么多代码之前（虽然上面都写完了，我也不知道原作者抽什么风），先看一看 Rust 的调试工具。\n\n### 调试工具\n\n此部分将会介绍 WebAssembly 的调试工具。\n\n#### 使用 debug 标记编译\n\n如果没有打开 debug 标记，\"name\"这个部分就不会被编译到二进制程序中，错误栈也不会显示函数名，你会收到`wasm-functions[42]`而不是`wasm_game_of_file::Universe::live_neighbor_count`。\n\n调试编译，`wasm-pack build --debug`或者`cargo build`总是会默认打开 debug 标记。\n\n版本编译（release build），debug 标记是默认关闭的，要打开 debug 标记，需要声明`debug=true`。\n\n```toml\n[profile.release]\ndebug = true\n```\n\n#### 使用 console API 打印日志\n\n打印日志是最好的判断程序是否是有错的方式。在浏览器中，`console.log`函数可以将日志打印到浏览器的 dev 工具里。\n\n我们可以使用 web-sys 包去调用 console API。\n\n```Rust\nextern crate web_sys;\n\nweb_sys::console::log_1(&\"Hello, world!\".into());\n```\n\n相应的`console.error`函数用法一致，但是浏览器的调用栈还是按照`console.error`来打印。\n\n使用`console.log`：\n\n- [`web_sys::console::log`，接受一个向量的数据做参数](https://rustwasm.github.io/wasm-bindgen/api/web_sys/console/fn.log.html)。\n- [`web_sys::console::log_1`，接受一个数据做参数](https://rustwasm.github.io/wasm-bindgen/api/web_sys/console/fn.log_1.html)。\n- [`web_sys::console::log_2`，接受两个数据做参数](https://rustwasm.github.io/wasm-bindgen/api/web_sys/console/fn.log_2.html)。\n- ...\n\n使用`console.error`：\n\n- [`web_sys::console::error`，接受一个向量的数据做参数](https://rustwasm.github.io/wasm-bindgen/api/web_sys/console/fn.error.html)。\n- [`web_sys::console::error_1`，接受一个数据做参数](https://rustwasm.github.io/wasm-bindgen/api/web_sys/console/fn.error_1.html)。\n- [`web_sys::console::error_2`，接受两个数据做参数](https://rustwasm.github.io/wasm-bindgen/api/web_sys/console/fn.error_2.html)。\n- ...\n\n#### 打印崩溃日志\n\n[`console_error_panic_hook`包能通过`console.error`打印崩溃日志](https://github.com/rustwasm/console_error_panic_hook)。他能打印出格式化的崩溃信息而不是难以理解的`RuntimeError: unreachable executed`。\n\n你只需要增加调用这个钩子函数。\n\n```Rust\n#[wasm_bindgen]\npub fn init_panic_hook() {\n  console_error_panic_hook::set_once();\n}\n```\n\n#### 使用调试器\n\n不幸的，WebAssembly 的调试器依然不成熟，在很多 unix 系统中，DWARF 是用来解析调试程序需要的数据的工具。虽然，Windows 上面也有一个类似的工具。但还没有相当的工具提供给 WebAssembly。所以，调试器目前能给予的功能有限，我们只能收到 WebAssembly 的错误而不是 Rust 源代码的错误。\n\n> 这里有一个故事是[跟踪 WebAssembly 的调试](https://github.com/WebAssembly/debugging)的，我们希望它将来会有所改善！\n\n尽管如此，调试器还是能够给调试 JavaScript 方面提供效力。\n\n#### 一开始就规避在 WebAssembly 上面使用调试\n\n如果错误和交互 JavaScript 和 Web API 有关，则使用`wasm-bindgen-test`写测试。\n\n如果和 JavaScript 和 Web API 无关，这是用默认的`#[test]`属性。使用[`quickcheck`包](https://crates.io/crates/quickcheck)可以减少写测试上面的时间。\n\n为了避免`#[test]`编译器出现连接错误，你需要一个 rlib 依赖，在`Cargo.toml`文件按照如下修改。\n\n```toml\n[lib]\ncrate-type [\"cdylib\", \"rlib\"]\n```\n\n### 在生命游戏中打开崩溃日志\n\n如果程序崩溃，最好是能够在审查工具中看到日志。\n\n在``src/utils.rs`里面有一个可选的 console_error_panic_hook 包，可以在 Universe 初始化的时候调用它。\n\n```Rust\npub fn new() -> Universe {\n  utils::set_panic_hook();\n}\n```\n\n### 为生命游戏增加日志\n\n让我们在 Rust 中利用 web-sys 调用 console，打印出每一刻的细胞状态。\n\n首先在以来中增加 web-sys，修改 Cargo.toml。\n\n```toml\n[dependencies.web-sys]\nversion = \"0.3\"\nfeatures = [\n  \"console\",\n]\n```\n\n为了高效，我们把`console.log`函数封装到`println!`一样的宏中。\n\n```Rust\nextern crate web_sys;\n\nmacro_rules! log {\n  ($( $t:tt )*) => {\n    web_sys::console::log_1(&format!( $( $t )* ).into());\n  }\n}\n```\n\n现在可以通过调用 log 发送日志了。\n\n```Rust\nlog!(\n  \"cell[{}, {}] is initially {:?} and has {} live neighbors\",\n  row,\n  col,\n  cell,\n  live_neighbors,\n)\n```\n\n### 使用调试器\n\n浏览器的调试器在调试 JavaScript 和 Rust 生成的 WebAssembly 很有效。\n\n举个例子，在 renderLoop 函数中增加`debugger;`可以暂停页面执行的某一刻。\n\n者给予我们查看每一刻细胞状态的能力。\n\n![调试画面](https://rustwasm.github.io/docs/book/images/game-of-life/debugging.png)\n\n### 练习\n\n1. 给 tick 方法增加 log，查看细胞状态。\n2. 加入`panic!()`查看打印出来的崩溃日志。\n\n## 增加交互\n\n接下来我们要给这个游戏增加一些交互，我们会允许用户选择细胞的生死，并且允许暂停游戏，并使绘制初始图案更加简单。\n\n### 暂停和继续游戏\n\n首先修改 html，在画布上面增加一个<button>标签。\n\n```html\n<button id=\"play-pause\"></button>\n```\n\n在 JavaScript 中，我们要做以下几点改动。\n\n- 追踪调用 requestAnimationFrame 的标识符，这样我们就能通过调用 cancelAnimationFrame 来终止动画。\n- 当点击播放或者暂停键的时候，先检查标识符是否存在，一旦存在，则表示动画正在运行，我们需要取消动画以保证 renderLoop 不再被调用。如果标识符不存在，我们需要调用 requestAnimationFrame 以保证动画继续运行。\n\n因为是 JavaScript 控制着 Rust 和 WebAssembly，我们不需要修改 Rust 部分。\n\n我们引入 animationId 变量，保存 requestAnimationFrame 的结果。当没有排队的动画时，这个变量值为 null。\n\n```JavaScript\nlet animationId = null;\n\nfunction renderLoop() {\n  drawGrid();\n  drawCells();\n\n  universe.tick();\n\n  animationId = requestAnimationFrame(renderLoop);\n}\n```\n\n任何一个时间，我们可以通过判断 animationId 来判断这个动画是否被暂停。\n\n```JavaScript\nfunction isPaused() {\n  return animationId === null;\n}\n```\n\n现在，当播放暂停键被点击，当正在播放时，暂停动画。并把按钮的状态改为播放。\n\n```JavaScript\nconst playPauseButton = document.getElementById(\"play-pause\");\n\nfunction play() {\n  playPauseButton.textContent = \"⏸\";\n  renderLoop();\n};\n\nfunction pause() {\n  playPauseButton.textContent = \"▶\";\n  cancelAnimationFrame(animationId);\n  animationId = null;\n};\n\nplayPauseButton.addEventListener(\"click\", function playBtnListener(event) {\n  if (isPaused()) {\n    play();\n  } else {\n    pause();\n  }\n});\n```\n\n最后我们把之前的 requestAnimationFrame 函数封装成`play()`。刷新本地服务器，可以看到网页上已经有暂停按钮了。尝试点击一下它吧。\n\n### 修改一个细胞的状态\n\n现在我们能暂停这个游戏了，是时候增加一个修改细胞的功能了。\n\n想控制细胞的生死，需要给`src/lib.rs`下的 Cell 增加一个 toggle 函数。\n\n```Rust\nimpl Cell {\n    fn toggle(&mut self) {\n        *self = match *self {\n            Cell::Dead => Cell::Alive,\n            Cell::Alive => Cell::Dead,\n        };\n    }\n}\n```\n\n想要修改在宇宙中的细胞需要获得细胞的行纵值，并转换为细胞的序号。\n\n```Rust\n#[wasm_bindgen]\nimpl Universe {\n    pub fn toggle_cell(&mut self, row: u32, column: u32) {\n        let idx = self.get_index(row, column);\n        self.cells[idx].toggle();\n    }\n}\n```\n\n这个方法增加第 1 行的属性声明是为了能够在 JavaScript 环境里面直接调用。在 JavaScript 文件中，监听<canvas>标签，将页面上的点击事件转换成画布上的点击事件，并调用 toggle_cell 方法重绘场景。\n\n```Rust\ncanvas.addEventListener(\"click\", function canvasClickListener(event) {\n  const boundingRect = canvas.getBoundingClientRect();\n\n  const scaleX = canvas.width / boundingRect.width;\n  const scaleY = canvas.height / boundingRect.height;\n\n  const canvasLeft = (event.clientX - boundingRect.left) * scaleX;\n  const canvasTop = (event.clientY - boundingRect.top) * scaleY;\n\n  const row = Math.min(Math.floor(canvasTop/(CELL_SIZE + 1)), height - 1);\n  const col = Math.min(Math.floor(canvasLeft/(CELL_SIZE + 1)), width - 1);\n\n  universe.toggle_cell(row, col);\n\n  drawGrid();\n  drawCells();\n});\n```\n\n使用`wasm-pack build`重新编译，刷新网页，并更新细胞状态。\n\n### 练习\n\n- 新建一个<input>标签来处理每帧更新多少个刻。\n- 增加一个重置按钮，把宇宙恢复到初始状态；再增加一个消灭按钮，毁灭所有细胞。\n- 当使用`Ctrl+Click`的时候，增加一个[glider](<https://en.wikipedia.org/wiki/Glider_(Conway%27s_Life)>)，使用`Shift+Click`增加一个 pulsar。\n\n## 性能日志(Time Profiling)\n\n本节我们将会提高这个游戏的性能，我们将会用 time profiling 来完成。\n\n### Time Profiling\n\n此部分将会讲解如何获得页面的性能分析，目标是提高 JavaScript 和 WebAssembly 之间的吞吐。\n\n> 永远使用`wasm-pack build`编译最新的代码，以确定你的优化正确。\n\n#### windows.performance.now()\n\n这个函数会返回以毫秒为单位的时间戳来计算页面加载速度。\n\n调用`performance.now()`的性能损耗低，所以我们可以利用它创造一个简单的测算工具而不是产生很大误差值。\n\n我们可以通过`web-sys`调用时间函数。\n\n```Rust\nextern crate web_sys;\n\nfn now() -> f64 {\n  web_sys::window()\n    .expect(\"should have window\")\n    .performance()\n    .expect(\"should have a Performance\")\n    .now()\n}\n```\n\n#### 开发者工具的性能查看器\n\n所有的浏览器的开发者工具都有性能查看器。这个查看器通过火焰图展示函数调用栈来表示哪一个函数耗时更长。\n\n如果你编译的时候打开了调试，则函数名将会显示在这里（如果没打开则显示一个不透明的名字，比如`wasm-function[123]`）。\n\n注意，因为性能查看器不会显示内联函数，又因为 Rust 和 LVVM 很重地依赖于内联函数，其结果就会让人感到头疼。\n\n![性能查看器无法处理内联函数](https://rustwasm.github.io/docs/book/images/game-of-life/profiler-with-rust-names.png)\n\n#### console.time 和 console.timeEnd\n\n这两个函数是浏览器的内置函数。以调用`console.time(\"foo\")`作为开始，以`console.time(\"foo\")`作为结束，参数是可选的。\n\n你可以通过 web-sys 调用`web_sys::console::time_with_label(\"foo\")`和`web_sys::console::time_end_with_label(\"foo\")`。\n\n如下是浏览器的截图。\n\n![使用console.time的截图](https://rustwasm.github.io/docs/book/images/game-of-life/console-time.png)\n\n另外，`console.time`和`console.timeEnd`会调用性能检查器统计出瀑布图。\n\n#### 使用#[bench]调用原生代码\n\n就像我们能使用原生的测试方法`#[test]`来测试代码，我们可以使用`#[bench]`通过操作系统的工具来查看函数性能。\n\n写好标准函数并放到`benches`文件夹下。确保`crate-type`已经引入 rlib，能使测试代码能够链接。\n\n无论如何，先搞明白你知道 WebAssembly 里面的瓶颈之后再花费精力去调查原生的性能调查器！用你的浏览器的性能调查器，或者使用这些时间去优化你的代码不是更好？\n\n### 利用 window.performance.now 创建一个计时器\n\n创建一个 FPS 的计时器用来调查游戏的渲染速度不失为一个好办法。\n\n我们在 JavaScript 增加 fps 对象。\n\n```JavaScript\nconst fps = new class {\n  constructor() {\n    this.fps = document.getElementById(\"fps\");\n    this.frames = [];\n    this.lastFrameTimeStamp = performance.now();\n  }\n\n  render() {\n    // Convert the delta time since the last frame render into a measure\n    // of frames per second.\n    const now = performance.now();\n    const delta = now - this.lastFrameTimeStamp;\n    this.lastFrameTimeStamp = now;\n    const fps = 1 / delta * 1000;\n\n    // Save only the latest 100 timings.\n    this.frames.push(fps);\n    if (this.frames.length > 100) {\n      this.frames.shift();\n    }\n\n    // Find the max, min, and mean of our 100 latest timings.\n    let min = Infinity;\n    let max = -Infinity;\n    let sum = 0;\n    for (let i = 0; i < this.frames.length; i++) {\n      sum += this.frames[i];\n      min = Math.min(this.frames[i], min);\n      max = Math.max(this.frames[i], max);\n    }\n    let mean = sum / this.frames.length;\n\n    // Render the statistics.\n    this.fps.textContent = `\nFrames per Second:\n         latest = ${Math.round(fps)}\navg of last 100 = ${Math.round(mean)}\nmin of last 100 = ${Math.round(min)}\nmax of last 100 = ${Math.round(max)}\n`.trim();\n  }\n};\n```\n\n接下来再每次迭代中调用 fps render 函数。\n\n```JavaScript\nconst renderLoop = () => {\n    fps.render(); //new\n\n    universe.tick();\n    drawGrid();\n    drawCells();\n\n    animationId = requestAnimationFrame(renderLoop);\n};\n```\n\n最后在 HTML 中增加 fps 的展示。\n\n```JavaScript\n<div id=\"fps\"></div>\n```\n\n增加 CSS，让它展示得更好。\n\n```CSS\n#fps {\n  white-space: pre;\n  font-family: monospace;\n}\n```\n\n好了，现在可以在页面上看到 FPS 计数器了。\n\n### 给每一刻计算时间\n\n每一刻开始调用`console.time`，结束的时候调用`console.timeEnd`。\n\n首先，要在`Cargo.toml`里面增加 web-sys。\n\n```toml\n[dependencies.web-sys]\nversion = \"0.3\"\nfeatures = [\n  \"console\",\n]\n```\n\n因为每次执行`console.time`后总要执行`console.timeEnd`，把他们包再[RAII](https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization)类型下就会更加便利。\n\n```Rust\nextern crate web_sys;\nuse web_sys::console;\n\npub struct Timer<'a> {\n    name: &'a str,\n}\n\nimpl<'a> Timer<'a> {\n    pub fn new(name: &'a str) -> Timer<'a> {\n        console::time_with_label(name);\n        Timer { name }\n    }\n}\n\nimpl<'a> Drop for Timer<'a> {\n    fn drop(&mut self) {\n        console::time_end_with_label(self.name);\n    }\n}\n```\n\n接下来，统计每一刻用的时间是多久，只需把初始化 Timer 放到 Universe 的构造函数里。\n\n```Rust\nlet _timer = Timer::new(\"Universe::tick\");\n```\n\n如下是每一刻执行的时间。\n\n![每一刻的执行时间](https://rustwasm.github.io/book/images/game-of-life/console-time.png)\n\n另外，通过使用`console.time`和`console.timeEnd`也能获得执行性能数据。\n\n![性能数据](https://rustwasm.github.io/book/images/game-of-life/console-time-in-profiler.png)\n\n### 增加宇宙大小\n\n> 本部分是拿火狐浏览器做例子，当然还有很多浏览器有类似的功能，只是有细微的差别。这个数据是一致的，但是部分命名和标量可能不一样。\n\n如果我们把宇宙修改的大一些，会发生什么？把 64x64 改成 128x128，结果会把 fps 从 60 降到 40。\n\n如果我们打开性能监控器，并看到它的瀑布图，我们可以看到动画帧用了 20 毫秒，回顾 60fps 时渲染一页则需要 16 毫秒，这不仅仅是 JavaScript 和 WebAssembly，还包括重绘的部分。\n\n![性能监视](https://rustwasm.github.io/book/images/game-of-life/drawCells-before-waterfall.png)\n\n如果仔细查看，可以看到`CanvasRenderingContext2D.fillStyle`的 setter 是很耗费时间的。\n\n> 再火狐，你可能看到的是\"DOM\"而不是\"CanvasRenderingContext2D.fillStyle\"，你需要打开\"展示 Gecko 平台数据\"。\n\n![火狐的性能监视器](https://rustwasm.github.io/book/images/game-of-life/profiler-firefox-show-gecko-platform.png)\n\n当然，这并不稀奇，40%的的时间都浪费在这个 setter 上面。\n\n> 我们可能期望性能瓶颈再 tik 函数上，但并不是。永远选择性能监视器观察，因为你可能浪费很多时间在无关的地方上面。\n\n在 drawCell 上面，fillStyle 在每次动画和每个细胞上面使用。\n\n```JavaScript\nfor (let row = 0; row < height; row++) {\n  for (let col = 0; col < width; col++) {\n    const idx = getIndex(row, col);\n\n    ctx.fillStyle = cells[idx] === DEAD\n      ? DEAD_COLOR\n      : ALIVE_COLOR;\n\n    ctx.fillRect(\n      col * (CELL_SIZE + 1) + 1,\n      row * (CELL_SIZE + 1) + 1,\n      CELL_SIZE,\n      CELL_SIZE\n    );\n  }\n}\n```\n\n现在我们知道 fillStyle 资源耗费比较多，那么我们该怎么避免他呢？我们需要判断细胞的生命状态来自决定 fillStyle 的值，设想，如果先设定`fillStyle = ALIVE_COLOR`，再绘制所有的活着的细胞，然后设置`fillStyle = DEAD_COLOR`，再设置所有的死细胞，最后我们只设置 fillStyle 两次。\n\n```JavaScript\n// Alive cells.\nctx.fillStyle = ALIVE_COLOR;\nfor (let row = 0; row < height; row++) {\n  for (let col = 0; col < width; col++) {\n    const idx = getIndex(row, col);\n    if (cells[idx] !== Cell.Alive) {\n      continue;\n    }\n\n    ctx.fillRect(\n      col * (CELL_SIZE + 1) + 1,\n      row * (CELL_SIZE + 1) + 1,\n      CELL_SIZE,\n      CELL_SIZE\n    );\n  }\n}\n\n// Dead cells.\nctx.fillStyle = DEAD_COLOR;\nfor (let row = 0; row < height; row++) {\n  for (let col = 0; col < width; col++) {\n    const idx = getIndex(row, col);\n    if (cells[idx] !== Cell.Dead) {\n      continue;\n    }\n\n    ctx.fillRect(\n      col * (CELL_SIZE + 1) + 1,\n      row * (CELL_SIZE + 1) + 1,\n      CELL_SIZE,\n      CELL_SIZE\n    );\n  }\n}\n```\n\n修改之后，刷新页面，此时的 fps 已经上升到 60。\n\n如果重新看原来的数据，现在每一刻只使用 10 毫秒。\n\n![更新后的性能检查](https://rustwasm.github.io/book/images/game-of-life/drawCells-after-waterfall.png)\n\n消除了 fillStyle 的性能瓶颈，发现比较消耗资源的是 fillRect，用来绘制每一个细胞的。\n\n![目前的性能损耗都在fillRect上面](https://rustwasm.github.io/book/images/game-of-life/drawCells-after-flamegraph.png)\n\n### 让时间变快\n\n有些人可能不喜欢等待，更希望一帧跑完九刻而不是一刻。我们可以通过修改 renderLoop 函数实现。\n\n```JavaScript\nfor (let i = 0; i < 9; i++) {\n  universe.tick();\n}\n```\n\n在机器上，fps 降到了 35，但是我们一定要到 60fps！\n\n现在我们知道性能瓶颈在 tick 函数上面，所以我们给函数的每一步都加上 Timer 监视，我猜测是创建向量和释放向量占用了很多资源造成的。\n\n```Rust\npub fn tick(&mut self) {\n    let _timer = Timer::new(\"Universe::tick\");\n\n    let mut next = {\n        let _timer = Timer::new(\"allocate next cells\");\n        self.cells.clone()\n    };\n\n    {\n        let _timer = Timer::new(\"new generation\");\n        for row in 0..self.height {\n            for col in 0..self.width {\n                let idx = self.get_index(row, col);\n                let cell = self.cells[idx];\n                let live_neighbors = self.live_neighbor_count(row, col);\n\n                let next_cell = match (cell, live_neighbors) {\n                    // Rule 1: Any live cell with fewer than two live neighbours\n                    // dies, as if caused by underpopulation.\n                    (Cell::Alive, x) if x < 2 => Cell::Dead,\n                    // Rule 2: Any live cell with two or three live neighbours\n                    // lives on to the next generation.\n                    (Cell::Alive, 2) | (Cell::Alive, 3) => Cell::Alive,\n                    // Rule 3: Any live cell with more than three live\n                    // neighbours dies, as if by overpopulation.\n                    (Cell::Alive, x) if x > 3 => Cell::Dead,\n                    // Rule 4: Any dead cell with exactly three live neighbours\n                    // becomes a live cell, as if by reproduction.\n                    (Cell::Dead, 3) => Cell::Alive,\n                    // All other cells remain in the same state.\n                    (otherwise, _) => otherwise,\n                };\n\n                next[idx] = next_cell;\n            }\n        }\n    }\n\n    let _timer = Timer::new(\"free old cells\");\n    self.cells = next;\n}\n```\n\n看这些时间戳，很明显我的猜测是错误的：大部分时间确实用在计算下一代细胞上面，每一刻都调用和释放向量竟然无足轻重。所以一定要使用性能监视器！\n\n![性能监视](https://rustwasm.github.io/book/images/game-of-life/console-time-in-universe-tick.png)\n\n下一部分需要`nightly`编译，因为我们将会使用[test-feature-gate](https://doc.rust-lang.org/unstable-book/library-features/test.html)来跑 benchmark（性能测试）。我们将会安装另一个工具[cargo-benchcmp](https://github.com/BurntSushi/cargo-benchcmp)。一个迷你的有`cargo bench`支持的性能测试工具。\n\n让我们写一个函数使用`#[bench]`属性，我们可以使用更成熟的测试工具测试它。\n\n```Rust\n#![feature(test)]\n\nextern crate test;\nextern crate wasm_game_of_life;\n\n#[bench]\nfn universe_ticks(b: &mut test::Bencher) {\n    let mut universe = wasm_game_of_life::Universe::new();\n\n    b.iter(|| {\n        universe.tick();\n    });\n}\n```\n\n我们也要注释掉所有`#[wasm_bindgen]`，否则\"cdylib\"或则其他编译流程会失败，\n\n此时，我们可以跑`cargo bench | tee before.txt`来编译项目查看性能日志了！\n\n```shell\n$ cargo bench | tee before.txt\n    Finished release [optimized + debuginfo] target(s) in 0.0 secs\n     Running target/release/deps/wasm_game_of_life-91574dfbe2b5a124\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n     Running target/release/deps/bench-8474091a05cfa2d9\n\nrunning 1 test\ntest universe_ticks ... bench:     664,421 ns/iter (+/- 51,926)\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 1 measured; 0 filtered out\n```\n\n他也告诉我们二进制文件的位置，我们可以跑第二次性能测试。但这次可以使用系统的性能测试工具。因为我用的是 Linux，所以 perf 就是我的测试工具。\n\n```shell\n$ perf record -g target/release/deps/bench-8474091a05cfa2d9 --bench\nrunning 1 test\ntest universe_ticks ... bench:     635,061 ns/iter (+/- 38,764)\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 1 measured; 0 filtered out\n\n[ perf record: Woken up 1 times to write data ]\n[ perf record: Captured and wrote 0.178 MB perf.data (2349 samples) ]\n```\n\n查看性能测试报告，得知所有的时间都如期使用在`Universe::tick`。\n\n![perf的结果](https://rustwasm.github.io/book/images/game-of-life/bench-perf-report.png)\n\nperf 会指明函数中到底是什么操作引起的性能损耗（译者：虽然我也没看出来）。\n\n![perf的结果](https://rustwasm.github.io/book/images/game-of-life/bench-perf-annotate.png)\n\n它告诉我们 26.67%的时间花在总和细胞数目，23.41%的时间花在获取列序号，另外 15.42%花在取得行序号。这三个性能瓶颈中，第二和第三都使用了比较耗费性能的 DIV 命令。这些 DIV 的实现是在`Universe::live_neighbor_count`。\n\n回想这个函数的定义：\n\n```Rust\nfn live_neighbor_count(&self, row: u32, column: u32) -> u8 {\n    let mut count = 0;\n    for delta_row in [self.height - 1, 0, 1].iter().cloned() {\n        for delta_col in [self.width - 1, 0, 1].iter().cloned() {\n            if delta_row == 0 && delta_col == 0 {\n                continue;\n            }\n\n            let neighbor_row = (row + delta_row) % self.height;\n            let neighbor_col = (column + delta_col) % self.width;\n            let idx = self.get_index(neighbor_row, neighbor_col);\n            count += self.cells[idx] as u8;\n        }\n    }\n    count\n}\n```\n\n使用取余运算是为了避免使用杂乱的 if 代码来处理边界，但导致我不得不用 DIV 这样比较耗费性能的指令。相反，如果用 if 处理边界，并展开循环，则分支条件将会比较适合 CPU 处理。\n\n```Rust\nfn live_neighbor_count(&self, row: u32, column: u32) -> u8 {\n    let mut count = 0;\n\n    let north = if row == 0 {\n        self.height - 1\n    } else {\n        row - 1\n    };\n\n    let south = if row == self.height - 1 {\n        0\n    } else {\n        row + 1\n    };\n\n    let west = if column == 0 {\n        self.width - 1\n    } else {\n        column - 1\n    };\n\n    let east = if column == self.width - 1 {\n        0\n    } else {\n        column + 1\n    };\n\n    let nw = self.get_index(north, west);\n    count += self.cells[nw] as u8;\n\n    let n = self.get_index(north, column);\n    count += self.cells[n] as u8;\n\n    let ne = self.get_index(north, east);\n    count += self.cells[ne] as u8;\n\n    let w = self.get_index(row, west);\n    count += self.cells[w] as u8;\n\n    let e = self.get_index(row, east);\n    count += self.cells[e] as u8;\n\n    let sw = self.get_index(south, west);\n    count += self.cells[sw] as u8;\n\n    let s = self.get_index(south, column);\n    count += self.cells[s] as u8;\n\n    let se = self.get_index(south, east);\n    count += self.cells[se] as u8;\n\n    count\n}\n```\n\n接下来再跑一次性能测试，将他输出到`after.txt`。\n\n```shell\n$ cargo bench | tee after.txt\n   Compiling wasm_game_of_life v0.1.0 (file:///home/fitzgen/wasm_game_of_life)\n    Finished release [optimized + debuginfo] target(s) in 0.82 secs\n     Running target/release/deps/wasm_game_of_life-91574dfbe2b5a124\n\nrunning 0 tests\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\n     Running target/release/deps/bench-8474091a05cfa2d9\n\nrunning 1 test\ntest universe_ticks ... bench:      87,258 ns/iter (+/- 14,632)\n\ntest result: ok. 0 passed; 0 failed; 0 ignored; 1 measured; 0 filtered out\n```\n\n感觉性能提高了不少，现在对比一下前后的数据。\n\n```shell\n$ cargo benchcmp before.txt after.txt\n name            before.txt ns/iter  after.txt ns/iter  diff ns/iter   diff %  speedup\n universe_ticks  664,421             87,258                 -577,163  -86.87%   x 7.61\n```\n\n哇！提高了 7.61 倍！\n\nWebAssembly 意图和原生系统贴近，但是我们确实需要在 WebAssembly 环境下也作一次测试。\n\n从新编译程序，刷新浏览器页面，画面重新跑在 60fps，每一帧大概是 10 毫秒。\n\n成功！\n\n![测试结果](https://rustwasm.github.io/book/images/game-of-life/waterfall-after-branches-and-unrolling.png)\n\n### 练习\n\n- 现在，下一个性能瓶颈是`Universe::tick`调用和释放函数的部分，尝试缓存细胞状态，让 Universe 维护两个向量，永远不释放他们，也不掉用新的区间。\n- 换一种方式实现游戏，让 Rust 和 JavaScript 以细胞的列表交互，这样能让渲染画布更快吗？你能实现这个设计同时不在每个 tick 函数中调用新的列表吗？\n- 就性能显示来看 2D 画布渲染显然不够快，使用 WebGL 画布重新渲染，WebGL 能多快？使用 WebGL 能在遇到瓶颈前创建多大的宇宙空间？\n\n## 压缩.wasm 文件大小\n\nrustc 有很多配置项，可以让`.wasm`二进制文件更加小。在很多情况下更小的生成文件意味着更长的编译时间。另外更小的文件使得 WebAssembly 的运行时间更长。我们应该意识到这些方面上的牺牲。在这些情况下，当我们要减少编译文件大小时，我们应该考虑到使用性能监视器衡量一下这种改动是否值得。\n\n### 使用链接配置器编译\n\n在`Cargo.toml`，增加`lto=true`：\n\n```toml\n[profile.release]\nlto = true\n```\n\n者给予 LLVM 更多机会去内联和简化函数，不仅仅会使`.wasm`更小，还会让他在运行时运行得更快！但是会让他编译得更长。\n\n### 配置 LLVM 牺牲速度换文件大小\n\nLLVM 默认配置是为了运行速度，并不是大小。我们可以通过更改`Cargo.toml`去修改这一配置。\n\n```toml\n[profile.release]\nopt-level = 's'\n```\n\n或者，更激进的可以把它改成\"z\"。\n\n但是，配置为\"s\"的时候有的时候会比\"z\"更小，所以一定要做测量！\n\n### 使用 wasm-opt 工具\n\n[Binaryen](https://github.com/WebAssembly/binaryen)是一个关于 WebAssembly 编译工具的集合。他比 LLVM 更加后端，使用`wasm-opt`处理生成文件常常会节省 15%~20%的代码，同时又会提高运行速度。\n\n```\n# 输出为压缩的文件大小。\nwasm-opt -Os -o output.wasm input.wasm\n\n# 更激进的输出为压缩的文件大小。\nwasm-opt -Oz -o output.wasm input.wasm\n\n# 输出文件追求运行速度。\nwasm-opt -O -o output.wasm input.wasm\n\n# 输出文件更激进的追求运行速度。\nwasm-opt -O3 -o output.wasm input.wasm\n```\n\n#### 注意调试信息\n\n占用生成文件大小的主要成分是调试信息和函数名。`wasm-pack`能够默认移除调试信息。然而`wasm-opt`在使用`-g`参数时能删除函数名。\n\n这意味着，如果你按照以上操作，生成文件应该既没有调试信息也没有函数名。如果你想保留某些调试信息，请一定注意这一点。\n\n### 文件大小检查调查\n\n如果修改编译配置不能获得更小的文件大小，就应该调查一下是什么代码导致文件太大。\n\n> 就像做性能测试，我们应让工具来判断哪里出了问题，否则我们会浪费更多自己的时间。\n\n#### twiggy 代码检查器\n\n[twiggy](https://github.com/rustwasm/twiggy)是一个支持 WebAssembly 的代码大小检查器，他能分析二进制代码的调用图，并解决如下问题：\n\n- 为什么这个函数被编译到这段代码中。\n- 这个函数占用大小是多少？如果我删除这个函数以及其相关函数我能节省多大的空间？\n\n```\n$ twiggy top -n 20 pkg/wasm_game_of_life_bg.wasm\n Shallow Bytes │ Shallow % │ Item\n───────────────┼───────────┼────────────────────────────────────────────────────────────────────────────────────────\n          9158 ┊    19.65% ┊ \"function names\" subsection\n          3251 ┊     6.98% ┊ dlmalloc::dlmalloc::Dlmalloc::malloc::h632d10c184fef6e8\n          2510 ┊     5.39% ┊ <str as core::fmt::Debug>::fmt::he0d87479d1c208ea\n          1737 ┊     3.73% ┊ data[0]\n          1574 ┊     3.38% ┊ data[3]\n          1524 ┊     3.27% ┊ core::fmt::Formatter::pad::h6825605b326ea2c5\n          1413 ┊     3.03% ┊ std::panicking::rust_panic_with_hook::h1d3660f2e339513d\n          1200 ┊     2.57% ┊ core::fmt::Formatter::pad_integral::h06996c5859a57ced\n          1131 ┊     2.43% ┊ core::str::slice_error_fail::h6da90c14857ae01b\n          1051 ┊     2.26% ┊ core::fmt::write::h03ff8c7a2f3a9605\n           931 ┊     2.00% ┊ data[4]\n           864 ┊     1.85% ┊ dlmalloc::dlmalloc::Dlmalloc::free::h27b781e3b06bdb05\n           841 ┊     1.80% ┊ <char as core::fmt::Debug>::fmt::h07742d9f4a8c56f2\n           813 ┊     1.74% ┊ __rust_realloc\n           708 ┊     1.52% ┊ core::slice::memchr::memchr::h6243a1b2885fdb85\n           678 ┊     1.45% ┊ <core::fmt::builders::PadAdapter<'a> as core::fmt::Write>::write_str::h96b72fb7457d3062\n           631 ┊     1.35% ┊ universe_tick\n           631 ┊     1.35% ┊ dlmalloc::dlmalloc::Dlmalloc::dispose_chunk::hae6c5c8634e575b8\n           514 ┊     1.10% ┊ std::panicking::default_hook::{{closure}}::hfae0c204085471d5\n           503 ┊     1.08% ┊ <&'a T as core::fmt::Debug>::fmt::hba207e4f7abaece6\n```\n\n#### 手动修改 LLVM-IR\n\nLLVM-IR 是 LLVM 生成 WebAssembly 代码的最后一步。所以，他和最终生成的 WebAssembly 很像。更多的 LLVM-IR 代码意味着生成的文件越大，当一个函数占用了 LLVM-IR 中 25%的位置，则代表他占用了 25%的文件大小。当然这些数字只是个经验值，因为 LLVM-IR 还有一些 WebAssembly 没有的重要的信息（因为 WebAssembly 没有诸如 DWARF 调试信息）。\n\n你可以使用 cargo 生成 LLVM-IR 代码：\n\n```shell\ncargo rustc --release -- --emit llvm-ir\n```\n\n接下来你可以使用 find 命令去寻找存储在 cargo 生成目录(target)下的`.ll`文件。\n\n```shell\nfind target/release -type f -name '*.ll'\n```\n\n相关可以参考[LLVM 语言](https://llvm.org/docs/LangRef.html)\n\n#### 更激进的工具\n\n修改编译配置是比较好上手的。如果你想前进一个里程，你可以使用一些更激进的工具，像是重写代码以减少冗余。以下是一些不太优雅的代码，但是的确能减少生成文件大小。\n\n##### 避免字符串格式化\n\n`format!`,`to_string`等，能加入很多冗余代码。如果可能，在调试环境用格式化，而在发布环境使用静态字符串。\n\n##### 避免使用崩溃\n\n这很明显，使用 twiggy 之类的工具或者人工检查 LLVM-IR 能帮助你查出到底哪个函数崩溃。\n\n崩溃并不总是出现在`panic!()`宏，他们会在很多情况下出现。\n\n- 访问切片越界，如：`my_slice[i]`\n- 除 0，如：`dividend/divider`\n- 解 Option 类型或者 Result 类型，如：`opt.unwrap()`或者`res.unwrap()`\n\n前两个可以被改成第三个，访问切片可以使用`my_slice.get(i)`。除法可以使用`checked_div`，所以你只有一种需要处理的情况。\n\n解开`Option`或者`Result`有两种方法安全的和不安全的。\n\n安全的方式是使用 abort 方法而不是返回 None 和 Error 值。\n\n```Rust\n#[inline]\npub fn unwrap_abort<T>(o: Option<T>) -> T {\n  use std::process;\n  match o {\n    Some(t) => t,\n    None => process::abort(),\n  }\n}\n```\n\n最终，崩溃在`wasm32-unknown-unknown`被翻译成退出，因此不会造成代码冗余。\n\n相反的，[unreachable](https://crates.io/crates/unreachable)包为 Option 和 Result 类型提供不安全的[unchecked_unwrap](https://docs.rs/unreachable/1.0.0/unreachable/trait.UncheckedOptionExt.html#tymethod.unchecked_unwrap)方法。让 Rust 编译器假定 Option 类型是 Some 类型而 Result 类型是 Ok 类型。如果值是不正确的的情况是未被考虑的。你一定要在 110%确认的情况下使用这个包，因为编译器可没那么聪明能预估出错误。即使你这么做了，你一定要在调试环境下面做检查，而在发布环境下去掉检查。\n\n#### 避免调用内存或者使用 wee_alloc\n\nRust 的默认调用器是`dlmalloc`的一部分。它能达到 10KB。如果能够避免动态调用，你应该能省下 10KB。\n\n完全避免动态语言调用可能会非常困难。但是删除调用却在某些情况下很简单，在这些情况下，可以使用[`wee_alloc`](https://github.com/rustwasm/wee_alloc)代替全局的调用器可以从 10KB 中节省很多。`we_alloc`是当你想要一些调用器时的一个选择，并能同时减少代码大小。\n\n#### 使用 trait 来替代泛型\n\n当你创建一些泛型函数。\n\n```Rust\nfn whatever<T: MyTrait>(t: T) { ... }\n```\n\n`rustc`和 LLVM 会为不同类型生成新的函数拷贝。这为编译器提供了各种类型使用这个函数的机会。但会增加代码大小。\n\n如果你为对象提供 trait，如下：\n\n```Rust\nfn whatever(t: Box<MyTrait>) { ... }\n// or\nfn whatever(t: &MyTrait) { ... }\n// etc...\n```\n\n这样经过虚调用动态派遣（dynamic dispatch）的方法就被使用了，如此只会用一个函数会放在`.wasm`。这样的缺点是丢失了编译器自定义的机会，并且增加了不直接的，动态的语言调用。\n\n#### 使用 wasm-snip 工具\n\n[`wasm-snip`](https://github.com/fitzgen/wasm-snip)使用`unreachable`方法代替了 WebAssembly 的函数。这是一个又沉又钝的锤子，更像是徒手。\n\n也许你知道有些函数可能永远不会在运行时被调用，但是编译器不能保证？掐了他！执行`wasm-opt`加上`--dce`参数，所有无关函数就会被剪掉。\n\n这个工具对删除崩溃及其有用。\n\n### 我们能把生命游戏缩到多小？\n\n默认的配置下，WebAssembly 二进制大小为 29410 字节。\n\n```shell\n$ wc -c pkg/wasm_game_of_life_bg.wasm\n29410 pkg/wasm_game_of_life_bg.wasm\n```\n\n打开 LTO 之后设置`opt-level=\"z\"`执行`wasm-opt -Oz`，结果是 17317 字节。\n\n```shell\n$ wc -c pkg/wasm_game_of_life_bg.wasm\n17317 pkg/wasm_game_of_life_bg.wasm\n```\n\n如果使用 gzip 压缩，你能搞到 9045 字节！\n\n```shell\n$ gzip -9 < pkg/wasm_game_of_life_bg.wasm | wc -c\n9045\n```\n\n### 练习\n\n- 使用`wasm-snp`工具删掉会有崩溃的函数，它能减少多少字节？\n- 使用`wee_alloc`作为全局调用器，，修改`Cargo.toml`：\n\n```\n[features]\ndefault = [\"wee_alloc\"]\n```\n\n能够减少多少大小呢？\n\n- 我们只实现了一个 Universe，所以相比使用构造器，我们可以导出一个`static mut`实例，如果这个实例使用的是双向缓存，我们也可以让这些缓存也是全局`staic mut`。这样就移除了所有的动态调用，我们可以增加`#![no_std]`包取消掉调用器。这回能缩小多少大小？\n\n## 发布到 NPM\n\n首先，确保你登入了 npm。\n\n接着，使用`wasm-pack login`登入。\n\n### 发布\n\n确保已经执行`wasm-pack build`并且 pkg 文件已经编译好。\n\n已经准备好之后，跑`wasm-pack publish`上传包到 npm。\n\n这样就发布了！\n\n有哥们照着这个指导做完发布失败，是因为\"name\"字段存在重名\n\n```toml\n[package]\nname = \"wasm-game-of-life-my-username\"\n```\n\n接着，重新编译并发布\n\n```shell\nwasm-pack build\nwasm-pack publish\n```\n\n这会应该能行。\n\n## 与 JavaScript 相互交互\n\n### JavaScript 函数的输出和引用\n\n#### 在 Rust 一边\n\n在 JavaScript 为主的世界里使用 WebAssembly，引入和输出函数比较直接，有点类似于 C。\n\nWebAssembly 模块声明了一系列引入，每一个都有模块名。模块名可以使用`#[link(wasm_import_module)]`提供给`extern {...}`。\n\n导出的 WebAssembly 线性内存被导出作\"memory\"。\n\n```Rust\n// import a JS function called `foo` from the module `mod`\n#[link(wasm_import_module = \"mod\")]\nextern { fn foo(); }\n\n// export a Rust function called `bar`\n#[no_mangle]\npub extern fn bar() { /* ... */ }\n```\n\n因为 WebAssembly 的值类型有局限，这些函数只有基础的数字类型。\n\n#### 在 JavaScript 一边\n\n在 JavaScript 中，wasm 二进制文件转换成 ES6 模块。它必须被实例化为线性内存并由一系列函数能对应到这些引入。细节描述可在[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiateStreaming)找到。\n\nES6 的模块包括从 Rust 暴露给 JavaScript 的函数，现在可以用 JavaScript 调用。\n\n[这里](https://www.hellorust.com/demos/add/index.html)有一个很简单的构建流程。\n\n### 除了数字\n\n当在 JavaScript 中使用 WebAssembly，WebAssembly 的内存和 JavaScript 的内存有很大的不同。\n\n- 每个 WebAssembly 模块的线性内存，JavaScript 可以自由访问。\n- 对应之下，WebAssembly 不能访问 JavaScript 的内存。\n\n所以，有两种复杂的交互。\n\n- 复制二进制数据到 WebAssembly 内存。\n- 建立一个在 JavaScript 上的堆内存，提供一堆地址。这样 WebAssembly 访问 JavaScript 对象，间接通过 JavaScript 访问。\n\n幸运的是，通过`bindgen`框架[`wasm-bindgen`](https://github.com/rustwasm/wasm-bindgen)可以帮助交互。这个框架可以将已习惯的 Rust 语言自动翻译到 JavaScript。\n\n### 自定义部分（译者：所以这个到底是干什么用的？）\n\n自定义部分允许随意继承人一的数据进入 WebAssembly 模块，这个数据是在编译时设置，不能在运行时修改。\n\n在 Rust 中，自定义部分是通过`#[link_section]`属性暴露的静态数组([T; size])。\n\n```Rust\n#[link_section = \"hello\"]\npub static SECTION: [u8; 24] = *b\"This is a custom section\";\n```\n\n这样给 wasm 增加一个 hello 部分，这个 SECTION 变量是随意的，但是无论怎么赋值，内容总是这些文字。\n\n这个自定义内容可以被 JavaScript 通过[`WebAssembly.Module.customSections`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module/customSections)获得自定义部分，它返回一个`ArrayBuffer`，如果有同名的部分，他们会被放到一个数组中。\n\n```JavaScript\nWebAssembly.compileStreaming(fetch(\"sections.wasm\"))\n.then(mod => {\n  const sections = WebAssembly.Module.customSections(mod, \"hello\");\n\n  const decoder = new TextDecoder();\n  const text = decoder.decode(sections[0]);\n\n  console.log(text); // -> \"This is a custom section\"\n});\n```\n\n## 哪些包能在 WebAssembly 下面使用\n\n最简单的就是列出 WebAssembly 上能用的 Rust 包：如果避开了以下内容，则这些包可以在 WebAssembly 使用。如果一个包支持`#![no_std]`\n的包，这个包也可能支持 WebAssembly。\n\n### 以下包不能使用\n\n#### C 和系统级依赖\n\nWebAssembly 不提供系统一级别的库，所以任何链接系统库的地方都无法成功。\n\n使用 C 库可能不会成功，既然没有稳定的交叉编译 ABI，和提供给 WebAssembly 交叉链接的连接库。虽然 clang 已经发布 wasm32 的生成，但是还远远不足。\n\n#### 文件 I/O\n\nWebAssembly 没有访问文件系统的功能，所以访问文件系统的库都不能使用。\n\n#### 调用线程\n\n目前有计划[加入线程](https://rustwasm.github.io/2018/10/24/multithreading-rust-and-wasm.html)，但是还没被发布。尝试调用线程会导致崩溃。\n\n### 有哪些目的的包能在 WebAssembly 下面使用\n\n如果只是提供[算法](https://crates.io/categories/algorithms)和[数据结构](https://crates.io/categories/data-structures)的包。\n\n#### #![no-std]\n\n[不依赖于标准库的包](https://crates.io/categories/no-std)能够运行在 WebAssembly 下面。\n\n#### 解析器\n\n只要是接受输入且无需文件操作的[解析器](https://crates.io/categories/parser-implementations)就可能运行在 WebAssembly 下。\n\n#### 文字处理\n\n[复杂的语言处理](https://crates.io/categories/text-processing)可能会运行在 WebAssembly 下面。\n\n#### Rust 范式\n\n[适用于不同情况下的包](https://crates.io/categories/rust-patterns)可能运行在 WebAssembly 下。\n\n## 如何给常用库增加 WebAssembly 支持\n\n本部分讲解如何将常用库增加 WebAssembly 支持。后面的内容我就捡感兴趣的写了。\n\n### 在 CI 增加 wasm32-unknown-unknown\n\n保证 CI 中增加如下命令\n\n```shell\nrustup target add wasm32-unknown-unknown\ncargo check --target wasm32-unknown-unknown\n```\n\n举个例子，在 travis 的配置中增加如下配置：\n\n```yaml\nmatrix:\n  include:\n    - language: rust\n      rust: stable\n      name: \"check wasm32 support\"\n      install: rustup target add wasm32-unknown-unknown\n      script: cargo check --target wasm32-unknown-unknown\n```\n\n### 在 node.js 或者无头浏览器（译者：卧槽是这么翻译么）\n\n你可以使用`wasm-bindgen-test`和`wasm-pack test`去跑测试，详细内容上面已经提到。\n\n## 发布 WebAssembly 到线上\n\n> 发布过程几乎和任何 web 应用发布是一样的。\n\n为了发布 Web 应用，复制生成文件到线上环境，配置你的 HTTP 服务器让他们可访问。\n\n### 保证服务器支持 application/wasm\n\n为了让浏览器加载变快，[WebAssembly.instantiateStreaming](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiateStreaming)函数会使用管道传输文件（请确定你的打包器能够使用这个函数）。但是 instantiateStreaming 需要 HTTP 返回类型支持`application/wasm`，否则会丢出错误。\n\n- [如何配置 Apache 服务器](https://httpd.apache.org/docs/2.4/mod/mod_mime.html#addtype)\n- [如何配置 Nginx 服务器](https://nginx.org/en/docs/http/ngx_http_core_module.html#types)\n\n### 更多内容\n\n- [webpack 线上打包的最佳实践](https://webpack.js.org/guides/production/)\n","collection":"blog","data":{"type":"post","category":"fe","tag":["rust","wasm"]}},{"id":"2020/03/29/Rust-crate.io.md","slug":"2020/03/29/rust-crateio","body":"\n# Rust 开发更换 crate.io 源\n\n使用 VSCode 开发 Rust 的我，最难过的一刻就是打开编辑器时的 RLS 检查，可以看做它是一个用来检查代码语法的后台程序，在 RLS 的 issue 里面有很多人吐槽他初始化的速度实在是太慢了，然而大佬的回复都是说他们不需要使用这种辅助工具。作为使用 JavaScript 都一定要 TypeScript 编译，打字都是通过语音输入来打字的我来说（没错，这篇博文是语音转换过来的），臣妾做不到啊。\n\nRLS 检查有一个步骤是`cargo check`，这里会链接`crate.io`检查包的完整性。由于`crate.io`的包大多托管在 GitHub，所以外网的宝宝们吐槽的慢只是秒级别的，而中国的宝宝是小时级的 😭。\n\n但是尚有修补的余地，中科大爸爸给国内开发者提供国内的镜像了。修改`~/.cargo/config`增加中科大的源。\n\n```ini\n[source.crates-io]\nregistry = \"https://github.com/rust-lang/crates.io-index\"\nreplace-with = 'ustc'\n\n[source.ustc]\nregistry = \"git://mirrors.ustc.edu.cn/crates.io-index\"\n```\n\n中科大就是我的神啊！开发 Rust 终于可以和国外一样慢了 😂！\n","collection":"blog","data":{"type":"post","category":"fe","tag":["rust","crate.io","ustc","cargo"]}},{"id":"2020/05/12/flutter-CICD.md","slug":"2020/05/12/flutter-cicd","body":"\n# 多平台上的 flutter 以及 CICD\n\nFlutter 是一个号称面向全平台的框架，既然立了 flag，早晚要去摘的。除了 iOS 和 Android，beta 版本的 flutter 还支持 web 网页以及 mac 桌面端，alpha（master 分支）版本还提供 Windows 和 Linux 桌面端的支持，本篇除了介绍 flutter 在各端如何开发发布还会提及如何通过 CICD 发布安卓 apk，以及这段时间使用 Flutter 的感想。\n\n## Web 支持\n\nWeb 应该是 dart 语言一直想抢的蛋糕，在早期 chrome 上面就有 dart VM，甚至提供了 dart2js 这样的工具，所以 Flutter 在一炮走红之后立刻提供 web 支持是不意外的。\n\n创建 Web 端的 Flutter 应用，以下几项是必须的：\n\n- 安装 Flutter SDK\n- Chrome 浏览器\n- 一个支持开发 Flutter 的编辑器\n\n确定以上几项后执行下面命令切换 Flutter 到 beta 版本，并打开 Web 端支持。\n\n```shell\n flutter channel beta\n flutter upgrade\n flutter config --enable-web\n```\n\n以上命令执行成功后执行`flutter devices`应该能看到 Chrome 浏览器和 Web 伺服器的支持。\n\n打开任何一个 Flutter 项目的根目录，执行`flutter run -d chrome`，稍等片刻 chrome 会被自动打开并渲染项目（这个体验很割裂，真的，这个片刻其实比较久，而且你的终端会不会显示任何东西）。\n\n执行`flutter build web`就会编译项目至`/build/web`文件夹下。\n\n### Web 支持总结\n\n编译 web 应用已经相对稳定，基本上你老姑（谷歌）想要的功能也都有（比如 service-worker 什么的），但因为是 js 渲染，SEO 什么的可能没 SSR 项目号，再一个，我在使用的时候没发现有 sourcemap，估计 debug 的方法也会和普遍 web 应用不太一致。\n\n## Windows 桌面支持\n\n到 Flutter 的目录下，将它 checkout 到 master 分支，此时执行`flutter doctor`，它会检查你是否安装`Visual Studio`、`MSVC`以及`Windows10 SDK`（当然了，这是在 Windows 下面执行才有），没错，alpha 版本的 flutter 已经可以编译 Windows 桌面应用了，只需安装社区版的`Visual Studio`，在安装项里面添加`Clang`、`MSVC`和`Windows10 SDK`即可。\n\n另外还需要在项目中增加[flutter desktop embedding](https://github.com/google/flutter-desktop-embedding)，尝试到这里我有点失望，看了这个项目的 issue，目前 Windows 的桌面支持还是用 Win32 的 API，项目正在计划使用 UWP 来替换。同样 Linux 桌面也在纠结于到底使用 QT 还是 GTK 做框架，因此这两个桌面端的支持相较于 Mac 延后。\n\n## flutter-rs\n\n这是我的另一个 Flag，几个月前我在尝试用 rust 写桌面应用，几个平台都不理想，于是尝试了这个包。然而[flutter-rs](https://github.com/flutter-rs/flutter-rs)依然不太理想，不过更多原因可能是因为这个项目还在 WIP 阶段。\n\n目前 rust 推荐在 WSL 上面开发，考虑到 WSL1 对图形的支持不太好，我更新了[WSL2](https://aka.ms/wsl2kernel)的内核，并使用 Ubuntu 20.04 开发。\n\n这里注意下，WSL2 是完整的 Linux 内核，所以代理什么的都不能使用 WSL1 里面的`localhost`。\n\n```shell\nexport WSL_VERSION=$(wsl.exe -l -v | grep -a '[*]' | sed 's/[^0-9]*//g')\nexport WSL_HOST=$(tail -1 /etc/resolv.conf | cut -d' ' -f2)\nexport DISPLAY=$WSL_HOST:0\n\nexport HTTP_PROXY=http://$WSL_HOST:1080\nexport HTTPS_PROXY=http://$WSL_HOST:1080\nexport NO_PROXY=127.0.0.1,localhost,$WSL_HOST\n```\n\n同样在运行`vcXsrv`时也要加上`-ac`参数已打开远端支持。\n\n安装编译`flutter-rs`需要很多依赖，\n\n```shell\nsudo apt install build-essential libssl-dev pkg-config libxcb-util-dev libxcb-render-util0-dev libxcb-shape0-dev libxcb-xfixes0-dev libclang-dev libglfw3\n\ncargo install flutter-rs\n```\n\n尴尬的来了，执行`cargo flutter run`，打开的 flutter 窗口闪了一下就崩溃了...查了下，好像是 Skia 在 rust 上面链接的问题，哎，不跟进了。\n\n## hover\n\n那么就没有一个能稳定点的桌面端方案了么？有！go 提供了一套 API 接口[hover](https://hover.build/)也叫[go-flutter](https://github.com/go-flutter-desktop/go-flutter)，框架是 GLFW。\n\n在 MSYS 里面就可以安装 golang（太好了，WSL 下面编译 GUI 不敢恭维啊）。\n\n```shell\npacman -S mingw-w64-x86_64-go\n```\n\n初次运行提示找不到 go 命令，貌似`mingw-w64`不在 PATH 上，查了好多都没找到原因，干脆直接添加上好了。\n\n```shell\nexport PATH=/c/tools/msys64/mingw64/bin:$PATH\n```\n\n下面安装 hover\n\n```shell\nGO111MODULE=on go get -u -a github.com/go-flutter-desktop/hover\n```\n\n随便找个已有的 flutter 项目，执行`hover run`，它会询问你是否增加一段 fushia 的代码`lib/main_desktop.dart`，没错，所有的 desktop 端都叫 fushia，它也是桌面端的入口文件，直接回复 Y 即可。\n\n和 flutter 的命令类似，执行`hover build windows`就会在`/build/output/windows`下生成编译好的可执行文件。\n\nhover 相对来说是目前唯一比较成熟的 Flutter 桌面运行时了，更多内容可以查看它的[文档](https://github.com/go-flutter-desktop/hover)。但是运行结果不能说如意，比如在处理改变窗口大小时，界面不会跟着鼠标变化，直到释放之后才会改变，这对于 2020 年的人类来说，体验真是不够好，但是运行起来确实是比 electron 好些，起码笔记本风扇没有疯狂打转。\n\n### Windows 桌面支持总结\n\n在官方支持遥遥无期的情况下，桌面支持真是百花齐放，不过另一方面微软爸爸直接提供亲生的[React Native Windows](https://github.com/Microsoft/react-native-windows)可是支持 UWP 下面的 Fluent Design 哦，所以在多段支持上，起码 Windows 这里，React Native 略胜一筹。\n\n## CICD\n\n本来想写一下测试的，结果发现没啥新东西。干脆提一下利用 Github action 做 CICD 好了。（其实基本上就复制[别人](https://github.com/nabilnalakath/flutter-githubaction)的`/.github/workflows`文件夹就好，白嫖很开心）。\n\n```yaml\non: push\nname: Test, Build and Release apk\njobs:\n  build:\n    name: Build APK\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n      - uses: actions/setup-java@v1\n        with:\n          java-version: \"12.x\"\n      - uses: subosito/flutter-action@v1\n        with:\n          flutter-version: \"1.7.8+hotfix.4\"\n      - run: flutter pub get\n      - run: flutter test\n      - run: flutter build apk --debug --split-per-abi\n      - name: Push APK to Releases\n        uses: ncipollo/release-action@v1\n        with:\n          artifacts: \"build/app/outputs/apk/debug/*.apk\"\n          token: ${{ secrets.TOKEN }}\n```\n\n## 总结\n\nFlutter 相对于 React Native 的确有性能上的优势，毕竟跳过了 js 和原生环境交互的沟壑，但是对比开发环境还是没有 RN 全面。\n\n- 如果只是移动端应用，两者皆可，Flutter 有对 Material Design 更原生的支持，所以如果设计上是 Material Design，开发效率会更高；但是 RN 则在可定制上更高一筹。\n- 如果是 Wear OS，必然 Flutter。\n- 如果是桌面应用，目前我站 RN，除了工具链全面，它对比 Electron 已经很好了，而 Flutter 即使理论上性能更高，但其 alpha 的不稳定也要考虑在内。\n- 如果是 Web 端，感觉 Flutter 根本打不过现有的框架，不过仅仅对比 RN 的话，Flutter 可以不做配置就直接编译 Web，也就是说如果你有一个移动应用，又不想关心 Web 是怎么回事儿，用它还是可以的。\n","collection":"blog","data":{"type":"post","category":"fe","tag":["flutter","CICD","rust","golang","wsl2","hover","github-action","vcXsrv","MSYS"]}},{"id":"2021/01/13/Learning-rust-with-entirely-too-many-linked-list.md","slug":"2021/01/13/learning-rust-with-entirely-too-many-linked-list","body":"\n# Learning Rust with entirely too many linkd lists\n\n## 序言\n\n### 基础\n\n- 指针\n\n\t- &\n\t- &mut\n\t- Box\n\t- Rc\n\t- Arc\n\t- *const\n\t- *mut\n\n- 所有权\n- 关键字\n\n\t- struct\n\t- enum\n\t- fn\n\t- pub\n\t- impl\n\n- 模式匹配\n- 测试\n- 简单的unsafe模式\n\n### 驳斥链表\n\n- 性能不总是重点\n- 链表的处理可以是O(1)的\n- 无需复杂度均摊\n- 节省空间\n- 函数式开发一直使用链表\n- 利于并行开发\n- 内核开发、嵌入式开发使用链表\n- 插入删除不会让迭代器失效\n- 简单且易于教学\n\n\n## 栈\n\n### 一个糟糕的栈\n\n- 布局\n\n\t- List a = Empty | Elem a (List a)\n\t- 布局一： \nenum List  {\n    Empty, \n    Box<List> \n}\n\n\t\t- 必须用Box分配堆内存，否则编译器不知道如何分配栈内存\n\t\t- 可以发现链表最后多余一个Empty，则更改布局二\n\n\t- 布局二：： \nenum List { \n    Empty, \n    More(Box<Node>) \n}\nstruct Node {\n    elem: i32,\n    next: List\n}\n\n- 创建\n\n\t- impl List {\n    pub fn new() -> Self {\n        List{ head: Link::Empty }\n   }\n}\n\n- 所有权入门\n\n\t- self - 值\n\n\t\t- 完全复制的值，函数值执行完会被销毁\n\n\t- &mut self 可变引用\n\n\t\t- 完全控制值所在地址\n\t\t- 不能给值增加引用\n\n\t- &self 不可变引用\n\n\t\t- 完全取得值所在地址，但不能更改\n\n- push\n\n\t- 因为&mut self.head不能增加引用，必须先用mem::replace替换原来引用来释放引用\n\n- pop\n\n\t- 未完成的函数可以使用unimplemented!宏来避免编译报错\n\t- match关键字也如函数一样存在值引用的问题\n\n- 测试\n\n\t- assert_eq!宏来处理断言\n\t- #[cfg(test)]注释来表明模块仅用于测试环境\n\t- #[test]注释用于表明函数用于测试\n\t- 模块内需要引用外部的元素（use super::List;）\n\n- Drop\n\n\t- Box的析构过程无法形尾递归调用，析构时会爆栈\n\n### 一个不错的栈\n\n- 使用Option代替Link\n\n\t- take方法替代mem::replace\n\t- map方法替代match\n\n- 支持泛型\n\n\t- impl<T>\n\n- peek\n\n\t- take方法会把数据取出并把原来的位置用None补充\n\t- as_ref会取得Option中的不可变引用\n\t- as_mut会取得所在内存的可变引用\n\n- 迭代器\n\n\t- 简单迭代\n\n\t\t- pub trait Iterator {\n    type Item;\n    fn next(&mut self) -> Option<Self::Item>;\n}\n\n\t- 不可变迭代\n\n\t\t- 显式声明所有权\n\n\t\t\t- 一个函数引入两个以上引用时\n\t\t\t- 一个泛型结构体\n\t\t\t- 编译器会提醒添加\n\n\t\t- 解开Box可以使用*操作来deRef，如 *node\n\n\t- 可变迭代\n\n## 列表\n\n### Box只能实现单指针\n\n### Rc实现引用计数\n\n- use std::rc::Rc\n- 使用clone方法\n- Option\n\n\t- map： Option<T> -> Option<T>\n\t- and_then： Option<T> -> T.\n\t- as_ref: &Option<T> -> Option<&T>\n\t- as_mut: &mut Option<T> -> Option<&mut T>\n\n### Arc线程安全的引用计数\n\n- Send trait: 可以移动到别的线程\n- Sync trait:可以被多个线程查看\n- Rc实现是基于Cell的\n- Arc基于Atomic\n\n## 队列\n\n### 一个不好但是Safe的队列\n\n- RefCell需要动态借用\n\n\t- borrow(self) -> Ref<T>\n\t- borrow_mut(self) -> RefMut<T>\n\t- into_inner()可以取得包裹的值\n\t- 虽然Ref和RefMut表现和&和&mut相同，但不能由Ref转换到&\n\n- Rc\n\n\t- 解开Rc需要使用try_unwrap()之后再unwrap()\n\t- Rc解决不了环形引用\n\n### 一个可以但是unsafe的队列\n\n- The Rustonomicon\nhttps://doc.rust-lang.org/nightly/nomicon/\n- *mut T\n- std::ptr\n- 具体unsafe的部分只靠这一个例子还搞不懂\n主要先摆正姿态，Unsafe其实并不是不好，只是此时编译器不做检查\n\n## 总结\n\n这次是彻底了解了Rust的所有权生存期的内容，虽然最后unsafe相关内容还是不清楚，单已经有很大进步了。\n\n","collection":"blog","data":{"type":"post","category":"book","tag":["rust"]}},{"id":"2022/08/17/Rust.md","slug":"2022/08/17/rust","body":"\n# Rust 实现的几个排序算法\n\n## 冒泡排序\n\n$O(n^2)$ 稳定排序\n\n选择每个元素和后面的作比较，如果前面的元素比后面的大，就交换两个元素的位置。\n\n```rust\nfn bubble_sort<T: Ord>(arr: &mut [T]) {\n    for i in 0..arr.len() {\n        for j in i..arr.len() {\n            if arr[i] > arr[j] {\n                arr.swap(i, j);\n            }\n        }\n    }\n}\n```\n\n## 插入排序\n\n$O(n^2)$ 稳定排序\n\n假定只有两个元素并排好序，每次再插入新的元素，直到全部元素都插入。\n\n```rust\nfn insert<T: Ord>(arr: &mut [T]) {\n    for i in 1..arr.len() {\n        let mut j = i;\n        while j > 0 && arr[j] < arr[j-1] {\n            arr.swap(j, j-1);\n            j -= 1;\n        }\n    }\n}\n```\n\n## 快速排序\n\n期望$O(n\\log{n})$，最坏情况$O(n^2)$，不稳定排序\n\n选中一个元素，把小于它的元素放到左边，再把大于它的放到右边，再继续处理两边数据。\n\n```rust\nfn quick<T:Ord>(arr: &mut [T]) {\n    _quick(arr, 0, (arr.len() - 1) as isize);\n}\n\nfn _quick<T:Ord>(arr: &mut [T], start: usize, end: isize) {\n    if start > end {\n        return;\n    }\n\n    let pivot = partition(arr, start, end as isize);\n    _quick(arr, start, (pivot) as isize - 1);\n    _quick(arr, pivot + 1, end);\n}\n\nfn partition<T:Ord>(arr: &mut [T], mut low: usize, mut high: usize) -> usize {\n    let pivot = 0;\n\n    loop {\n        if low < high && data[low] < pivot {\n            low += 1;\n        }\n        data.swap(low, high);\n\n        if low < high && data[high] > pivot {\n            high -= 1;\n        }\n        data.swap(low, high);\n\n        if low == high {\n            break;\n        }\n    }\n\n    low\n}\n```\n\n## 归并排序\n\n$O(n\\log{n})$ 稳定排序\n\n将两个有序数组合并为一个有序数组\n\n```rust\nfn merge<Ord:T>(arr: &mut [T]) {\n    let length = arr.len();\n    let middle = length / 2;\n\n    if length > 1 {\n        let a = arr[0..middle];\n        let b = arr[middle..length];\n        merge(a);\n        merge(b);\n\n\n    }\n}\n\nfn sort<Ord: T>(a: &[T], b: &[T], arr: &mut[T]) {\n    let mut ia = 0;\n    let mut ib = 0;\n    let mut i = 0;\n\n    while ia < arr.len() && ib < arr.len() {\n        if a[ia] < b[ib] {\n            data[i] = a[ia];\n            ia += 1;\n        } else {\n            data[i] = b[ib];\n            ib += 1;\n        }\n        i += 1;\n    }\n\n    if ia < arr.len() {\n        data[..i].copy_from_slice(&a[ia..]);\n    }\n\n    if ib < arr.len() {\n        data[..i].copy_from_slice(&b[ib..]);\n    }\n}\n```\n\n## 希尔排序\n\n$O(n\\log^2{n})$不稳定排序\n\n升级版的插入排序，每隔一个 gap 进行一次排序，直到 gap 缩到 1。\n\n```Rust\nfn shell<T: Ord>(arr: &mut [T]) {\n    let length = arr.len();\n    let mut gap = length / 2;\n\n    while gap > 0 {\n        for i in gap..length {\n            let mut j = i;\n            while j > gap & data[j] < data[j-gap] {\n                data.swap(j, j-gap);\n                j -= gap;\n            }\n        }\n        gap /= 2;\n    }\n}\n```\n\n## 堆排序\n\n$O(n\\log{n})$不稳定排序\n\n将数组转换成大顶堆，把作为根的最大值排到数组最后，再去除最大值重新排序。\n\n```Rust\nfn heap(data: &mut Vec<i32>) {\n    if data.len() < 2 {\n        return ;\n    }\n\n    // build one max heap\n    let last_root = (data.len() + 2) / 2;\n    for root in (0..=last_root).rev() {\n        to_max_heap(data, root, data.len() - 1);\n    }\n\n    // replace the first element(max element) to the last\n    // make max heap using the other elements\n    for last in (1..data.len()).rev() {\n        data.swap(0, last);\n        to_max_heap(data, 0, last-1);\n    }\n}\n\nfn to_max_heap(data: &mut Vec<i32>, mut root: usize, last: usize) {\n    loop {\n        let left = root * 2 + 1;\n        let right = left + 1;\n        let max_child;\n\n        if left > last {\n            break;\n        }\n\n        if right > last {\n            max_child = left;\n        } else {\n            max_child = if data[right] > data[left] {\n                right\n            } else {\n                left\n            }\n        }\n\n        if data[max_child] > data[root] {\n            data.swap(max_child, root);\n        }\n\n        root = max_child;\n    }\n}\n```\n\n另外还有很多排序算法参考[https://github.com/TheAlgorithms/Rust/tree/master/src/sorting](https://github.com/TheAlgorithms/Rust/tree/master/src/sorting)\n\n## bogo 排序\n\n$O(n\\times n!)$\n\n随机排列直到排序完成\n\n## 桶排序(Bucket Sort)\n\n$O(n)$ 稳定排序\n\n先对元素分类，如 0-10，10-20...然后在每个桶中进行排序\n\n## 鸡尾酒排序(cocktail Sort)\n\n$O(n^2)$ 稳定排序\n\n冒泡排序的变形，先向上冒泡，再进行一次下沉，是两个方向的冒泡排序。\n\n## 梳排序(Comb sort)\n\n$O(n\\log{n})$ 不稳定排序\n\n用希尔排序的方法进化冒泡排序，衰减值默认选 1.3 效率最高\n\n## 计数排序\n\n$O(n+k)$ 稳定排序\n\n新建一个 k 元素的计数数组，k 为排序数组的取值空间，有值的计数数组键值就是排序结果。\n\n## 基数排序(Radix sort)\n\n$O(k\\cdot n)$\n\n按照个位、十位、百位...排序\n\n## Tim sort\n\n长度小于 64 的数组进行二分插入排序，大于 64 的数组进行归并排序，归并排序在比较大于 minrun 时直接对接数组。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["algorithm","Rust"]}},{"id":"2022/09/08/Traversing-a-binary-tree.md","slug":"2022/09/08/traversing-a-binary-tree","body":"\n# 遍历二叉树\n\n遍历二叉树其实也不难，就是利用栈的思维实现遍历挺有意思的，另外在写迭代器的时候还会用的 Rust 的生命周期，刚好能够对 Rust 的生命周期有更多的理解。\n\n## 遍历方法\n\n- 先序遍历，根左右\n- 中序遍历，左根右\n- 后序遍历，左右根\n- 按层遍历\n\n先序遍历，先把跟压入栈，执行 next 出栈取值，并将右子树和左子树压入栈，直到栈空，返回 None。\n\n```Rust\nstruct TreeIter<'tree> {\n    order: Order,\n    stack: Vec<&'tree Tree>,\n}\n\nimpl<'tree> TreeIter<'tree> {\n    pub fn new(tree: &Tree) -> TreeIter {\n            TreeIter {\n                stack: vec![tree],\n                order,\n            }\n    }\n}\n\nimpl<'tree> Iterator for TreeIter<'tree> {\n    type Item = String;\n    fn next(&mut self) -> Option<Self::Item> {\n        if self.stack.is_empty() {\n            return None;\n        }\n\n        let item = self.stack.pop().unwrap();\n\n        if item.right.is_some() {\n            self.stack.push(item.right.as_ref().unwrap());\n        }\n\n        if item.left.is_some() {\n            self.stack.push(item.left.as_ref().unwrap());\n        }\n\n        Some(item.value.to_owned())\n    }\n}\n```\n\n中序遍历，先把根的左手边按节点拆成几棵没有左子树的树压入栈，执行 next 的时候逐一弹出，如果弹出的子树有右子树，把右子树也拆成没有左子树的子树压入栈。\n\n```Rust\nstruct TreeIter<'tree> {\n    order: Order,\n    stack: Vec<&'tree Tree>,\n}\n\nimpl<'tree> TreeIter<'tree> {\n    pub fn new(tree: &Tree) -> TreeIter {\n        let mut iter = TreeIter {\n            stack: vec![tree],\n            order,\n        };\n\n        while let Some(node) = &iter.stack.last().unwrap().left {\n            iter.stack.push(node);\n        }\n\n        iter\n    }\n}\n\nimpl<'tree> Iterator for TreeIter<'tree> {\n    type Item = String;\n    fn next(&mut self) -> Option<Self::Item> {\n        if self.stack.is_empty() {\n            return None;\n        }\n        let item = self.stack.pop().unwrap();\n        if item.right.is_some() {\n           self.stack.push(item.right.as_ref().unwrap());\n              while let Some(node) = &self.stack.last().unwrap().left {\n                  self.stack.push(node);\n              }\n        }\n\n        Some(item.value.to_owned())\n    }\n}\n```\n\n后序遍历，相比于前两个准备工作多一些，需要两个栈，第一个栈按照先序遍历一样压栈，不同的是，先序遍历为了先出栈左子树（根左右）而先压栈右子树，这里要先压栈左子树。第一个栈的出栈元素直接压入第二个栈。执行 next 时，直接从第二个栈出栈即可。\n\n```Rust\nstruct TreeIter<'tree> {\n    order: Order,\n    stack: Vec<&'tree Tree>,\n}\n\nimpl<'tree> TreeIter<'tree> {\n    pub fn new(tree: &Tree) -> TreeIter {\n            let mut iter = TreeIter {\n                stack: vec![],\n                order,\n            };\n            let mut stack = vec![tree];\n            while !stack.is_empty() {\n                let node = stack.pop().unwrap();\n                iter.stack.push(node);\n                if node.left.is_some() {\n                    stack.push(node.left.as_ref().unwrap());\n                }\n                if node.right.is_some() {\n                    stack.push(node.right.as_ref().unwrap());\n                }\n            }\n            iter\n    }\n}\n\nimpl<'tree> Iterator for TreeIter<'tree> {\n    type Item = String;\n    fn next(&mut self) -> Option<Self::Item> {\n        if self.stack.is_empty() {\n            return None;\n        }\n\n        let item = self.stack.pop().unwrap();\n        Some(item.value.to_owned())\n    }\n}\n```\n\n按层遍历，就是把每一层的节点按层压入栈\n\n```Rust\nstruct LevelIter<'tree> {\n    stack: Vec<Vec<&'tree Tree>>,\n}\nimpl<'tree> LevelIter<'tree> {\n    pub fn new(tree: &'tree Tree) -> LevelIter {\n        let mut iter = LevelIter {\n            stack: vec![vec![tree]],\n        };\n\n        loop {\n            let last_row = iter.stack.last().unwrap();\n            let mut row: Vec<&'tree Tree> = vec![];\n            last_row.iter().for_each(|&node| {\n                if node.left.is_some() {\n                    row.push(node.left.as_ref().unwrap());\n                }\n\n                if node.right.is_some() {\n                    row.push(node.right.as_ref().unwrap());\n                }\n            });\n\n            if row.is_empty() {\n                break;\n            }\n\n            iter.stack.push(row);\n        }\n\n        iter.stack.reverse();\n\n        iter\n    }\n}\n\nimpl<'tree> Iterator for LevelIter<'tree> {\n    type Item = Vec<String>;\n    fn next(&mut self) -> Option<Self::Item> {\n        self.stack\n            .pop()\n            .map(|row| row.iter().map(|&tree| tree.value.to_owned()).collect())\n    }\n}\n```\n\n所有的迭代器语法里面都有个类似于泛型的`<'tree>`，这里就是 Rust 的生命周期，每一个迭代器都有一个自身的生命周期和对应的二叉树的生命周期，这里需要向编译器指明这个对象有两个生命周期，以及哪些变量的生命周期不同。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["algorithm","Rust"]}}]}