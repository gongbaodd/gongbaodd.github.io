{"posts":[{"id":"2020/03/10/docker-strapi.md","slug":"2020/03/10/docker-strapi","body":"\n# 腾讯云 docker 安装 strapi\n\n## Docker engine\n\n如下是[官网的安装过程](https://docs.docker.com/install/linux/docker-ce/ubuntu/)，首先移出 Ubuntu 原有的 docker（如果有的话）\n\n```shell\n sudo apt-get remove docker docker-engine docker.io containerd runc\n sudo apt-get update\n```\n\n安装相关依赖\n\n```\nsudo apt-get install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    gnupg-agent \\\n    software-properties-common\n```\n\n增加 docker 的安装源\n\n```shell\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n```\n\n开始安装（我的架构是 x86_64）\n\n```shell\nsudo add-apt-repository \\\n   \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n   $(lsb_release -cs) \\\n   stable\"\n\nsudo apt-get update\nsudo apt-get install docker-ce docker-ce-cli containerd.io\n```\n\n## Docker compose\n\n安装新版本`docker-compose`，因为文件存储在 github 上面，这里直接从 DaoCloud 下载。\n\n```\nsudo curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.4/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\n```\n\n## 解决 ERROR: Couldn't connect to Docker daemon at http+docker://localhost - is it running？\n\n需要增加自己用户到 docker 组，然后重新进入即可\n\n```shell\nsudo gpasswd -a ${USER} docker\n```\n\n## Strapi\n\n按照[strapi 官方文档](https://strapi.io/documentation/3.0.0-beta.x/installation/docker.html)执行如下操作。\n\n新建文件夹，并增加`docker-compose.yaml`\n\n```yaml\nversion: \"3\"\nservices:\n  strapi:\n    image: strapi/strapi\n    environment:\n      DATABASE_CLIENT: mongo\n      DATABASE_NAME: strapi\n      DATABASE_HOST: mongo\n      DATABASE_PORT: 27017\n      DATABASE_USERNAME: strapi\n      DATABASE_PASSWORD: strapi\n    links:\n      - mongo:mongo\n    volumes:\n      - ./app:/srv/app\n    ports:\n      - \"1337:1337\"\n\n  mongo:\n    image: mongo\n    environment:\n      MONGO_INITDB_ROOT_USERNAME: strapi\n      MONGO_INITDB_ROOT_PASSWORD: strapi\n    volumes:\n      - ./data/db:/data/db\n    ports:\n      - \"27017:27017\"\n```\n\n修改 docker 镜像选择[腾讯加速器](https://cloud.tencent.com/document/product/457/9113)。\n\n```json\n//  /etc/docker/daemon.json\n{\n  \"registry-mirrors\": [\"https://mirror.ccs.tencentyun.com\"]\n}\n```\n\n重启服务\n\n```shell\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```\n\n下载镜像。\n\n```shell\ndocker-compose pull\n```\n\n启动镜像\n\n```shell\ndocker-compose up -d\n```\n\n现在你的 1337 端口已经交给 strapi 了。\n","collection":"blog","data":{"type":"post","category":"fe","tag":["docker","tencent","strapi"]}},{"id":"2020/03/11/docker-Jenkins.md","slug":"2020/03/11/docker-jenkins","body":"\n# 使用 docker 安装 Jenkins\n\n自从成功通过 docker 安装了 strapi，我一下子对安装一切产生了很大兴趣。\n\n通过`docker-compose.yaml`可以很快安装。\n\n```yaml\njenkins:\n  restart: always\n  image: jenkins/jenkins:lts\n  container_name: gongbaodd-jenkins\n  volumes:\n    - ./docker/jenkins:/home/ubuntu/jenkins_home\n  ports:\n    - \"50000:50000\"\n    - \"8080:8080\"\n```\n\n然后访问服务器的 8080 端口，即可安装对应插件，注意，这些插件不能走代理，所以...非常慢...国内还是用 coding.net 吧。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["docker","jenkins","ci"]}},{"id":"2020/03/11/snap.md","slug":"2020/03/11/snap","body":"\n# 为 snap 添加代理\n\n想在腾讯云里面做个 CI，本着用新不用旧的思想，我打算试试搭建 microk8s。可是我国强大的网络环境无法导致无法安装，也没有个大厂出一个镜像解围，只好挂下代理解决。\n\n## sslocal\n\n注意，腾讯云里面安装 sslocal 会被和谐的，但是试了下 docker 却可以，我安装了 [teachmyself/sslocal](https://hub.docker.com/r/teachmyself/sslocal) ，目前没问题。\n\n## 修改`/etc/environment`\n\n```ini\nhttp_proxy=http://[服务器地址]:[端口号]\nhttps_proxy=http://[服务器地址]:[端口号]\n```\n\n重启 snap 即可\n\n```\nsudo systemctl restart snapd\n```\n","collection":"blog","data":{"type":"post","category":"tech","tag":["microk8s","snap","docker","shadowsocks","proxy"]}},{"id":"2020/03/15/Coding.net-Jenkins-CI-CD.md","slug":"2020/03/15/codingnet-jenkins-ci-cd","body":"\n# Coding.net 使用 Jenkins 实现自动部署(CI/CD)\n\n最近在做一些后端部署的工作，本来打算使用 Travis 部署，但是用于我的服务器在国内，所以在外网也需要挂梯子登陆到国内。但是使用 Coding.net 部署到腾讯云就方便很多（毕竟是同一家公司）。\n\n## 在 Coding 创建制品库和部署\n\n往往创建好 Coding 仓库之后需要手动配置来获得部署和制品库功能。点击「项目设置>功能开关」把「构建与部署」和「制品库」打开即可。\n\n点击「制品库」增加 docker 仓库，这里的指引很方便，可以本地写一个 hello-world 发布上去。\n\n点击「构建与部属>构建」新建构建计划，默认我都是选择代码仓库中的 Jenkins 文件，但是可以使用 coding 自带的图形化 Jenkins 编辑器，个人感觉还是比较鸡肋的，但是作为一个文件格式化工具还是不错的。另外[帮助文档](https://help.coding.net/docs/devops/ci/env.html?_ga=2.145117619.605259297.1584251292-35448522.1584251292#%E6%9E%84%E5%BB%BA%E8%AE%A1%E5%88%92%E8%AE%BE%E7%BD%AE%E4%B8%AD%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F)中有详细的变量说明。\n\n## Jenkins 配置\n\nJenkins 的主要功能是检出代码(git clone)，编译代码，执行测试，打包成 docker image 最后上传到制品库。详细内容可以参考[代码](https://github.com/gongbaodd/query.gongbushang.com/blob/master/Jenkinsfile)。\n\n```groovy\npipeline {\n  agent any\n  stages {\n    stage('检出') {\n      steps {\n        checkout([\n          $class: 'GitSCM', branches: [[name: env.GIT_BUILD_REF]],\n          userRemoteConfigs: [[\n            url: env.GIT_REPO_URL,\n            credentialsId: env.CREDENTIALS_ID\n          ]]\n        ])\n      }\n    }\n    stage('编译') {\n      steps {\n        script {\n          docker.image('strapi/base').withRun {\n            docker.image(\"strapi/base\").inside {\n              sh 'node -v && yarn --version && yarn install && NODE_ENV=production yarn build'\n            }\n          }\n        }\n\n      }\n    }\n    stage('打包镜像') {\n      steps {\n        script {\n          sh \"docker build -t strapi:${env.GIT_BUILD_REF} -t gongbaodd-docker.pkg.coding.net/query_gongbushang_com/docker/strapi:latest .\"\n        }\n\n      }\n    }\n    stage('发布') {\n      steps {\n        script {\n            sh \"docker login -u ${env.REGISTRY_USER} -p ${env.REGISTRY_PASS} ${REGISTRY_URL}\"\n            sh \"docker push ${REGISTRY_URL}/query_gongbushang_com/docker/strapi:latest\"\n        }\n      }\n    }\n  }\n}\n```\n\n## 服务器部分\n\n接下来就需要服务器自己下载镜像并执行了，这里有一个比较好的工具叫[watchtower](https://github.com/containrrr/watchtower)，它会每五分钟检查镜像是否有更新并更新本地镜像。\n\n```shell\nsudo docker run -d \\\n    --name watchtower \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    containrrr/watchtower\n```\n\n接下来在服务器执行刚才编译好的镜像即可。\n","collection":"blog","data":{"type":"post","category":"tech","tag":["coding.net","jenkins","docker"]}},{"id":"2020/04/02/docker-mongodb.md","slug":"2020/04/02/docker-mongodb","body":"\n# docker 化的 mongodb 使用方案\n\n之前提到过[使用 watchtower 更新本地的 image 的方案](/tech/2020/03/15/Coding.net使用Jenkins实现自动部署CI&CD)，本来我的系统一直使用 sqlite 来做数据库，现在想改成 mongodb。\n\n涉及到 mongodb 就不得不需要考虑怎么本地化，并且如何做备份。数据本地化很好做，只需要 docker 的 volume 即可，编写`docker-compose.yml`，使用`docker-compose up -d`。\n\n```ini\nversion: '3.7'\n\nvolumes:\n  mongo:\n  strapi:\n\nservices:\n  mongo:\n    image: mongo\n    restart: always\n    volumes:\n      - mongo:/data/db\n    ports:\n      - 27017:27017\n  adminmongo:\n    image: mrvautin/adminmongo\n    ports:\n      - 1234:1234\n    environment:\n      - HOST=0.0.0.0\n      - CONN_NAME=mongo\n      - DB_HOST=mongo\n      - DB_PORT=27017\n      - PASSWORD=$ADMIN_MONGO_PASSWORD\n    links:\n      - mongo:mongo\n  strapi:\n      image: <strapi registry>\n      environment:\n        DATABASE_CLIENT: mongo\n        DATABASE_NAME: strapi\n        DATABASE_HOST: mongo\n        DATABASE_PORT: 27017\n      links:\n        - mongo:mongo\n      volumes:\n        - ./app:/srv/app\n      ports:\n        - '1337:1337'\n\n\n```\n\n## 备份\n\n使用如下命令备份\n\n```shell\ndocker-compose exec -T mongo mongodump --archive --gzip --db <database> > dump.gz\n```\n\n## 还原\n\n```shell\ndocker-compose exec -T mongo mongorestore --archive --gzip < dump.gz\n```\n\n## 可视化管理 docker\n\n使用 [portainer](https://www.portainer.io/) 能够可视化管理现在运行的 docker。执行如下命令，再访问 localhost:9000，嗒嗒！以后再也不需要执行`docker ps`了。\n\n```shell\ndocker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer\n```\n\n## 可视化管理 mongodb\n\n可以使用[adminmongo](https://github.com/mrvautin/adminMongo)提供一套简单可用的 WebUI，我已经写到了 docker compose 里面了。\n\n另外`environment`里面的`PASSWORD`并不好使，已经有[issue](https://github.com/mrvautin/adminMongo/issues/166)，不过已经是 2017 年的了，最快的解决方式就是删除`config/app.json`，只需要在 portainer 里面选择`Containers > mongodb_adminmongo_1` 点击 `Edit`，修改 `Command` 并重新部署。\n\n![portainer的设置](./portainer-config.jpg)\n","collection":"blog","data":{"type":"post","category":"tech","tag":["docker","portainer","mongodb"]}}]}