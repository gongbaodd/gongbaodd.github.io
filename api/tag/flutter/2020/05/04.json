{"posts":[{"id":"2020/05/04/RN-Flutter-Dart.md","slug":"2020/05/04/rn-flutter-dart","body":"\n# 从 RN 到 Flutter-从 Dart 开始\n\n这是一篇翻译，原文来自于[官方文档](https://flutter.dev/docs/get-started/flutter-for/react-native-devs)，当然，里面夹带私货，哈哈。\n\n## 从 JavaScript 到 Dart\n\n就像 React Native，Flutter 也是用响应式界面。但是 React Native 是链接原生环境，而 flutter 则是直接编译到原生环境中。Flutter 可以控制屏幕上面的每一个像素，可以避免 JavaScript 和原生环境桥的性能问题。\n\nDart 是一个简单的语言，并提供以下功能。\n\n- 提供一个开源可伸缩的开发环境并提供给网页端、服务器端、移动端使用。\n- 提供单继承面向对象的 C 语法支持，并支持 AOT 编译至原生环境。\n- 可翻译到 JavaScript\n- 支持接口和虚基类的数据结构\n\n以下是几处 JavaScript 和 Dart 的不同之处。\n\n### 入口\n\nJavaScript 没有与设定的入口函数。\n\n```js\nfunction startHere() {\n  // 可以用来做入口函数\n}\n```\n\nDart 有一个顶级`main()`函数作为入口函数使用。\n\n```Dart\nmain() {}\n```\n\n在 [DartPad](https://dartpad.dev/0df636e00f348bdec2bc1c8ebc7daeb1) 上使用。\n\n### 打印日志\n\n在 Dart 中打印日志需要使用`print()`函数。\n\n```js\nconsole.log(\"Hello JavaScript!\");\n```\n\n```Dart\nprint(\"Hello Dart!\");\n```\n\n在 [DartPad](https://dartpad.dev/cf9e652f77636224d3e37d96dcf238e5) 试用。\n\n### 变量\n\nDart 是类型安全的——它结合静态类型检查和动态类型检查确保变量总是符合它的静态类型。即使类型是强制的，但类型标识并不是必须的，因为 Dart 会预判类型。\n\n#### 声明变量并赋值\n\n在 JavaScript 中，变量是无类型的（这是原文说的，不是我说的，我不是很同意）。\n\n```js\nvar name = \"JavaScript\";\n```\n\n在 Dart 中，变量必须声明类型，或者让系统能够预判类型。\n\n```Dart\nString name = \"Dart\";\nvar otherName = \"Dart\";\n```\n\n在 [DartPad](https://dartpad.dev/3f4625c16e05eec396d6046883739612) 中试用。\n\n点[这里](https://dart.dev/guides/language/sound-dart)了解 Dart 的类型系统。\n\n#### 默认值\n\n在 Javascript 中，未初始化的变量是`undefined`（他可能指的是函数作用域变量）。\n\n```js\nvar name; // undefined\n```\n\n在 Dart 中，未初始化的变量值为`null`。因为 Dart 中的类型都是对象，所以即使定义了类型但没有赋值它的默认值依然是 null。\n\n```dart\nvar name; // null\nint x; // null\n```\n\n在 [DartPad](https://dartpad.dev/57ec21faa8b6fe2326ffd74e9781a2c7) 使用。\n\n更多关于 [Dart 变量](https://dart.dev/guides/language/language-tour#variables) 的信息。\n\n#### 空值检查和零值检查\n\n在 JavaScript 中非空对象被认为是真值。\n\n```JavaScript\nvar myNull = null;\nif (!myNull) {\n  console.log(\"null是假值\");\n}\nvar zero = 0;\nif (!zero) {\n  console.log(\"0是假值\");\n}\n```\n\nDart 中，只有布尔真值是真值。\n\n```Dart\nvar myNull = null;\nif (myNull == null) {\n  print(\"使用 == null 做空值检查\");\n}\nvar zero = 0;\nif (zero == 0) {\n  print(\"使用 == 0 做零值检查\");\n}\n```\n\n在 [DartPad](https://dart.dev/guides/language/language-tour#variables) 上使用。\n\n#### 函数\n\n两个语言的函数基本上相同。\n\n```JavaScript\nfunction fn() {\n  return true;\n}\n```\n\n不同点是他们的声明。\n\n```dart\n{\n  fn() {\n    return true;\n  }\n}\n\n{// 也能这么写\n  bool fn() {\n    return true;\n  }\n}\n```\n\n在 [DartPad](https://dartpad.dev/5454e8bfadf3000179d19b9bc6be9918) 上使用，点[这里](https://dart.dev/guides/language/language-tour#functions)查看函数细节。\n\n#### 异步开发\n\n##### Futures\n\n和 Javascript 一样，Dart 支持单线程执行。JavaScript 使用 promise 对象处理异步的成功以及失败状态，并获取它的值。\n\n```js\nconst getIp = () =>\n  fetch(\"https://httpbin.org/ip\")\n    .then((res) => res.json())\n    .then(({ origin: { ip } }) => ip);\n\ngetIp()\n  .then((ip) => console.log(ip))\n  .catch((errpr) => console.error(error));\n```\n\n而在 Dart 中，使用 [Future](https://dart.dev/tutorials/language/futures) 对象处理异步。\n\n```Dart\nimport \"dart:convert\";\nimport \"package:http/http.dart\" as http;\n\nFuture<string> getIp() {\n  return http.get(\"https://httpbin.org/ip\")\n    .then((res) {\n      String ip = jsonDecode(res.body)[\"origin\"];\n      return ip;\n    });\n}\n\nmain() {\n  getIp()\n    .then(ip => print(ip))\n    .catchError((error) ==> print(error));\n}\n```\n\n点击[这里](https://dart.dev/tutorials/language/futures)了解 Future 对象。\n\n##### `async` 和 `await`\n\n使用 `async` 标识符声明异步函数。\n\n在 JavaScript 中，`async`函数返回一个`Promise`对象，并使用`await`处理它。\n\n```js\nasync function getIp() {\n  const res = await fetch(\"http://httpbin/ip\");\n  const { origin } = await res.json();\n  return origin;\n}\n\nasync function main() {\n  try {\n    const ip = await getIp();\n    console.log(ip);\n  } catch (e) {\n    console.log(e);\n  }\n}\n```\n\n在 Dart 中，`async`函数返回`Future`类型，函数体会被安排运行，`await`运算符被用来获取`Future`的返回值。\n\n```dart\nimport \"package:http/http.dart\" as http;\nimport \"dart:convert\"\n\nFuture<string> getIp() {\n  final res = await http.get(\"http://httpbin.org/ip\");\n  String ip = jsonDecode(res.body)['origin'];\n  return ip;\n}\n\nmain() async {\n  try {\n    final ip = await getIp();\n    print(ip);\n  } catch(e) {\n    print(e);\n  }\n}\n```\n\n了解更多[async 和 await](https://dart.dev/guides/language/language-tour#asynchrony-support)的信息。\n","collection":"blog","data":{"type":"post","category":"fe","tag":["react-native","flutter","dart"],"series":{"slug":"Flutter-for-RN-devs","name":"从RN到Flutter","number":1}}}]}